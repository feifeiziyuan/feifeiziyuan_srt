1
00:00:00,433 --> 00:00:02,933
目前我们必须跳入修复
currently we have to jump into fix

2
00:00:02,933 --> 00:00:05,633
并手动启动我们的顶级主管
and manually start our top level supervisor

3
00:00:05,800 --> 00:00:06,466
是的
yeah instead

4
00:00:06,466 --> 00:00:08,600
我们希望主管自动启动
we'd like the supervisor to start automatically

5
00:00:08,600 --> 00:00:10,400
当应用程序本身启动时
when the application itself starts

6
00:00:10,533 --> 00:00:12,366
所以当应用程序启动时
so when the application starts

7
00:00:12,366 --> 00:00:14,433
我们如何让它运行这行代码
how do we get it to run this line of code

8
00:00:14,900 --> 00:00:16,500
它开始了我们的顶级主管
it starts our top level supervisor

9
00:00:16,500 --> 00:00:17,733
点燃一切
which fires everything up

10
00:00:18,166 --> 00:00:20,666
但要回答我们的问题，我们需要退后一步
but to answer our question we need to take a step back

11
00:00:20,933 --> 00:00:21,800
到这一点
up to this point

12
00:00:21,800 --> 00:00:25,233
我们一直在相当松散地使用术语应用程序
we've been using the term application fairly loosely

13
00:00:25,366 --> 00:00:28,900
但应用程序是一流的顶级实体
but an application is a first class top entity

14
00:00:29,233 --> 00:00:30,000
一直以来
and all along

15
00:00:30,000 --> 00:00:33,133
我们一直在应用程序的上下文中工作
we've been working in the context of an to application

16
00:00:33,333 --> 00:00:35,566
让我们看看幕后发生了什么
let's see what's been going on behind the scenes

17
00:00:36,100 --> 00:00:37,800
第一个我要离开ix
1st I'm going to get out of ix

18
00:00:38,066 --> 00:00:40,100
我只是要清理所有构建工件
and I'm just going to clean up all the build artifacts

19
00:00:40,100 --> 00:00:41,333
所有编译的代码
all the compiled code

20
00:00:41,333 --> 00:00:42,900
通过使用混合清洁
by using mix clean

21
00:00:44,033 --> 00:00:45,966
好吧，如果我使用混合编译
okay then if I use mix compile

22
00:00:47,766 --> 00:00:49,566
虽然我们看到它编译成 20 个文件
while we see it compiled to 20 files

23
00:00:49,566 --> 00:00:51,066
然后它说生成
and then it said generated

24
00:00:51,166 --> 00:00:53,133
以同样的方式奴役
servile in the same way

25
00:00:53,133 --> 00:00:55,033
如果我要再次清理一切
if I were to clean up everything again

26
00:00:55,966 --> 00:00:57,800
并进入 ix 会话
and jump into an ix session

27
00:00:58,600 --> 00:01:00,366
好吧，它会自动编译所有内容
well it automatically compiles everything

28
00:01:00,366 --> 00:01:02,933
编译20个文件，它还说生成
compiling 20 files and it also says generated

29
00:01:02,966 --> 00:01:03,766
服务应用
servi app

30
00:01:04,266 --> 00:01:05,566
现在我们回到哪里
now we'll come back to where

31
00:01:05,566 --> 00:01:07,466
该应用程序在一分钟内生成
the app got generated in a minute

32
00:01:07,733 --> 00:01:08,266
第一的
first

33
00:01:08,266 --> 00:01:10,533
让我们看看当前正在运行哪些应用程序
let's see which applications are currently running

34
00:01:10,866 --> 00:01:13,600
为此，我们可以使用应用程序模块
to do that we can use the application module

35
00:01:13,633 --> 00:01:16,600
还有一个叫做启动应用程序的功能
and there's a function called started applications

36
00:01:18,900 --> 00:01:20,333
嗯，这很有趣
well this is pretty interesting

37
00:01:20,433 --> 00:01:23,766
我们看到我们的调查应用程序是一个正在运行的应用程序
we see that our survey app is a running application

38
00:01:23,900 --> 00:01:26,700
以及许多其他应用程序，包括
along with a bunch of other applications including

39
00:01:26,700 --> 00:01:28,966
毒药是一种外部依赖
poison which is an external dependency

40
00:01:28,966 --> 00:01:30,333
我们在课程的前面添加了
we added earlier in the course

41
00:01:30,900 --> 00:01:31,133
现在
now

42
00:01:31,133 --> 00:01:34,333
毒启动了它需要的其他一些应用程序
poison started a few other applications that it needed

43
00:01:34,333 --> 00:01:35,966
包括ssl
including ssl

44
00:01:36,133 --> 00:01:38,266
和公钥和密码
and public key and crypt

45
00:01:38,566 --> 00:01:40,600
我们甚至看到了长生不老药
and we even see elixir

46
00:01:40,833 --> 00:01:46,100
和混合和性和标准的lib和上校
and mix and sex and standard lib and colonel

47
00:01:46,100 --> 00:01:48,566
这些都是当前正在运行的应用程序
those are all currently running applications

48
00:01:48,800 --> 00:01:50,300
所以叫 ix
so calling ix

49
00:01:50,300 --> 00:01:50,600
短跑
dash

50
00:01:50,600 --> 00:01:53,966
s mix 自动启动调查应用程序
s mix automatically started the survey application

51
00:01:54,000 --> 00:01:56,500
及其所有依赖项
and all of its dependencies which are

52
00:01:56,600 --> 00:01:57,900
也应用
also applications

53
00:01:58,200 --> 00:02:00,000
但它怎么知道要做这一切
but how did it know to do all that

54
00:02:00,900 --> 00:02:03,933
好吧，这让我们回到了混音圈
well this brings us full circle back to the mix

55
00:02:04,000 --> 00:02:05,566
ex文件是
ex file that is

56
00:02:05,633 --> 00:02:08,333
调查顶级目录的正下方
right underneath the survey top level directory

57
00:02:08,666 --> 00:02:09,233
你会记得
you'll remember

58
00:02:09,233 --> 00:02:11,133
当我们生成这个文件时
that this file got generated when we

59
00:02:11,133 --> 00:02:12,333
创建了项目
created the project

60
00:02:12,333 --> 00:02:13,566
使用混合新
using mix new

61
00:02:14,066 --> 00:02:16,666
在项目功能中，我们看到应用程序名称
and in the project function we see the application name

62
00:02:16,733 --> 00:02:18,733
调查版本号
survey also the version number

63
00:02:19,233 --> 00:02:20,700
然后它调用
and then it calls the

64
00:02:20,766 --> 00:02:23,000
获取外部依赖的深度函数
depth function to get external dependencies

65
00:02:23,000 --> 00:02:23,800
在那里
and down there

66
00:02:24,066 --> 00:02:26,700
我们添加了毒药作为外部依赖项
we added poison as an external dependency

67
00:02:26,766 --> 00:02:27,866
在课程的早期
earlier on in the course

68
00:02:28,133 --> 00:02:30,833
毒药本身就是一种应用
and poison is an application in its own right

69
00:02:31,400 --> 00:02:33,533
然后我们也有这个应用功能
and then we also have this application function

70
00:02:33,533 --> 00:02:35,300
描述应用程序的
that describes the application

71
00:02:35,766 --> 00:02:38,233
我们看到毒应用是自动的
we saw that the poison application was automatically

72
00:02:38,233 --> 00:02:40,900
开始，因为它被列为依赖项
started because it's listed as a dependency

73
00:02:41,033 --> 00:02:42,233
并混合推断
and mix infers

74
00:02:42,433 --> 00:02:43,266
从什么开始
what to start

75
00:02:43,800 --> 00:02:47,500
然后我们可以使用这个额外的应用程序来启动
and then we can use this extra applications to start

76
00:02:47,600 --> 00:02:49,766
包含的任何额外应用程序
any extra applications that are included

77
00:02:49,766 --> 00:02:52,100
或早早与长生不老药一起发货
or shipped with elixir early

78
00:02:52,433 --> 00:02:53,166
例如
for example

79
00:02:53,166 --> 00:02:55,800
默认情况下，记录器应用程序已启动
by default the logger application is started

80
00:02:56,133 --> 00:02:59,233
所以这个文件中的所有信息都用于生成
so all the information in this file is used to generate

81
00:02:59,233 --> 00:03:00,566
调查申请
the survey application

82
00:03:01,100 --> 00:03:04,000
那么生成的调查申请文件在哪里
so where is the generated survey application file

83
00:03:04,700 --> 00:03:04,866
我是
I'm

84
00:03:04,866 --> 00:03:07,200
在顶级的常规终端会话中
in a regular terminal session here in the top level

85
00:03:07,200 --> 00:03:08,300
调查目录
survey directory

86
00:03:08,400 --> 00:03:11,000
并且所有构建工件都存在于
and all the build artifacts live in the

87
00:03:11,000 --> 00:03:12,700
下划线构建目录
underscore build directory

88
00:03:13,033 --> 00:03:15,433
现在，一旦我们进入这个目录，我们就在耳林
now once we go into this directory we're in earlingland

89
00:03:15,433 --> 00:03:17,800
所以结构感觉有点正统
so the structure feels a bit on orthodox

90
00:03:17,866 --> 00:03:19,200
给长生不老药开发者
to an elixir developer

91
00:03:19,366 --> 00:03:22,400
但它遵循 top 预期的约定
but it follows the conventions expected by top

92
00:03:22,633 --> 00:03:23,800
和伯爵vm
and the earling vm

93
00:03:24,200 --> 00:03:25,000
所以根据法案
so under the bill

94
00:03:25,000 --> 00:03:26,700
目录有两个子目录
directory there are two sub directories

95
00:03:26,766 --> 00:03:28,966
开发和测试，所以我要深入开发
dev and test so I'm going to go down into dev

96
00:03:29,400 --> 00:03:31,100
然后它下面有两个子目录
then there are two sub directories under it

97
00:03:31,266 --> 00:03:33,133
合并不用担心
consolidated don't worry about it

98
00:03:33,166 --> 00:03:34,733
然后生活，我们要去那里
and then live we're going to go down there

99
00:03:35,700 --> 00:03:38,133
然后在 lib 下我们看到两个子目录
and then under lib we see two sub directories

100
00:03:38,133 --> 00:03:39,400
毒药和调查
poison and survey

101
00:03:39,400 --> 00:03:41,233
这是两个应用程序
those are the two applications

102
00:03:41,233 --> 00:03:43,200
让我们进入调查子目录
let's go into the survey sub directory

103
00:03:43,300 --> 00:03:45,433
然后是合并的将忽略
and then there's consolidated which will ignore

104
00:03:45,600 --> 00:03:48,633
而最重要的部分是e bin目录
and the most important part is the e bin directory

105
00:03:49,300 --> 00:03:50,400
那么里面有什么
so what's inside of there

106
00:03:51,466 --> 00:03:54,033
好吧，它包括一堆以结尾的文件
well it includes a bunch of files ending in

107
00:03:54,466 --> 00:03:57,366
对应于我们每个模块的梁
beam that correspond to each of our modules

108
00:03:59,233 --> 00:04:01,700
这些是运行的编译二进制文件
these are compiled binary files that run

109
00:04:01,766 --> 00:04:02,966
在伯爵vim上
on the earling vim

110
00:04:03,200 --> 00:04:04,333
在编译期间
during compilation

111
00:04:04,333 --> 00:04:07,166
我们 lib 目录中的所有文件都已编译
all the files in our lib directory were compiled

112
00:04:07,233 --> 00:04:10,133
并且产生的光束小瓶最终在这个目录中
and the resulting beam vials ended up in this directory

113
00:04:10,633 --> 00:04:12,066
但如果你看底部
but if you look at the bottom

114
00:04:12,233 --> 00:04:15,733
请注意，还有一个调查点应用程序文件
notice that there's also a survey dot app file

115
00:04:16,200 --> 00:04:17,333
这是一个纯文本文件
it's a plain text file

116
00:04:17,333 --> 00:04:19,166
所以让我们继续看看里面有什么
so let's go ahead and see what's inside

117
00:04:20,100 --> 00:04:22,333
我只是要使用 cat 命令来做到这一点
and I'm just going to use the cat command to do that

118
00:04:22,333 --> 00:04:24,366
它只是要打印出该文件中的内容
it's just going to print out what's in that file

119
00:04:24,600 --> 00:04:25,433
服务点应用程序
servey dot app

120
00:04:26,366 --> 00:04:26,533
和
and

121
00:04:26,533 --> 00:04:28,666
我会把它缩小，这样我们就可以看到这里的一切
I'll just shrink it down so we can see everything here

122
00:04:29,066 --> 00:04:31,066
有趣的是，这是伯爵代码
well interestingly it's earling code

123
00:04:31,066 --> 00:04:33,833
这只是这里的一个大伯爵倒塌
this is just one big earling topple right here

124
00:04:34,366 --> 00:04:36,766
它包括应用程序名称调查
it includes the application name survey

125
00:04:37,233 --> 00:04:38,800
有一个描述调查
there's a description survey

126
00:04:38,800 --> 00:04:40,433
我们看到有一个版本号
we see that there's a version number

127
00:04:40,700 --> 00:04:41,500
在那里
right there

128
00:04:42,033 --> 00:04:45,600
它还有一个已编译模块的列表，这里是列表
it also has a list of compiled modules here's the list

129
00:04:46,033 --> 00:04:49,166
每个模块对应一个梁文件
and each of those modules corresponds to a beam file

130
00:04:49,366 --> 00:04:52,066
然后还有一个应用程序列表
and then there's also a list of applications

131
00:04:53,233 --> 00:04:55,966
所以我们看到了毒应用记录器
so we see the poison application logger

132
00:04:56,033 --> 00:04:56,733
接着
and then

133
00:04:56,733 --> 00:04:59,833
上校的标准唇膏和长生不老药也在混合物中
also colonel's standard lip and elixir were in the mix

134
00:05:00,266 --> 00:05:01,300
所以你可以想到这个
so you can think of this

135
00:05:01,300 --> 00:05:04,666
作为定义服务应用程序的规范
as a specification that defines the service application

136
00:05:04,800 --> 00:05:07,633
这个文件是由 mix 自动生成的
this file was automatically generated by mix

137
00:05:07,733 --> 00:05:10,433
部分是通过使用混合中的信息
in part by using information that's in the mix

138
00:05:10,433 --> 00:05:12,500
我们之前看过的多余文件
excess file we looked at earlier

139
00:05:13,000 --> 00:05:15,433
现在好消息是我们永远不必碰这个文件
now the good news is we never have to touch this file

140
00:05:15,433 --> 00:05:16,866
它是为我们生成的
it's generated for us

141
00:05:17,566 --> 00:05:20,033
好吧，让我们为我们的应用程序添加一个更好的描述
well let's add a better description of our application

142
00:05:20,200 --> 00:05:23,100
让我们称它为一个不起眼的 http 服务器
let's call it a humble http server

143
00:05:23,433 --> 00:05:26,366
是的，我们只是回到我们的混音前
yes we just come back over to our mix ex

144
00:05:26,666 --> 00:05:29,466
我们可以在项目下添加一个描述键
and we can add a description key under project

145
00:05:30,866 --> 00:05:33,466
一个不起眼的 http 服务器
a humble http server

146
00:05:33,900 --> 00:05:34,733
把它存起来
save that away

147
00:05:35,466 --> 00:05:36,600
现在回到这里
now back over here

148
00:05:36,700 --> 00:05:38,333
我在我的顶级调查目录中
I'm in my top level survey directory

149
00:05:38,333 --> 00:05:40,166
如果我使用混合编译
if I use mix compile

150
00:05:42,400 --> 00:05:44,666
然后我们再次查看该服务应用程序
and then we look at that service app again

151
00:05:45,500 --> 00:05:47,166
好吧，您注意到描述发生了变化
well you notice the descriptions changed

152
00:05:47,166 --> 00:05:49,266
它现在是一个不起眼的臀部服务器
it's now a humble hip server

153
00:05:49,600 --> 00:05:52,000
所以服务点应用程序文件得到了更新
so the service dot app file got updated

154
00:05:52,000 --> 00:05:53,533
当我们运行混合编译时
when we ran mixed compile

155
00:05:54,033 --> 00:05:55,500
现在我们看到了构建目录
now we saw that the build directory

156
00:05:55,500 --> 00:05:56,500
也有毒应用
also had the poison app

157
00:05:56,500 --> 00:05:57,733
让我们来看看
so let's take a look at that

158
00:05:57,833 --> 00:05:58,666
它正在建设中
it's under build

159
00:05:59,466 --> 00:06:02,433
它处于开发库毒药之下
and it's under dev lib poison

160
00:06:03,800 --> 00:06:06,366
我们想进入e bin目录
and we want to go down into e bin directory for it

161
00:06:06,600 --> 00:06:06,800
好
well

162
00:06:06,800 --> 00:06:09,000
你会看到只有一堆梁文件
and you see that there's just a bunch of beam files

163
00:06:09,000 --> 00:06:10,766
对应所有模块
corresponding to all the modules

164
00:06:10,933 --> 00:06:12,500
在毒药库里
that are in the poison library

165
00:06:12,500 --> 00:06:14,866
还有一个毒点应用文件
and there's also a poison dot app file

166
00:06:15,233 --> 00:06:16,266
看起来很熟悉
looks pretty familiar

167
00:06:16,266 --> 00:06:17,400
让我们看看
let's have a look at that

168
00:06:17,700 --> 00:06:19,500
毒坚果应用程序，我将运行
poison nut app and I'm just going to run the

169
00:06:19,500 --> 00:06:20,600
cat 命令就可以了
cat command on it

170
00:06:21,966 --> 00:06:22,933
把它缩小一点
shrink it down a little bit

171
00:06:22,933 --> 00:06:24,100
所以我们可以看到完整的东西
so we can see the full thing

172
00:06:24,933 --> 00:06:27,833
好吧，它有一个描述，包含所有模块
well it's got a description has all the modules

173
00:06:28,700 --> 00:06:29,866
它有一个版本号
it's got a version number

174
00:06:30,200 --> 00:06:32,400
然后启动它需要的应用程序
and then the applications that it needs started

175
00:06:32,866 --> 00:06:36,600
所以当我们启动 if s mix 时，它会编译
so when we fire up if s mix it compiles

176
00:06:36,866 --> 00:06:37,866
一切过时的东西
everything that's out of date

177
00:06:38,066 --> 00:06:40,333
生成一个新的服务文件
generates a new service file

178
00:06:40,433 --> 00:06:43,433
然后 top 查找服务文件
and then top looks for the service file

179
00:06:43,500 --> 00:06:45,600
并使用它来启动应用程序
and uses it to start the application

180
00:06:45,733 --> 00:06:47,266
及其所有依赖项
and all of its dependencies

181
00:06:47,266 --> 00:06:49,133
包括我们在这里看到的毒药
including poison we see right here

182
00:06:50,300 --> 00:06:51,566
回到 ix
back over an ix

183
00:06:51,566 --> 00:06:53,900
我们也可以将应用程序作为一个洞来停止
we can also stop the application as a hole

184
00:06:53,900 --> 00:06:54,833
然后重新开始
and then start it again

185
00:06:54,833 --> 00:06:56,866
所以我们可以使用那个应用程序模块
so we can use that application module

186
00:06:57,033 --> 00:06:58,233
我们可以叫停
we can call stop

187
00:06:58,700 --> 00:07:00,600
在我们的调查申请中
on our survey application

188
00:07:02,500 --> 00:07:05,033
好吧，如果我们再次查看已启动的应用程序
okay now if we look at started applications again

189
00:07:05,033 --> 00:07:07,166
好吧，您注意到servi不在顶部
well you notice servi isn't at the top

190
00:07:07,766 --> 00:07:11,366
所以我们可以通过使用 start pass serve 重新启动它
so we could restart it by using start passing serve

191
00:07:12,900 --> 00:07:14,133
现在又开始了
and now it started again

192
00:07:15,233 --> 00:07:16,400
所以这里的外卖
so the takeaway here

193
00:07:16,400 --> 00:07:20,000
是顶级应用程序是一流的实体吗
is that an top application is a first class entity

194
00:07:20,066 --> 00:07:22,700
可以作为一个单元启动和停止
that can be started and stopped as a unit as

195
00:07:22,700 --> 00:07:26,000
一个整体，可以在其他系统中重用
a whole and can be reused in other systems

196
00:07:26,200 --> 00:07:28,333
这样它更像是一个组件
in this way it's more like a component

197
00:07:28,400 --> 00:07:31,433
或服务而不是传统应用程序
or a service than a traditional application

198
00:07:32,566 --> 00:07:33,800
所以现在我们有了更好的
so now that we have a better

199
00:07:33,933 --> 00:07:36,666
了解什么是顶级应用程序
understanding of what an top application is

200
00:07:36,933 --> 00:07:38,700
让我们回到最初的目标
let's return to our original goal

201
00:07:39,133 --> 00:07:40,666
即使我们的应用程序正在运行
even though our application is running

202
00:07:40,666 --> 00:07:43,400
我们仍然需要手动启动主管
we still have to start the supervisor manually to

203
00:07:43,400 --> 00:07:44,633
引导一切
bootstrap everything

204
00:07:44,966 --> 00:07:47,166
而不是手动启动主管
instead of manually starting the supervisor

205
00:07:47,166 --> 00:07:49,733
我们希望主管自动启动
we want the supervisor to start automatically

206
00:07:49,733 --> 00:07:51,933
当应用程序本身启动时
when the application itself starts

207
00:07:52,366 --> 00:07:55,133
那么我们通常如何告诉 top 做某事
so how do we typically tell top to do something

208
00:07:55,166 --> 00:07:56,933
特定于我们的应用程序
that specific to our application

209
00:07:57,233 --> 00:07:58,833
好吧，我们使用回调
well we use a callback

210
00:07:59,200 --> 00:08:02,033
我们使用回调来专门处理性别行为
we've used callbacks to specialize gendered behaviors

211
00:08:02,100 --> 00:08:02,733
我们用过
and we've used

212
00:08:02,733 --> 00:08:05,300
回调以专门化主管行为
callbacks to specialize supervisor behaviors

213
00:08:05,466 --> 00:08:06,400
以同样的方式
in the same way

214
00:08:06,433 --> 00:08:08,233
我们将使用回调来专门化
we'll use a callback to specialize

215
00:08:08,233 --> 00:08:09,766
应用行为
the application behavior

216
00:08:10,733 --> 00:08:14,100
因为回调模块将使用此文件调查
as the callback module will use this file survey

217
00:08:14,100 --> 00:08:15,966
ex它在lib下
ex it's under lib

218
00:08:16,000 --> 00:08:18,366
但它不在调查子目录中
but it's not in the survey sub directory

219
00:08:18,600 --> 00:08:21,866
这是我们运行时生成的顶级文件
it's this top level file that was generated when we ran

220
00:08:21,900 --> 00:08:23,866
混新长
mix new a long

221
00:08:24,166 --> 00:08:25,533
很久以前
long time ago

222
00:08:26,200 --> 00:08:28,433
所以我们将在这里摆脱这些你好东西
so we'll get rid of this hello stuff here

223
00:08:31,333 --> 00:08:34,266
然后我们将使用应用程序行为
and then we're going to use the application behavior

224
00:08:34,666 --> 00:08:37,533
并且应用程序行为需要回调
and the application behavior expects the callback

225
00:08:37,533 --> 00:08:39,766
定义启动函数的模块
module to define a start function

226
00:08:41,533 --> 00:08:43,133
start 函数有两个参数
start function takes two arguments

227
00:08:43,133 --> 00:08:45,000
第一个将是类型
the first one is going to be the type

228
00:08:45,000 --> 00:08:46,866
现在这通常只是原子
now this is typically just the atom

229
00:08:46,933 --> 00:08:48,633
正常，所以我们将忽略它
normal so we're going to ignore that

230
00:08:48,800 --> 00:08:50,633
第二个是参数
and the second one is arguments

231
00:08:50,633 --> 00:08:52,333
我们也将忽略这些
and we're going to ignore those as well

232
00:08:53,033 --> 00:08:54,100
然后我们要打印出来
then we're going to print out

233
00:08:55,100 --> 00:08:56,766
启动应用程序
starting the application

234
00:08:57,833 --> 00:08:59,933
所以这个启动函数将被调用
so this start function will be invoked

235
00:08:59,933 --> 00:09:01,733
应用程序启动时
when the application starts

236
00:09:01,766 --> 00:09:02,700
我们想做什么
what do we want to do

237
00:09:02,833 --> 00:09:05,700
好吧，我们想开始我们的顶级主管
well we want to start our top level supervisor

238
00:09:06,000 --> 00:09:07,100
我碰巧放弃了
and I happen to have that quit

239
00:09:07,100 --> 00:09:08,666
我只是将它粘贴在那里
I'm just going to paste it right in there

240
00:09:09,300 --> 00:09:11,233
在开始时必须返回一个元组
in start must return a tuple

241
00:09:11,300 --> 00:09:14,500
好的 pid 其中 pid 标识主管进程
okay pid where pid identifies the supervisor process

242
00:09:14,566 --> 00:09:15,766
所以我们可以这样
so we can leave it like this

243
00:09:15,766 --> 00:09:17,100
或者我们可以删除它
or we can just remove this

244
00:09:17,100 --> 00:09:19,400
因为我们知道一个元组会被返回
because we know that a tuple is going to get returned

245
00:09:19,633 --> 00:09:21,600
然后将隐式返回
and then that will be implicitly returned

246
00:09:21,600 --> 00:09:22,600
通过启动功能
by the start function

247
00:09:22,600 --> 00:09:24,500
这符合我们的讨价还价
which fulfills our side of the bargain

248
00:09:25,033 --> 00:09:27,433
所以通过编写这个应用程序行为
so by writing this application behavior

249
00:09:27,666 --> 00:09:29,866
我们基本上想覆盖
we basically want to override

250
00:09:30,133 --> 00:09:33,400
应用程序的通用应用程序行为
the generic application behavior for the application

251
00:09:33,533 --> 00:09:35,400
为此，我们需要确保
and to do that we need to make sure

252
00:09:35,666 --> 00:09:37,866
这个调查模块被称为
that this survey module is called

253
00:09:38,100 --> 00:09:40,400
我们在 mix ex 中做到这一点
and we do that in mix ex

254
00:09:41,333 --> 00:09:43,533
在这个应用程序部分
down in this application section

255
00:09:44,233 --> 00:09:45,800
我们将在这里添加一个新行
we're going to add a new line here

256
00:09:46,033 --> 00:09:47,200
这将是mod
it's going to be mod

257
00:09:47,800 --> 00:09:51,433
mod 指定要调用的回调模块
and mod specifies that callback module to invoke

258
00:09:51,500 --> 00:09:53,233
应用程序启动时
when the application is started

259
00:09:53,700 --> 00:09:56,233
我们给它一个元组，然后我们给它模块
we give it a tuple and then we give it the module

260
00:09:56,366 --> 00:09:57,166
民意调查
survey

261
00:09:57,300 --> 00:10:01,233
top 将调用该模块的启动函数
and top will invoke the start function of that module

262
00:10:01,266 --> 00:10:02,833
这是合同的一部分
that's part of the contract

263
00:10:02,933 --> 00:10:04,700
我们可以把它抹布
and we can pass it rag

264
00:10:04,700 --> 00:10:06,433
我们将使用一个空列表
and we're just going to use an empty list

265
00:10:06,666 --> 00:10:08,733
但你可以通过任何你需要的论点
but you could pass whatever argument you need

266
00:10:09,400 --> 00:10:10,966
回调模块可以是
the callback module can be

267
00:10:11,033 --> 00:10:13,566
任何使用应用程序行为的模块
any module that uses the application behavior

268
00:10:13,566 --> 00:10:15,500
所以你可以创建一个新的
so you could have created a new

269
00:10:15,666 --> 00:10:18,466
例如调查应用模块
survey application module for example

270
00:10:18,866 --> 00:10:20,500
但也很常见只是使用它
but it's also common just to use this

271
00:10:20,500 --> 00:10:22,200
顶层模块调查
top level module survey

272
00:10:22,533 --> 00:10:25,500
这里的要点是 top 会自动调用
the takeaway here is that top will automatically call

273
00:10:25,500 --> 00:10:27,400
该模块启动功能
this module start function

274
00:10:27,500 --> 00:10:29,300
当它启动应用程序时
when it starts the application

275
00:10:29,933 --> 00:10:31,000
所以我们会把它保存起来
so we'll save that away

276
00:10:31,800 --> 00:10:33,833
然后我们想开始一个新的性爱会话
and then we want to start a new sex session

277
00:10:38,366 --> 00:10:39,200
看看那个
and look at that

278
00:10:39,200 --> 00:10:40,900
这次它点燃了一切
this time it fires everything up

279
00:10:40,900 --> 00:10:42,400
它启动了应用程序
it started the application

280
00:10:42,433 --> 00:10:44,533
然后它开始了我们的顶级主管
then it started our top level supervisor

281
00:10:44,600 --> 00:10:46,266
然后其他一切都到位
and then everything else fell in place

282
00:10:47,200 --> 00:10:49,533
现在如果你想启动应用程序怎么办
now what if you wanted to start the application

283
00:10:49,666 --> 00:10:51,066
没有性外壳
without the sex shell

284
00:10:51,366 --> 00:10:53,000
那么你可以使用混合运行
well you could use mix run

285
00:10:53,600 --> 00:10:56,766
是的，如果你运行 mix run 我就离开这里
yeah I'll just get out of here if you run mix run

286
00:10:57,633 --> 00:10:58,433
像那样
like that

287
00:10:59,066 --> 00:11:00,466
它启动了一切
and it starts everything up

288
00:11:00,466 --> 00:11:03,500
但是我们最终回到终端会话提示中
but then we end up back in a terminal session prompt

289
00:11:03,500 --> 00:11:05,066
那是因为实例
well that's because the instance

290
00:11:05,066 --> 00:11:07,166
我们的服务一经终止
terminated as soon as our service

291
00:11:07,166 --> 00:11:08,500
启动功能完成
start function finished

292
00:11:08,866 --> 00:11:10,866
顶级主管启动后
after the top level supervisor started

293
00:11:11,400 --> 00:11:13,633
所以为了让它继续运行，我们需要使用它
so to keep it running we need to use this

294
00:11:13,633 --> 00:11:14,866
没有暂停选项
no halt option

295
00:11:16,233 --> 00:11:17,400
没有破折号
no dash halt

296
00:11:18,466 --> 00:11:19,266
完美的
perfect

297
00:11:19,700 --> 00:11:22,600
看到该输出提醒我我们的网络服务器
seeing that output reminds me that our web server

298
00:11:22,766 --> 00:11:24,866
始终在端口 4000 上运行
always runs on port 4000

299
00:11:25,366 --> 00:11:26,866
是的，端口号目前很难
yeah the port number is currently hard

300
00:11:26,866 --> 00:11:28,800
在我们的 kickstarter 模块中编码
coded in our kickstarter module

301
00:11:29,633 --> 00:11:31,233
所以在这里接受调查
so over here under survey

302
00:11:31,766 --> 00:11:33,100
那里是kickstarter
there it is kickstarter

303
00:11:33,133 --> 00:11:35,800
然后在这里我们在端口 4000 上启动它
and then down here we're starting it on port 4000

304
00:11:36,133 --> 00:11:37,833
我们可以让这更容易配置
we can make this easier to configure

305
00:11:37,833 --> 00:11:40,033
通过添加默认端口值
by adding a default port value

306
00:11:40,033 --> 00:11:41,866
到应用环境
to the applications environment

307
00:11:42,200 --> 00:11:45,466
为此，我们回到我们的 mix ex 文件
to do that we come back over to our mix ex file

308
00:11:46,133 --> 00:11:46,933
然后我们将添加
and then we'll add

309
00:11:47,200 --> 00:11:49,133
另一条线在这里申请
another line down here under application

310
00:11:49,500 --> 00:11:52,600
它将结束，然后我们给它一个关键字列表
it's going to be end and then we give it a keyword list

311
00:11:53,166 --> 00:11:54,033
所以我们的港口
so our port

312
00:11:54,400 --> 00:11:56,933
我们想成为 3000 我将使用 3000
we want to be 3000 I'm going to use 3000

313
00:11:57,033 --> 00:11:59,633
只是为了让你看到它从 4000 变化
just so that you see it changes from 4000

314
00:12:00,000 --> 00:12:03,700
所以这要做的是添加这个键值对
so what this is going to do is add this key value pair

315
00:12:03,966 --> 00:12:05,733
到应用环境
to the applications environment

316
00:12:06,200 --> 00:12:07,400
所以让我们把它保存起来
so let's save this away

317
00:12:08,400 --> 00:12:09,233
然后回到这里
then back over here

318
00:12:09,233 --> 00:12:12,333
我要杀了性，我要使用混合编译
I'm going to kill sex and I'm going to use mix compile

319
00:12:12,433 --> 00:12:15,633
这将生成一个新的服务应用程序文件
that's going to generate a new service app file

320
00:12:16,133 --> 00:12:17,633
如果我们看看
and if we have a look at that

321
00:12:18,433 --> 00:12:22,200
我们会注意到端口 3000 是
we'll notice that the port 3000 is part of

322
00:12:22,333 --> 00:12:23,733
这个申请文件
this application file

323
00:12:24,233 --> 00:12:26,633
所以现在当 top 启动应用程序时
so now when top starts the application

324
00:12:26,633 --> 00:12:28,566
默认应用环境
the default application environment

325
00:12:28,566 --> 00:12:29,700
将包括端口
will include the port

326
00:12:30,633 --> 00:12:32,433
然后回来踢起动器
then back over and kick starter

327
00:12:32,866 --> 00:12:34,666
而不是硬涂层端口
rather than hard coating the port

328
00:12:34,833 --> 00:12:37,500
我们可以从应用程序的环境中读取它
we can read it from the application's environment

329
00:12:37,833 --> 00:12:38,000
是的
yeah

330
00:12:38,000 --> 00:12:40,833
我们这样做的方式是使用应用程序模块
the way we do that is we use the application module

331
00:12:41,033 --> 00:12:42,733
有一个函数得到结束
there's a function get end

332
00:12:43,433 --> 00:12:46,433
在这种情况下，我们将应用程序的名称传递给它
we pass it the application's name serving in this case

333
00:12:46,600 --> 00:12:48,433
以及端口的变量名称
and the name of the variable which is port

334
00:12:49,133 --> 00:12:52,166
然后我们可以在这里使用那个端口变量
then we can just use that port variable right down here

335
00:12:53,633 --> 00:12:56,733
现在当我们启动 ix s mix
and now when we fire up ix s mix

336
00:12:58,100 --> 00:12:58,933
你注意到了
well you notice

337
00:12:58,966 --> 00:13:01,566
我们的网络服务器现在监听端口 3000
our web servers now listening on port 3000

338
00:13:01,866 --> 00:13:04,366
很酷，现在我们有一个完整的
pretty cool now that we have a complete

339
00:13:04,966 --> 00:13:07,466
正确的顶级应用程序运行
proper top application running

340
00:13:07,500 --> 00:13:10,000
让我们看看观察者粘糊糊的样子
let's see what it looks like in the observer gooey

341
00:13:10,366 --> 00:13:11,400
是的，让我们开火吧
yeah let's fire that up

342
00:13:12,600 --> 00:13:14,166
在我们看过的课程的早些时候
earlier on in the course we looked at

343
00:13:14,166 --> 00:13:16,700
单个进程正在运行
the individual process is running by going

344
00:13:16,733 --> 00:13:18,266
进入此进程选项卡
into this processes tab

345
00:13:18,933 --> 00:13:21,433
但现在我们可以转到应用程序选项卡
but now we can go to the applications tab

346
00:13:21,433 --> 00:13:23,166
并查看所有应用程序
and see all the applications that

347
00:13:23,166 --> 00:13:23,966
当前正在运行
are currently running

348
00:13:24,000 --> 00:13:25,466
它在这里的左侧结束了
it's over on the left hand side here

349
00:13:25,766 --> 00:13:28,700
包括我们不起眼的小调查应用程序
including our humble little survey application

350
00:13:29,266 --> 00:13:32,266
所以让我们先来看看性应用程序
so let's start by having a look at the sex application

351
00:13:32,766 --> 00:13:35,300
好吧，这很有趣，我们看到了它的监督树
well this is interesting we see its supervision tree

352
00:13:35,600 --> 00:13:37,633
它有一个主管，然后它有
it has a supervisor and then it has

353
00:13:37,700 --> 00:13:38,766
这里有两台服务器
two gen servers here

354
00:13:39,066 --> 00:13:41,466
我们现在确切地知道它是如何工作的
and we now know exactly how that works

355
00:13:41,800 --> 00:13:43,166
是的，如果我们看看上校
yeah if we look at colonel

356
00:13:43,733 --> 00:13:45,166
好吧，它有一个主管
well it has a supervisor

357
00:13:45,166 --> 00:13:46,933
上校 sup 就是它的名字
colonel sup is what it's named

358
00:13:46,933 --> 00:13:49,200
然后注意到它有一个二级主管
and then notice it's got a second level supervisor

359
00:13:49,200 --> 00:13:50,300
安全上校
colonel safe sup

360
00:13:50,466 --> 00:13:52,333
然后这里有一些流程
and then it has some processes under here

361
00:13:52,900 --> 00:13:54,733
所以这是它的监督树
so this is its supervision tree

362
00:13:55,100 --> 00:13:56,333
如果我们看一下记录器
if we look at logger

363
00:13:56,733 --> 00:13:57,900
好吧，它有一个顶级水平
well it's got a top level

364
00:13:57,900 --> 00:14:00,533
监督者，然后它有一个观察者监督者
supervisor and then it's got a watcher supervisor

365
00:14:00,533 --> 00:14:02,566
然后它有一些工作进程
and then it's got some worker processes

366
00:14:02,933 --> 00:14:04,600
现在是大揭秘
and now for the big reveal

367
00:14:04,900 --> 00:14:06,633
这是我们的监督树
here's our supervision tree

368
00:14:07,466 --> 00:14:09,366
我们有顶级主管
we've got our top level supervisor

369
00:14:09,500 --> 00:14:10,933
我们有我们的kickstarter
we've got our kickstarter

370
00:14:11,033 --> 00:14:13,533
我们的第二级服务主管
our services supervisor that's our 2nd level

371
00:14:13,700 --> 00:14:15,333
然后他们在管理孩子
and then they're managing children

372
00:14:16,166 --> 00:14:16,366
好的
okay

373
00:14:16,366 --> 00:14:19,133
让我们看看当我们杀死一个工作进程时会发生什么
let's see what happens when we kill a worker process

374
00:14:19,133 --> 00:14:20,800
比如质押服务器
such as the pledge server

375
00:14:21,400 --> 00:14:22,600
好的，如果我们点击它
okay if we click on that

376
00:14:22,600 --> 00:14:25,833
我们看到这里现在是 1 点 69 分
we see down here it's pied one sixty nine currently

377
00:14:25,966 --> 00:14:27,400
所以我可以右键单击它
so I can right click on it

378
00:14:27,733 --> 00:14:30,633
杀死进程发送它来杀死信号
kill process send it to kill signal

379
00:14:31,800 --> 00:14:32,866
好的，我们在这里看到
okay we see down here

380
00:14:33,400 --> 00:14:34,900
启动质押服务器
starting the pledge server

381
00:14:35,066 --> 00:14:38,300
所以它被我们的服务主管重新启动
so it got restarted by our services supervisor

382
00:14:38,533 --> 00:14:40,166
如果我现在点击质押服务器
and if I click on pledge server now

383
00:14:40,200 --> 00:14:42,833
好吧，它是一个不同的 pid 现在它是 4 6 6
well it's a different pid now it's 4 6 6

384
00:14:43,400 --> 00:14:44,666
哦，这很酷
oh that's pretty cool

385
00:14:44,900 --> 00:14:48,000
如果我们杀死服务主管会发生什么
what happens if we kill the services supervisor though

386
00:14:48,533 --> 00:14:51,433
如果我们现在点击它，它就是一号坑六十八号
if we click on it right now it's pit one sixty eight

387
00:14:51,833 --> 00:14:53,100
我们会以同样的方式杀死它
we'll kill it the same way

388
00:14:55,866 --> 00:14:56,833
好吧，我们看到了
all right we see

389
00:14:56,833 --> 00:14:58,833
服务主管正在重新启动
the services supervisor is getting restarted

390
00:14:58,833 --> 00:15:00,266
启动了质押服务器
which started the pledge server

391
00:15:00,366 --> 00:15:01,566
和传感器服务器
and the sensor server

392
00:15:01,666 --> 00:15:05,233
如果我们点击 services supervisor 它的坑现在
and if we click on services supervisor its pit is now

393
00:15:05,400 --> 00:15:08,166
4 7 4 太甜了
4 7 4 that's pretty sweet

394
00:15:09,500 --> 00:15:11,066
这就是本课程的总结
that wraps it up for this course

395
00:15:11,100 --> 00:15:12,733
非常感谢您加入我们
thanks so much for joining us

396
00:15:13,033 --> 00:15:14,033
我们希望你玩得开心
we hope you have a lot of fun

397
00:15:14,033 --> 00:15:15,966
使用图片构建您自己的应用程序
using a picture to build your own apps

398
00:15:15,966 --> 00:15:17,000
我们下次见
we'll see you next time

399
00:15:18,500 --> 00:15:20,333
现在让我们去拍摄一些熊
now let's go photograph some bears

400
00:15:20,433 --> 00:15:22,133
甚至可能是野人
or maybe even sasquatch

