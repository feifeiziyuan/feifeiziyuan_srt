1
00:00:00,333 --> 00:00:01,233
你真的做了一些
you've done some really

2
00:00:01,233 --> 00:00:03,333
在最后两个部分努力创造
hard work in the last two sections to create

3
00:00:03,333 --> 00:00:04,633
服务器进程
a server process

4
00:00:04,633 --> 00:00:05,533
有状态的
that has state

5
00:00:05,633 --> 00:00:07,600
并且确实异步工作
and does work asynchronously

6
00:00:07,733 --> 00:00:09,500
所有这些工作都将得到回报
and all that work is about to pay off

7
00:00:09,533 --> 00:00:11,433
因为 elixir 有一个抽象
because elixir has an abstraction

8
00:00:11,566 --> 00:00:14,300
用于编写服务器进程并相信与否
for writing server processes and believe it or not

9
00:00:14,533 --> 00:00:16,000
你现在知道它是如何工作的
you now know how it works

10
00:00:16,200 --> 00:00:18,500
抽象被称为等待它
the abstraction is called wait for it

11
00:00:18,966 --> 00:00:20,100
生成服务器
gen server

12
00:00:21,000 --> 00:00:23,566
所以在一分钟内我们将摆脱所有这些代码
so in a minute we're going to get rid of all this code

13
00:00:25,466 --> 00:00:27,766
并将其替换为性别模块
and replace it with the gendered module

14
00:00:27,933 --> 00:00:29,766
但在我们离开这段代码之前
but before we move away from this code

15
00:00:29,766 --> 00:00:32,900
注意它封装了冷静和服务器行为
notice it encapsulates calm and server behavior

16
00:00:33,133 --> 00:00:35,833
并委托回调函数
and delegates to call back functions

17
00:00:35,833 --> 00:00:38,400
运行特定于进程的代码
to run code that specific to a process

18
00:00:38,633 --> 00:00:41,700
因此，它强制执行隐含合同
as such it enforces an implicit contract

19
00:00:41,766 --> 00:00:42,600
回调
the callback

20
00:00:42,600 --> 00:00:45,600
模块必须实现某些回调函数
module must implement certain callback functions

21
00:00:45,600 --> 00:00:47,266
处理调用和处理转换
handle call and handle cast

22
00:00:47,766 --> 00:00:49,800
所以这段代码实现了一个设计
so this code implements a design

23
00:00:49,800 --> 00:00:52,333
spadeful 服务器进程的模式
pattern for spadeful server processes

24
00:00:52,566 --> 00:00:54,066
在顶部设计
in top a design

25
00:00:54,066 --> 00:00:56,866
像这样的模式被称为行为
pattern like this is referred to as a behavior

26
00:00:57,300 --> 00:00:58,900
gen server 是一种行为
gen server is a behavior

27
00:00:58,900 --> 00:01:01,166
用于编写大量的服务器进程
for writing spadeful server processes

28
00:01:01,166 --> 00:01:03,400
它包含在顶级库中
it's included in the top libraries

29
00:01:04,066 --> 00:01:07,233
顶部包括封装的其他行为
top includes other behaviors that encapsulate

30
00:01:07,233 --> 00:01:08,333
设计模式
design patterns for

31
00:01:08,400 --> 00:01:10,666
其他流程，例如主管
other processes such as supervisors

32
00:01:10,733 --> 00:01:12,433
稍后会了解
which will learn about a bit later

33
00:01:12,900 --> 00:01:14,566
现在可能不足为奇
now probably doesn't come as a surprise

34
00:01:14,566 --> 00:01:17,033
给您从我们的通用服务器转换
to you that converting from our generic server

35
00:01:17,033 --> 00:01:18,866
到 gen 服务器模块
to the gen server module

36
00:01:18,866 --> 00:01:21,133
将会变得非常简单
is going to turn out to be pretty straightforward

37
00:01:21,200 --> 00:01:22,166
在很大程度上
in large part

38
00:01:22,166 --> 00:01:25,066
因为我们遵循 gen server 命名约定
because we follow the gen server naming conventions

39
00:01:25,300 --> 00:01:26,800
但在我们这样做之前
but before we do that

40
00:01:26,900 --> 00:01:29,466
您可能想要保存此代码的一个版本
you might want to save off a version of this code

41
00:01:29,466 --> 00:01:30,133
只为你
just for your

42
00:01:30,133 --> 00:01:30,933
参考
reference

43
00:01:31,266 --> 00:01:34,266
一种方法是复制此文件
one way to do that would be to duplicate this file

44
00:01:36,100 --> 00:01:39,366
例如，我们可以将其称为质押服务器手卷
we could call it pledge server hand rolled for example

45
00:01:41,133 --> 00:01:42,666
然后在这里我们需要改变
then down here we need to change

46
00:01:42,666 --> 00:01:44,733
要匹配的此模块的名称
the name of this module to match

47
00:01:45,033 --> 00:01:47,200
所以我会得到所有这些事件
so I'll just get all those occurrences

48
00:01:49,900 --> 00:01:53,333
并将它们更改为质押服务器手卷
and change them to pledge server hand rolled

49
00:01:54,333 --> 00:01:55,366
然后我要注释掉
then I'm going to comment out

50
00:01:55,366 --> 00:01:57,333
模块之外的所有代码
all the code that's outside of the module

51
00:01:57,500 --> 00:01:58,300
因为我们不想要这个
because we don't want this

52
00:01:58,300 --> 00:02:00,500
当我们启动性行为时运行的代码
code running when we fire up sex

53
00:02:01,233 --> 00:02:03,633
最后我们需要更改注册名称
and finally we need to change the registered name

54
00:02:03,633 --> 00:02:05,133
我们在这里有这个名字
we've got this at name up here

55
00:02:05,133 --> 00:02:06,300
我们不希望这成为质押服务器
we don't want this to be pledge server

56
00:02:06,300 --> 00:02:07,300
因为我们只能拥有
because we can only have

57
00:02:07,300 --> 00:02:10,266
一个以给定名称注册的进程
one process registered under a given name

58
00:02:10,400 --> 00:02:12,066
所以我要把它改成质押服务器
so I'm going to change this to pledge server

59
00:02:12,166 --> 00:02:15,300
手卷并重命名所有这些东西
hand rolled and by renaming all this stuff

60
00:02:15,400 --> 00:02:17,500
我们不会以任何命名冲突告终
we won't end up with any naming collisions

61
00:02:17,500 --> 00:02:18,100
与东西
with the things

62
00:02:18,100 --> 00:02:19,833
我们将回到质押服务器
that we're going to have back in pledge server

63
00:02:20,466 --> 00:02:22,000
现在是转换的第一步
now the first step to converting

64
00:02:22,000 --> 00:02:24,233
从我们的通用服务器到 gen 服务器
from our generic server to a gen server

65
00:02:24,233 --> 00:02:25,800
我们喜欢这一步
and we love this step

66
00:02:25,866 --> 00:02:29,366
是彻底删除通用服务器
is to completely remove the generic server

67
00:02:30,500 --> 00:02:33,000
性别模块照顾所有
the gendered module takes care of all

68
00:02:33,000 --> 00:02:34,866
这些通用细节对我们来说
of these generic details for us

69
00:02:34,966 --> 00:02:36,100
还有更多
and a whole lot more

70
00:02:36,933 --> 00:02:37,900
那么我们可以摆脱这个
then we can get rid of this

71
00:02:37,900 --> 00:02:40,100
别名，因为我们不再有通用服务器
alias because we don't have a generic server anymore

72
00:02:41,200 --> 00:02:43,433
然后在这里我们称之为通用服务器的任何地方
and then everywhere we call generic server here

73
00:02:43,966 --> 00:02:45,333
所有这些事件
all these occurrences

74
00:02:45,500 --> 00:02:47,333
这只是一个 gen server
this is just going to be gen server

75
00:02:47,933 --> 00:02:50,033
那是顶级库中的模块
that's the module that's in the top libraries

76
00:02:50,666 --> 00:02:53,266
现在我们在 gen server 模块上调用 start
now we're calling start on the gen server module

77
00:02:53,666 --> 00:02:54,566
和你的方式
and the way you

78
00:02:54,566 --> 00:02:57,533
为 gen 服务器设置名称是第三个参数
set a name for a gen server is the third argument

79
00:02:57,533 --> 00:03:00,433
需要是关键字列表，所以这些是选项
needs to be a keyword list so these are options

80
00:03:00,433 --> 00:03:02,766
我们会说名字是在名字
we're going to say the name is going to be at name

81
00:03:03,366 --> 00:03:05,800
这将以该名称注册进程
and that'll register the process under that name

82
00:03:06,166 --> 00:03:09,233
现在不像我们手卷的通用服务器模块
now unlike our hand rolled generic server module

83
00:03:09,233 --> 00:03:12,500
gen 服务器模块需要回调模块
the gen server module expects the callback module

84
00:03:12,566 --> 00:03:15,033
实现六个回调函数
to implement six callback functions

85
00:03:15,433 --> 00:03:17,800
因为我们遵循了 gen 服务器命名约定
since we followed the gen server naming conventions

86
00:03:17,800 --> 00:03:19,966
已定义的 pled 服务器模块
the pled server module already defined

87
00:03:20,233 --> 00:03:22,766
六个必需的回调函数中的两个
two of the six required callback functions

88
00:03:23,000 --> 00:03:25,066
处理调用和处理转换
handle call and handle cast

89
00:03:26,700 --> 00:03:28,033
现在我们不需要其他四个
now we don't need the other four

90
00:03:28,033 --> 00:03:30,000
还需要回调函数
required callback functions just yet

91
00:03:30,000 --> 00:03:31,433
我们稍后再看
we'll look at those a bit later

92
00:03:31,566 --> 00:03:32,366
并且经常
and oftentimes

93
00:03:32,366 --> 00:03:34,333
你根本不需要其他四个功能
you don't need the other four functions at all

94
00:03:34,700 --> 00:03:36,800
所以不必实现所有
so instead of having to implement all

95
00:03:36,833 --> 00:03:38,400
六个回调函数
six callback functions

96
00:03:38,400 --> 00:03:40,266
履行我们的讨价还价
to fulfill our side of the bargain

97
00:03:40,400 --> 00:03:42,266
我们可以让性别模块
we can let the gendered module

98
00:03:42,333 --> 00:03:44,666
为我们生成默认实现
generate default implementations for us

99
00:03:45,200 --> 00:03:47,833
我们可以通过转到文件顶部来做到这一点
and we can do that by going to the top of the file

100
00:03:48,233 --> 00:03:49,566
并添加一行
and adding one line

101
00:03:49,600 --> 00:03:51,200
使用 g
use g

102
00:03:52,333 --> 00:03:53,300
使用宏
the use macro

103
00:03:53,300 --> 00:03:56,533
注入回调模块的默认实现
injects default implementations of the callback modules

104
00:03:56,866 --> 00:03:58,300
进入我们的质押服务器模块
into our pledge server module

105
00:03:58,966 --> 00:04:02,433
我们已经定义了句柄调用和句柄转换
we've already defined handle call and handle cast which

106
00:04:02,466 --> 00:04:02,833
覆盖
override

107
00:04:02,833 --> 00:04:05,900
这些回调函数的默认实现
the default implementation of these callback functions

108
00:04:06,000 --> 00:04:07,300
但我们需要非常改变它们
but we need to change them very

109
00:04:07,300 --> 00:04:10,600
稍微符合 gen server 的期望
slightly to conform to what gen server expects

110
00:04:11,066 --> 00:04:14,066
是的，手柄演员需要返回状态
yeah handle cast needs to return the state

111
00:04:14,066 --> 00:04:15,433
包裹在一个元组中
wrapped in a tuple

112
00:04:15,800 --> 00:04:18,233
该元组的第一个元素是原子
and the first element of that tuple is the atom

113
00:04:18,233 --> 00:04:19,033
无回复
no reply

114
00:04:19,366 --> 00:04:21,600
然后第二个元素就是新状态
and then the second element is just the new state

115
00:04:22,433 --> 00:04:23,566
和其他原子是
and other atoms are

116
00:04:23,566 --> 00:04:24,533
可以在这里
possible here

117
00:04:24,600 --> 00:04:27,600
但到目前为止，没有任何回复是您最常使用的回复
but no reply is by far the one you'll use the most

118
00:04:28,466 --> 00:04:31,233
我们的句柄调用函数已经返回元组
our handle call functions already return to tuple

119
00:04:31,333 --> 00:04:32,266
但他们需要
but they need to be

120
00:04:32,266 --> 00:04:34,733
用第一个元素标记为回复
tagged with the first element being reply

121
00:04:35,933 --> 00:04:36,733
就这样
just like that

122
00:04:37,033 --> 00:04:38,133
所以我们把它放在这里
so we'll put that down here

123
00:04:38,766 --> 00:04:40,033
也在这里
and down here as well

124
00:04:40,833 --> 00:04:41,633
回复
reply

125
00:04:41,633 --> 00:04:44,300
表示服务器应该回复客户端
indicates that the server should reply to the client

126
00:04:44,366 --> 00:04:47,000
它将向它发送此值的第二个元素
it's going to send it the second element this value

127
00:04:47,066 --> 00:04:48,833
然后第三个元素是新状态
and then the third element is the new state

128
00:04:49,466 --> 00:04:50,833
我们需要再做一个改变
we need to make one more change

129
00:04:50,833 --> 00:04:53,066
到这些句柄调用函数子句
to these handle call function clauses

130
00:04:53,400 --> 00:04:54,500
他们目前采取
they currently take

131
00:04:54,500 --> 00:04:57,600
两个论点，但性别要求他们采取
two arguments but gendered requires them to take

132
00:04:57,666 --> 00:04:58,833
三个论点
three arguments

133
00:04:59,066 --> 00:05:01,433
第二个参数是一些信息
the second argument is some information

134
00:05:01,500 --> 00:05:03,600
关于我要打电话的发件人
about the sender I'm going to call it from

135
00:05:04,166 --> 00:05:05,833
但通常不需要
but it's typically not needed

136
00:05:05,833 --> 00:05:08,266
所以我们将忽略它，我们将使用下划线
so we'll just ignore it we'll use underscore from

137
00:05:09,400 --> 00:05:11,833
所以这是第二个论点，我们也会把它放在这里
so that's the second argument we'll put it here as well

138
00:05:13,400 --> 00:05:14,666
最后在这里
and finally down here

139
00:05:15,966 --> 00:05:17,766
我们需要做的最后一个改变是关闭
the last change we need to make is down

140
00:05:17,766 --> 00:05:19,366
在这里我们启动服务器
here where we start the server

141
00:05:19,433 --> 00:05:22,266
现在在左侧我们只匹配一个 pid
right now on the left hand side we just match a pid

142
00:05:22,766 --> 00:05:24,666
但请记住质押服务器启动
but remember that pledge server start

143
00:05:24,700 --> 00:05:26,033
调用 gen server start
calls gen server start

144
00:05:26,200 --> 00:05:29,000
它返回一个元组而不仅仅是一个pid
and it returns a tuple rather than just a pid

145
00:05:29,500 --> 00:05:31,100
元组有一个原子
the tuple has an atom okay

146
00:05:31,166 --> 00:05:33,200
然后pid只是第二个元素
and then the pid is just a second element

147
00:05:33,633 --> 00:05:35,333
所以现在我们的 pled 服务器满足了所有
so now our pled server fulfills all

148
00:05:35,333 --> 00:05:36,800
生成服务器的要求
the requirements of a gen server

149
00:05:36,800 --> 00:05:37,466
所以它应该工作
so it should work

150
00:05:37,500 --> 00:05:38,300
我们把它存起来
we save it away

151
00:05:39,200 --> 00:05:41,333
果然如此
and sure enough it does ya

152
00:05:42,466 --> 00:05:45,433
所以当你在模块中看到这条用过的线时
so when you see this used line in a module

153
00:05:45,566 --> 00:05:46,666
你马上就知道
you know right away

154
00:05:46,666 --> 00:05:48,500
这是一个服务器进程
that it's a server process that

155
00:05:48,600 --> 00:05:50,133
至少这是一个基本水平
at least that a fundamental level

156
00:05:50,333 --> 00:05:53,066
行为与所有其他 gen 服务器进程一样
behaves like all other gen server processes

157
00:05:53,800 --> 00:05:56,133
现在我们已经转换为使用 gen 服务器
now that we've converted over to use a gen server

158
00:05:56,200 --> 00:05:57,666
让我们介绍一条新消息
let's introduce a new message

159
00:05:57,700 --> 00:05:59,400
只是为了走过台阶
just to walk through the steps

160
00:05:59,766 --> 00:06:02,666
我们的现金目前持有三项认捐
our cash currently holds three pledges

161
00:06:02,700 --> 00:06:04,600
但是让我们假设我们希望能够改变
but let's suppose we want to be able to change

162
00:06:04,600 --> 00:06:07,666
服务器运行良好时的现金规模
the cash size while the server is running well

163
00:06:07,966 --> 00:06:09,066
因为我们不能努力
since we can't hard

164
00:06:09,100 --> 00:06:10,000
编码大小
code the size

165
00:06:10,000 --> 00:06:12,333
它需要成为服务器状态的一部分
it'll need to be part of the server state

166
00:06:13,066 --> 00:06:15,833
所以国家将包括承诺清单和
so the state will include the list of pledges and

167
00:06:16,000 --> 00:06:18,433
代表现金规模的数字
a number representing the cash size

168
00:06:18,633 --> 00:06:20,766
这意味着当我们启动服务器时
which means when we start the server

169
00:06:20,966 --> 00:06:23,066
传递一个空列表是不够的
passing an empty list won't be enough

170
00:06:24,000 --> 00:06:25,666
好吧，我们可以给它一张地图
well we could pass it a map

171
00:06:26,066 --> 00:06:28,200
该地图将有一个现金大小的钥匙
the map would have a cash size key

172
00:06:29,266 --> 00:06:30,666
是默认值三
was that default value of three

173
00:06:31,033 --> 00:06:34,033
然后它会有我们的承诺，这是一个清单
and then it would have our pledges which is a list

174
00:06:35,033 --> 00:06:36,400
那会奏效
and that would work

175
00:06:37,200 --> 00:06:40,200
但是如果我们有更多的状态，它就会变得笨拙
but it gets unwieldy if we have even more state

176
00:06:40,200 --> 00:06:42,133
所以我们想向您展示另一种技术
so we want to show you another technique

177
00:06:42,433 --> 00:06:44,133
随着国家越来越多地参与
as the state gets more involved

178
00:06:44,133 --> 00:06:46,400
定义一个结构很方便
it's handy to define a structure with

179
00:06:46,400 --> 00:06:48,300
具有默认值的字段
fields having default values

180
00:06:48,400 --> 00:06:49,133
所以让我们这样做
so let's do that

181
00:06:49,133 --> 00:06:50,300
我们将把我们的
we're going to put our s

182
00:06:50,300 --> 00:06:52,600
就在我们的质押服务器模块内部
right inside of our pledge server module

183
00:06:54,266 --> 00:06:55,966
所以这个结构将被称为状态
so the structure is going to be called state

184
00:06:57,333 --> 00:06:59,833
def 被击中，然后它将有两个字段
def struck and then it's going to have two fields

185
00:06:59,866 --> 00:07:01,066
铸件尺寸和承诺
cast size and pledges

186
00:07:01,066 --> 00:07:02,900
这些将是默认值
and those are going to be the default values

187
00:07:03,333 --> 00:07:05,166
然后我们可以改变我们的启动功能
then we can change our start function

188
00:07:05,400 --> 00:07:07,300
使用该初始状态
to use that initial state

189
00:07:08,400 --> 00:07:09,200
就这样
just like that

190
00:07:09,900 --> 00:07:10,400
现在我们需要
now we need to

191
00:07:10,400 --> 00:07:12,000
改变我们的回调函数
change our callback functions since

192
00:07:12,000 --> 00:07:13,500
他们假设国家
they assume that the state

193
00:07:13,500 --> 00:07:15,233
只是一个承诺清单
is just a list of pledges

194
00:07:15,700 --> 00:07:18,466
所以在我们清晰的演员阵容中
so down in our clear cast right here

195
00:07:19,100 --> 00:07:21,000
我们需要改变这个状态
we're going to need to change this state

196
00:07:21,000 --> 00:07:22,366
所以我要删除那里的下划线
so I'm going to remove the underscore there

197
00:07:22,366 --> 00:07:23,600
因为我要在这里改变它
because I'm going to change it here

198
00:07:24,000 --> 00:07:26,366
我们只想设置这个的承诺字段
and we just want to set the pledges field of this

199
00:07:26,366 --> 00:07:28,466
击中一个空列表
struck to an empty list

200
00:07:29,000 --> 00:07:31,466
为了做到这一点，我们像这样说状态
and to do that we go like this we say state

201
00:07:31,566 --> 00:07:33,700
记住这是一个结构，我们要修改
remember that's a structure and we want to modify

202
00:07:34,266 --> 00:07:37,366
承诺字段并将其设置为空列表
the pledges field and set it to an empty list

203
00:07:39,000 --> 00:07:41,233
所以这将返回一个新结构
so this will return a new structure

204
00:07:41,400 --> 00:07:43,333
具有当前演员阵容的
that has the current cast size

205
00:07:43,466 --> 00:07:46,066
但承诺字段更改为空列表
but the pledges field is changed to an empty list

206
00:07:47,266 --> 00:07:49,333
现在就这里承诺的总额而言
now in terms of this total pledged here

207
00:07:49,600 --> 00:07:53,400
我们想要映射到状态而不是映射到状态
instead of mapping on state we want to map on state

208
00:07:53,766 --> 00:07:55,600
承诺，因为我们正在总结
pledges because we're summing up

209
00:07:55,633 --> 00:07:57,433
认捐清单总数
the total of the pledges list

210
00:07:58,233 --> 00:08:00,066
然后出于原因承诺
and then for reason pledges

211
00:08:00,100 --> 00:08:01,800
好吧，我们想与国家再次发生
well we want to recurs with the state

212
00:08:01,800 --> 00:08:03,133
但我们想回来
but we want to return

213
00:08:03,300 --> 00:08:05,800
国家承诺回馈给客户
state pledges back to the client

214
00:08:06,766 --> 00:08:08,900
好的，现在开始创建承诺
okay now on to create pledge

215
00:08:09,300 --> 00:08:11,366
好吧，而不是从国家那里拿走
well instead of taking from the state

216
00:08:11,433 --> 00:08:14,066
我们需要从国家承诺中获取
we need to take from state pledges

217
00:08:15,200 --> 00:08:17,066
而不是硬编码第二个
and instead of hard coding the number two

218
00:08:17,133 --> 00:08:19,633
这将是国家现金规模
this is going to be state cash size

219
00:08:19,966 --> 00:08:21,466
然后我们要减去一个
and then we're going to subtract one

220
00:08:22,200 --> 00:08:22,933
因为记得
because remember

221
00:08:22,933 --> 00:08:23,566
我们要添加
we're going to add

222
00:08:23,566 --> 00:08:25,633
对名单首领的新承诺
the new pledge to the head of that list

223
00:08:26,166 --> 00:08:27,633
但这里的问题是
but the problem here is this

224
00:08:27,633 --> 00:08:29,633
不是我们想要返回的新状态
isn't the new state that we want to return

225
00:08:30,133 --> 00:08:32,300
这实际上是现在的现金承诺
this is actually the cash pledges now

226
00:08:34,600 --> 00:08:35,600
新状态
the new state

227
00:08:37,400 --> 00:08:38,666
是当前状态
is the current state

228
00:08:39,633 --> 00:08:44,866
承诺更改为新的演员承诺的地方
where the pledges gets changed to the new cast pledges

229
00:08:45,700 --> 00:08:47,966
然后我们接受它并重复它
and then we take that and we recurs with it

230
00:08:48,700 --> 00:08:50,066
所以在我们运行之前
so before we run this

231
00:08:50,066 --> 00:08:52,200
让我们重新排列我们的代码
let's go down and rearrange our code

232
00:08:52,266 --> 00:08:54,933
我们会在拉里之后打电话给clear
we'll call clear after larry

233
00:08:58,133 --> 00:08:59,666
现在当我们运行它时
and now when we run it

234
00:09:00,600 --> 00:09:03,266
好吧，我们应该看到最近的三个承诺
well we should see the three most recent pledges

235
00:09:03,266 --> 00:09:04,066
因为毕竟
because after all

236
00:09:04,066 --> 00:09:05,766
这是默认的现金大小
that's the default cash size

237
00:09:06,300 --> 00:09:09,100
但是现在如果我们想要现金规模怎么办
but now what if we want the cash size to be for

238
00:09:09,600 --> 00:09:10,100
好
well

239
00:09:10,100 --> 00:09:13,100
首先我们需要实现一个客户端接口函数
first we need to implement a client interface function

240
00:09:13,566 --> 00:09:16,066
所以我们称之为设定现金规模
so let's call it set cash size

241
00:09:16,500 --> 00:09:18,100
是的，我们希望能够这样称呼它
yeah we want to be able to call it like this

242
00:09:19,000 --> 00:09:19,833
领导服务器
led server

243
00:09:21,533 --> 00:09:22,966
设置现金大小
set cash size

244
00:09:23,333 --> 00:09:25,100
传球4号
passing in a No.4

245
00:09:25,800 --> 00:09:27,266
所以让我们继续执行它
so let's go ahead and implement that

246
00:09:27,266 --> 00:09:29,533
在我们的客户端界面函数中
up in our client interface functions

247
00:09:33,700 --> 00:09:35,066
它需要一个尺寸
it's going to take a size

248
00:09:35,766 --> 00:09:39,166
好的，所以这应该是电话还是演员信息
okay so should this be a call or a cast message

249
00:09:39,600 --> 00:09:41,466
嗯，这真的是一个设计决定
well this is really a design decision

250
00:09:41,533 --> 00:09:44,533
在这种情况下，客户实际上并不需要响应
in this case the client doesn't really need a response

251
00:09:44,633 --> 00:09:46,966
它可以假设请求是成功的
it can assume the request was successful

252
00:09:47,066 --> 00:09:49,733
如果由于某种原因失败，这并不重要
and it's not critical if for some reason it fails

253
00:09:49,800 --> 00:09:51,433
所以我们会把它变成演员表
so we'll make it a cast

254
00:09:51,600 --> 00:09:52,800
所以它是有性别的
so it's gendered

255
00:09:53,233 --> 00:09:58,200
cast at name 并且消息将设置为 cast size
cast at name and the message will be set cast size

256
00:09:58,966 --> 00:09:59,833
和大小
and the size

257
00:10:00,500 --> 00:10:03,066
所以现在我们需要使用爪子来处理该消息
so now we need to function claws to handle that message

258
00:10:03,333 --> 00:10:04,966
这将是一个演员
and it's going to be a cast

259
00:10:05,133 --> 00:10:06,233
所以我们要把它做对
so we're going to put it right

260
00:10:06,266 --> 00:10:08,133
在这个现有的手柄铸件下方
below this existing handle cast

261
00:10:08,133 --> 00:10:09,400
因为我们想把这些放在一起
because we want to keep these together

262
00:10:09,400 --> 00:10:10,566
所有手柄铸件
all the handle casts

263
00:10:10,666 --> 00:10:12,566
并且所有的句柄调用都组合在一起
and all the handle calls get grouped together

264
00:10:14,133 --> 00:10:15,400
所以处理演员表
so handle cast

265
00:10:16,200 --> 00:10:17,000
消息
the message

266
00:10:18,500 --> 00:10:21,200
设置现金大小大小
set cash size size

267
00:10:22,433 --> 00:10:23,833
然后它也需要状态
and then it also takes the state

268
00:10:25,600 --> 00:10:26,733
然后是新状态
and then the new state

269
00:10:28,233 --> 00:10:29,600
将是现有状态
will be the existing state

270
00:10:29,966 --> 00:10:32,300
但我们想改变现金大小
but we want to change the cash size

271
00:10:33,066 --> 00:10:34,266
任何传入的东西
to whatever gets passed in

272
00:10:35,566 --> 00:10:37,266
然后我们需要返回两个极点
and then we need to return the two pole

273
00:10:37,500 --> 00:10:40,500
没有回复，因为这是演员阵容和新状态
no reply because this is the cast and the new state

274
00:10:41,166 --> 00:10:43,033
现在如果我们保存它并运行它
and now if we save this away and we run it

275
00:10:43,800 --> 00:10:46,600
好吧，现在我们的现金有四个承诺，而不是三个
well now our cash has four pledges instead of three

276
00:10:48,500 --> 00:10:50,066
我们之前说过，当你添加
we said earlier that when you add

277
00:10:50,100 --> 00:10:51,900
使用 gen server 到一个模块
use gen server to a module

278
00:10:52,133 --> 00:10:55,100
六个默认回调被注入到该模块中
six default callbacks are injected into that module

279
00:10:55,600 --> 00:10:58,400
然后您添加应用程序特定的行为
you then add application specific behavior

280
00:10:58,533 --> 00:11:01,666
通过覆盖任何默认实现
by overriding any of the default implementations

281
00:11:02,066 --> 00:11:04,200
到目前为止，我们已经覆盖了两个回调
we've overridden two callbacks so far

282
00:11:04,200 --> 00:11:06,333
处理调用和处理转换
handle call and handle cast

283
00:11:06,433 --> 00:11:09,433
所以现在让我们看看另外两个最常见的
so now let's look at two of the other most frequently

284
00:11:09,433 --> 00:11:10,766
被覆盖的回调
overridden callbacks

285
00:11:10,933 --> 00:11:13,266
目前当我们初始化我们的服务器
currently when we initialize our server

286
00:11:13,266 --> 00:11:14,866
我们使用默认状态
we use the default state

287
00:11:15,433 --> 00:11:18,000
所以当我们开始这个过程时，承诺清单是
so when we start the process the pledge list is

288
00:11:18,100 --> 00:11:20,000
理想情况下总是空的
always empty ideally

289
00:11:20,000 --> 00:11:21,433
当我们开始这个过程
when we start the process

290
00:11:21,433 --> 00:11:23,100
它会去拿最多的
it would go and fetch the most

291
00:11:23,100 --> 00:11:25,700
外部服务部门最近的认捐
recent pledges from the external service

292
00:11:25,700 --> 00:11:28,733
然后准备填充我们的内存现金
and then prep populate our in memory cash

293
00:11:28,966 --> 00:11:31,766
这就是 nit 回调进来的地方
and that's where the nit call back comes in

294
00:11:32,333 --> 00:11:34,466
这是该回调的默认实现
here's the default implementation of that callback

295
00:11:34,466 --> 00:11:35,833
我要把它放下
and I'm going to put it down

296
00:11:35,966 --> 00:11:37,533
在服务器回调下
under server callbacks

297
00:11:38,133 --> 00:11:39,866
它看起来像这样并编织
it looks like this and knit

298
00:11:40,533 --> 00:11:45,233
它需要 rag 然后返回元组 ok 和 rag
it takes rag and then returns the tuple ok and rag

299
00:11:45,866 --> 00:11:48,966
所以当我们在这里调用启动时会发生什么
so what happens is when we call start up here

300
00:11:49,333 --> 00:11:53,033
这个第二个参数状态变成了
this 2nd argument state becomes the value that's

301
00:11:53,033 --> 00:11:56,033
传递到 knit 中会自动调用 knit
passed into a knit a knit is automatically called

302
00:11:56,033 --> 00:11:58,100
它通过了第二个参数
it passes in that 2nd argument

303
00:11:58,100 --> 00:12:00,133
这将是这里的值
which is going to be a value of a here

304
00:12:00,600 --> 00:12:03,233
然后默认实现就转过来了
and then the default implementation just turns around

305
00:12:03,300 --> 00:12:05,066
并在元组中返回拖动
and returns drag in a tuple

306
00:12:05,500 --> 00:12:07,133
所以在我们的例子中认为是状态
so in our case argues is the state

307
00:12:07,133 --> 00:12:08,733
所以让我们把它改成状态
so let's just change that to state

308
00:12:08,766 --> 00:12:09,900
只是为了更清楚
just to make it more clear

309
00:12:10,933 --> 00:12:13,633
然后因为状态在这个元组中返回
and then because state is returned in this tuple

310
00:12:13,866 --> 00:12:14,833
该状态将得到
that state will get

311
00:12:14,833 --> 00:12:17,566
用于在服务器启动时初始化服务器
used to initialize the server when it starts

312
00:12:18,166 --> 00:12:20,566
所以默认情况下它只是通过状态
so by default it just passes the state through

313
00:12:20,666 --> 00:12:21,600
这是不行的
it's a no up

314
00:12:21,800 --> 00:12:24,233
但是我们可以覆盖它来做我们想做的任何事情
but we can override it to do whatever we want

315
00:12:24,833 --> 00:12:27,900
所以我们想要做的是填充我们的现金
so what we want to do is are populate our cash

316
00:12:28,433 --> 00:12:30,400
好吧，我们在这里添加了一个功能
well we added a function down here

317
00:12:31,500 --> 00:12:33,800
从服务中获取最近的承诺
fetch recent pledges from service

318
00:12:34,066 --> 00:12:35,766
所以你会在这里放一些代码来实际运行
so you'd put some code here to actually go

319
00:12:35,766 --> 00:12:37,933
从外部服务获取最近的承诺
fetch the recent pledges from the external service

320
00:12:37,933 --> 00:12:39,500
我们不会担心的
and we're not going to worry about that

321
00:12:39,766 --> 00:12:42,266
然后它将转换返回的任何内容
and then it would convert whatever got returned

322
00:12:42,500 --> 00:12:43,900
进入元组列表
into a list of tuples

323
00:12:44,233 --> 00:12:47,100
我们的性别期望然后我们返回那个
that our gendered expects and then we just return that

324
00:12:47,566 --> 00:12:49,600
所以你可以想象威尔玛和弗雷德
so you can imagine wilma and fred

325
00:12:49,600 --> 00:12:50,266
成为最
being the most

326
00:12:50,266 --> 00:12:52,933
我们的外部服务返回的近期承诺
recent pledges returned by our external service

327
00:12:53,466 --> 00:12:55,100
现在在我们的 knit 回调中备份
now back up in our knit callback

328
00:12:55,100 --> 00:12:57,700
让我们继续使用它来准备填充现金
let's go ahead and use that to prep populate the cash

329
00:12:59,866 --> 00:13:01,100
所以我们会说承诺
so we'll say pledges

330
00:13:02,033 --> 00:13:05,233
等于从服务中获取最近的承诺
equals fetch recent pledges from service

331
00:13:06,200 --> 00:13:08,700
好的，现在我们要更新这个状态，因为记住
okay now we want to update this state because remember

332
00:13:08,800 --> 00:13:10,566
这是默认状态
this is the default state

333
00:13:10,566 --> 00:13:12,866
具有空承诺列表的结构
structure which has an empty list of pledges

334
00:13:13,533 --> 00:13:14,500
所以新的状态
so the new state

335
00:13:15,200 --> 00:13:16,833
将是现有状态
is going to be the existing state

336
00:13:20,200 --> 00:13:22,466
更新承诺字段的位置
where the pledges field is updated

337
00:13:23,300 --> 00:13:26,066
成为该外部服务返回的任何东西
to be whatever got returned by that external service

338
00:13:26,833 --> 00:13:28,800
然后我们只需要确保改变这个
and then we just need to make sure to change this

339
00:13:28,800 --> 00:13:29,633
到新状态
to new state

340
00:13:30,600 --> 00:13:32,466
所以只是回顾一下这里发生的事情
so just to recap what happens here

341
00:13:32,766 --> 00:13:35,100
当调用 start 来启动我们的服务器时
when start is called to start our server

342
00:13:35,233 --> 00:13:38,066
这第二个参数将被传递给 knit
this 2nd argument is going to get passed to a knit

343
00:13:38,066 --> 00:13:40,400
并且 knit 会被 gen 自动调用
and knit's going to be automatically called by gen

344
00:13:40,400 --> 00:13:41,200
服务器
server

345
00:13:42,533 --> 00:13:46,533
所以 state 将成为我们 state 的默认结构
so state is going to be the default structure our state

346
00:13:46,966 --> 00:13:48,400
然后我们要更新那个状态
then we want to update that state

347
00:13:48,400 --> 00:13:50,633
我们从服务中获取承诺
we go fetch the pledges from the service

348
00:13:50,800 --> 00:13:52,200
更新状态以拥有
update the state to have

349
00:13:52,200 --> 00:13:54,033
认捐领域的那些认捐
those pledges in the pledges field

350
00:13:54,366 --> 00:13:56,500
这成为我们返回的新状态
that becomes the new state which we return

351
00:13:56,800 --> 00:13:59,433
并且 gen server 使用这个值 new state
and gen server uses this value new state

352
00:13:59,733 --> 00:14:02,100
在服务器启动时初始化服务器
to initialize the server when it starts

353
00:14:02,666 --> 00:14:05,766
现在在我们运行这个之前，让我们深入到底部
now before we run this let's go down to the bottom

354
00:14:07,166 --> 00:14:09,000
让我们注释清楚
and let's comment out clear

355
00:14:09,066 --> 00:14:10,966
和拉里之后的所有承诺
and all the pledges after larry

356
00:14:12,033 --> 00:14:13,433
所以现在当我们运行它时
so now when we run it

357
00:14:14,133 --> 00:14:15,833
我们看到服务器启动
we see that the server starts the

358
00:14:15,833 --> 00:14:18,966
用外部服务的两项认捐兑现
cash with the two pledges from the external service

359
00:14:18,966 --> 00:14:20,766
然后加上拉里的保证
and then adds on larry's pledge

360
00:14:22,500 --> 00:14:24,166
现在有一个警告
now there's one caveat to this

361
00:14:24,966 --> 00:14:26,733
重要的是要注意
it's important to note that

362
00:14:26,766 --> 00:14:28,700
开始会阻止并告诉这个
start will block and tell this

363
00:14:28,700 --> 00:14:30,433
一个 knit 函数返回
a knit function returns

364
00:14:30,533 --> 00:14:33,733
所以请注意初始化需要多长时间
so just be mindful of how long initialization takes

365
00:14:34,433 --> 00:14:36,333
让我们再下一次
let's go down to the bottom one more time

366
00:14:36,600 --> 00:14:38,233
因为我注意到这条线
because I noticed that the line

367
00:14:38,233 --> 00:14:40,233
我们发送意外消息的地方
where we send an unexpected message

368
00:14:40,233 --> 00:14:41,333
评论了
it's commented

369
00:14:41,600 --> 00:14:43,066
所以让我们不寻常
so let's uncommon

370
00:14:43,066 --> 00:14:44,266
现在运行它
and now run it

371
00:14:44,366 --> 00:14:47,033
看看现在我们在性别化的土地上会发生什么
and see what happens now that we're in gendered land

372
00:14:47,800 --> 00:14:49,200
哦，我们得到一个错误
ooo we get an error

373
00:14:49,666 --> 00:14:51,400
注意它说的是质押服务器
notice it says the pledge server

374
00:14:51,566 --> 00:14:54,833
在句柄信息中收到意外消息
received an unexpected message in handle info

375
00:14:54,966 --> 00:14:56,066
现实二
of reality two

376
00:14:56,300 --> 00:14:58,400
然后它显示出意外的消息
and then it shows the unexpected message

377
00:14:58,933 --> 00:15:00,433
在姜地时
while in ginger land

378
00:15:00,633 --> 00:15:03,200
句柄信息是一个回调函数
handle info is a callback function

379
00:15:03,300 --> 00:15:05,466
自动调用来处理
that's automatically called to handle

380
00:15:05,466 --> 00:15:09,333
任何未使用 call 或 cast 发送的消息
any messages that aren't sent using call or cast

381
00:15:09,666 --> 00:15:12,200
并且发送了我们意想不到的消息
and our unexpected message was sent

382
00:15:12,200 --> 00:15:14,133
直接使用发送功能
directly using the send function

383
00:15:14,300 --> 00:15:16,866
有点像自发的消息
kind of like a message that came spontaneously

384
00:15:16,866 --> 00:15:17,900
出乎意料
out of the blue

385
00:15:18,366 --> 00:15:19,400
当这种情况发生时
and when that happens

386
00:15:19,400 --> 00:15:21,366
调用句柄信息回调
the handle info callback is called

387
00:15:21,366 --> 00:15:22,366
带着那条信息
with that message

388
00:15:22,933 --> 00:15:24,800
现在默认实现只是
now the default implementation just

389
00:15:24,800 --> 00:15:26,800
记录我们在这里看到的空气
logs the air as we saw right here

390
00:15:27,033 --> 00:15:29,600
但是我们可以覆盖回调来做我们自己的事情
but we can override the callback to do our own thing

391
00:15:30,800 --> 00:15:31,900
好吧，我们就上这里
all right we'll go up here

392
00:15:32,000 --> 00:15:34,233
我们将把它放在句柄调用下
we're going to put it under handle call

393
00:15:35,800 --> 00:15:37,566
回调是句柄信息
the callback is handle info

394
00:15:37,733 --> 00:15:39,166
我们知道这是永恒的二
we know it's an eternity two

395
00:15:39,166 --> 00:15:40,633
第一件事是消息
the first thing is the message

396
00:15:40,766 --> 00:15:42,200
第二件事是国家
the second thing is the state

397
00:15:42,866 --> 00:15:44,166
然后我们就打印出来
and then we'll just print out

398
00:15:45,200 --> 00:15:46,100
不能碰这个
can't touch this

399
00:15:47,333 --> 00:15:49,066
然后我们将检查消息
and then we'll inspect the message

400
00:15:49,766 --> 00:15:51,466
然后它需要返回一个元组
then it needs to return a tuple

401
00:15:51,766 --> 00:15:53,833
第一个元素是原子没有回复
the first element is the atom no reply

402
00:15:54,200 --> 00:15:55,933
第二个元素是状态
and the second element is the state

403
00:15:56,533 --> 00:15:57,966
如果我们把它保存起来并运行它
if we save that away and run it

404
00:15:58,566 --> 00:16:01,300
而现在我们看到了实现的输出
while now that we see the output of our implementation

405
00:16:01,700 --> 00:16:04,333
现在这个例子有点做作，我们会给你
now this example is a bit contrived we'll give you that

406
00:16:04,500 --> 00:16:05,500
但事实证明
but it turns out

407
00:16:05,533 --> 00:16:08,033
处理信息有很多实际用途
handle info has many practical uses

408
00:16:08,033 --> 00:16:10,633
除了处理意外消息
beyond handling unexpected messages

409
00:16:10,966 --> 00:16:13,700
我们将看到一个更实际的句柄信息示例
we'll see a more practical example of the handle info

410
00:16:13,700 --> 00:16:15,500
下一节回调
callback in the next section

411
00:16:16,133 --> 00:16:18,466
我们开始用手滚动铲子
we started by hand rolling a spadeful

412
00:16:18,466 --> 00:16:22,100
server 进程，然后我们将其转换为 gen server
server process and then we converted it to a gen server

413
00:16:22,200 --> 00:16:23,333
所以你会有更好的
so you'd have a better

414
00:16:23,400 --> 00:16:25,200
了解引擎盖下发生的事情
idea of what goes on under the hood

415
00:16:25,266 --> 00:16:27,033
它不再神奇
it's no longer magical

416
00:16:27,633 --> 00:16:30,200
所以当你去编写自己的服务器进程时
so when you go to write your own server process

417
00:16:30,200 --> 00:16:32,600
我们强烈建议使用 gen server
we strongly recommend using gen server

418
00:16:32,600 --> 00:16:33,566
马上
right off the bat

419
00:16:33,766 --> 00:16:35,033
而不是自己滚动
rather than rolling your own

420
00:16:35,400 --> 00:16:37,733
jen 服务器在许多方面都经过了艰苦的战斗
jen server has been battle hardened over many

421
00:16:37,733 --> 00:16:39,800
在生产环境中使用多年
years of use in production environments

422
00:16:39,900 --> 00:16:42,200
所有粗糙的边缘空气处理
all the rough edges air handling

423
00:16:42,333 --> 00:16:45,400
类似的微妙角落案例已被平滑处理
subtle corner cases in the like have been smoothed off

424
00:16:45,633 --> 00:16:48,600
jen 服务器包含许多生产就绪功能
and jen server includes many production ready features

425
00:16:48,600 --> 00:16:49,733
我们甚至没有触及
we didn't even touch on

426
00:16:50,133 --> 00:16:50,600
用它
use it

427
00:16:50,600 --> 00:16:52,933
你会站在巨人的肩膀上
and you'll be standing on the shoulders of giants

