1
00:00:00,433 --> 00:00:02,933
currently we have to jump into fix

2
00:00:02,933 --> 00:00:05,633
and manually start our top level supervisor

3
00:00:05,800 --> 00:00:06,466
yeah instead

4
00:00:06,466 --> 00:00:08,600
we'd like the supervisor to start automatically

5
00:00:08,600 --> 00:00:10,400
when the application itself starts

6
00:00:10,533 --> 00:00:12,366
so when the application starts

7
00:00:12,366 --> 00:00:14,433
how do we get it to run this line of code

8
00:00:14,900 --> 00:00:16,500
it starts our top level supervisor

9
00:00:16,500 --> 00:00:17,733
which fires everything up

10
00:00:18,166 --> 00:00:20,666
but to answer our question we need to take a step back

11
00:00:20,933 --> 00:00:21,800
up to this point

12
00:00:21,800 --> 00:00:25,233
we've been using the term application fairly loosely

13
00:00:25,366 --> 00:00:28,900
but an application is a first class top entity

14
00:00:29,233 --> 00:00:30,000
and all along

15
00:00:30,000 --> 00:00:33,133
we've been working in the context of an to application

16
00:00:33,333 --> 00:00:35,566
let's see what's been going on behind the scenes

17
00:00:36,100 --> 00:00:37,800
1st I'm going to get out of ix

18
00:00:38,066 --> 00:00:40,100
and I'm just going to clean up all the build artifacts

19
00:00:40,100 --> 00:00:41,333
all the compiled code

20
00:00:41,333 --> 00:00:42,900
by using mix clean

21
00:00:44,033 --> 00:00:45,966
okay then if I use mix compile

22
00:00:47,766 --> 00:00:49,566
while we see it compiled to 20 files

23
00:00:49,566 --> 00:00:51,066
and then it said generated

24
00:00:51,166 --> 00:00:53,133
servile in the same way

25
00:00:53,133 --> 00:00:55,033
if I were to clean up everything again

26
00:00:55,966 --> 00:00:57,800
and jump into an ix session

27
00:00:58,600 --> 00:01:00,366
well it automatically compiles everything

28
00:01:00,366 --> 00:01:02,933
compiling 20 files and it also says generated

29
00:01:02,966 --> 00:01:03,766
servi app

30
00:01:04,266 --> 00:01:05,566
now we'll come back to where

31
00:01:05,566 --> 00:01:07,466
the app got generated in a minute

32
00:01:07,733 --> 00:01:08,266
first

33
00:01:08,266 --> 00:01:10,533
let's see which applications are currently running

34
00:01:10,866 --> 00:01:13,600
to do that we can use the application module

35
00:01:13,633 --> 00:01:16,600
and there's a function called started applications

36
00:01:18,900 --> 00:01:20,333
well this is pretty interesting

37
00:01:20,433 --> 00:01:23,766
we see that our survey app is a running application

38
00:01:23,900 --> 00:01:26,700
along with a bunch of other applications including

39
00:01:26,700 --> 00:01:28,966
poison which is an external dependency

40
00:01:28,966 --> 00:01:30,333
we added earlier in the course

41
00:01:30,900 --> 00:01:31,133
now

42
00:01:31,133 --> 00:01:34,333
poison started a few other applications that it needed

43
00:01:34,333 --> 00:01:35,966
including ssl

44
00:01:36,133 --> 00:01:38,266
and public key and crypt

45
00:01:38,566 --> 00:01:40,600
and we even see elixir

46
00:01:40,833 --> 00:01:46,100
and mix and sex and standard lib and colonel

47
00:01:46,100 --> 00:01:48,566
those are all currently running applications

48
00:01:48,800 --> 00:01:50,300
so calling ix

49
00:01:50,300 --> 00:01:50,600
dash

50
00:01:50,600 --> 00:01:53,966
s mix automatically started the survey application

51
00:01:54,000 --> 00:01:56,500
and all of its dependencies which are

52
00:01:56,600 --> 00:01:57,900
also applications

53
00:01:58,200 --> 00:02:00,000
but how did it know to do all that

54
00:02:00,900 --> 00:02:03,933
well this brings us full circle back to the mix

55
00:02:04,000 --> 00:02:05,566
ex file that is

56
00:02:05,633 --> 00:02:08,333
right underneath the survey top level directory

57
00:02:08,666 --> 00:02:09,233
you'll remember

58
00:02:09,233 --> 00:02:11,133
that this file got generated when we

59
00:02:11,133 --> 00:02:12,333
created the project

60
00:02:12,333 --> 00:02:13,566
using mix new

61
00:02:14,066 --> 00:02:16,666
and in the project function we see the application name

62
00:02:16,733 --> 00:02:18,733
survey also the version number

63
00:02:19,233 --> 00:02:20,700
and then it calls the

64
00:02:20,766 --> 00:02:23,000
depth function to get external dependencies

65
00:02:23,000 --> 00:02:23,800
and down there

66
00:02:24,066 --> 00:02:26,700
we added poison as an external dependency

67
00:02:26,766 --> 00:02:27,866
earlier on in the course

68
00:02:28,133 --> 00:02:30,833
and poison is an application in its own right

69
00:02:31,400 --> 00:02:33,533
and then we also have this application function

70
00:02:33,533 --> 00:02:35,300
that describes the application

71
00:02:35,766 --> 00:02:38,233
we saw that the poison application was automatically

72
00:02:38,233 --> 00:02:40,900
started because it's listed as a dependency

73
00:02:41,033 --> 00:02:42,233
and mix infers

74
00:02:42,433 --> 00:02:43,266
what to start

75
00:02:43,800 --> 00:02:47,500
and then we can use this extra applications to start

76
00:02:47,600 --> 00:02:49,766
any extra applications that are included

77
00:02:49,766 --> 00:02:52,100
or shipped with elixir early

78
00:02:52,433 --> 00:02:53,166
for example

79
00:02:53,166 --> 00:02:55,800
by default the logger application is started

80
00:02:56,133 --> 00:02:59,233
so all the information in this file is used to generate

81
00:02:59,233 --> 00:03:00,566
the survey application

82
00:03:01,100 --> 00:03:04,000
so where is the generated survey application file

83
00:03:04,700 --> 00:03:04,866
I'm

84
00:03:04,866 --> 00:03:07,200
in a regular terminal session here in the top level

85
00:03:07,200 --> 00:03:08,300
survey directory

86
00:03:08,400 --> 00:03:11,000
and all the build artifacts live in the

87
00:03:11,000 --> 00:03:12,700
underscore build directory

88
00:03:13,033 --> 00:03:15,433
now once we go into this directory we're in earlingland

89
00:03:15,433 --> 00:03:17,800
so the structure feels a bit on orthodox

90
00:03:17,866 --> 00:03:19,200
to an elixir developer

91
00:03:19,366 --> 00:03:22,400
but it follows the conventions expected by top

92
00:03:22,633 --> 00:03:23,800
and the earling vm

93
00:03:24,200 --> 00:03:25,000
so under the bill

94
00:03:25,000 --> 00:03:26,700
directory there are two sub directories

95
00:03:26,766 --> 00:03:28,966
dev and test so I'm going to go down into dev

96
00:03:29,400 --> 00:03:31,100
then there are two sub directories under it

97
00:03:31,266 --> 00:03:33,133
consolidated don't worry about it

98
00:03:33,166 --> 00:03:34,733
and then live we're going to go down there

99
00:03:35,700 --> 00:03:38,133
and then under lib we see two sub directories

100
00:03:38,133 --> 00:03:39,400
poison and survey

101
00:03:39,400 --> 00:03:41,233
those are the two applications

102
00:03:41,233 --> 00:03:43,200
let's go into the survey sub directory

103
00:03:43,300 --> 00:03:45,433
and then there's consolidated which will ignore

104
00:03:45,600 --> 00:03:48,633
and the most important part is the e bin directory

105
00:03:49,300 --> 00:03:50,400
so what's inside of there

106
00:03:51,466 --> 00:03:54,033
well it includes a bunch of files ending in

107
00:03:54,466 --> 00:03:57,366
beam that correspond to each of our modules

108
00:03:59,233 --> 00:04:01,700
these are compiled binary files that run

109
00:04:01,766 --> 00:04:02,966
on the earling vim

110
00:04:03,200 --> 00:04:04,333
during compilation

111
00:04:04,333 --> 00:04:07,166
all the files in our lib directory were compiled

112
00:04:07,233 --> 00:04:10,133
and the resulting beam vials ended up in this directory

113
00:04:10,633 --> 00:04:12,066
but if you look at the bottom

114
00:04:12,233 --> 00:04:15,733
notice that there's also a survey dot app file

115
00:04:16,200 --> 00:04:17,333
it's a plain text file

116
00:04:17,333 --> 00:04:19,166
so let's go ahead and see what's inside

117
00:04:20,100 --> 00:04:22,333
and I'm just going to use the cat command to do that

118
00:04:22,333 --> 00:04:24,366
it's just going to print out what's in that file

119
00:04:24,600 --> 00:04:25,433
servey dot app

120
00:04:26,366 --> 00:04:26,533
and

121
00:04:26,533 --> 00:04:28,666
I'll just shrink it down so we can see everything here

122
00:04:29,066 --> 00:04:31,066
well interestingly it's earling code

123
00:04:31,066 --> 00:04:33,833
this is just one big earling topple right here

124
00:04:34,366 --> 00:04:36,766
it includes the application name survey

125
00:04:37,233 --> 00:04:38,800
there's a description survey

126
00:04:38,800 --> 00:04:40,433
we see that there's a version number

127
00:04:40,700 --> 00:04:41,500
right there

128
00:04:42,033 --> 00:04:45,600
it also has a list of compiled modules here's the list

129
00:04:46,033 --> 00:04:49,166
and each of those modules corresponds to a beam file

130
00:04:49,366 --> 00:04:52,066
and then there's also a list of applications

131
00:04:53,233 --> 00:04:55,966
so we see the poison application logger

132
00:04:56,033 --> 00:04:56,733
and then

133
00:04:56,733 --> 00:04:59,833
also colonel's standard lip and elixir were in the mix

134
00:05:00,266 --> 00:05:01,300
so you can think of this

135
00:05:01,300 --> 00:05:04,666
as a specification that defines the service application

136
00:05:04,800 --> 00:05:07,633
this file was automatically generated by mix

137
00:05:07,733 --> 00:05:10,433
in part by using information that's in the mix

138
00:05:10,433 --> 00:05:12,500
excess file we looked at earlier

139
00:05:13,000 --> 00:05:15,433
now the good news is we never have to touch this file

140
00:05:15,433 --> 00:05:16,866
it's generated for us

141
00:05:17,566 --> 00:05:20,033
well let's add a better description of our application

142
00:05:20,200 --> 00:05:23,100
let's call it a humble http server

143
00:05:23,433 --> 00:05:26,366
yes we just come back over to our mix ex

144
00:05:26,666 --> 00:05:29,466
and we can add a description key under project

145
00:05:30,866 --> 00:05:33,466
a humble http server

146
00:05:33,900 --> 00:05:34,733
save that away

147
00:05:35,466 --> 00:05:36,600
now back over here

148
00:05:36,700 --> 00:05:38,333
I'm in my top level survey directory

149
00:05:38,333 --> 00:05:40,166
if I use mix compile

150
00:05:42,400 --> 00:05:44,666
and then we look at that service app again

151
00:05:45,500 --> 00:05:47,166
well you notice the descriptions changed

152
00:05:47,166 --> 00:05:49,266
it's now a humble hip server

153
00:05:49,600 --> 00:05:52,000
so the service dot app file got updated

154
00:05:52,000 --> 00:05:53,533
when we ran mixed compile

155
00:05:54,033 --> 00:05:55,500
now we saw that the build directory

156
00:05:55,500 --> 00:05:56,500
also had the poison app

157
00:05:56,500 --> 00:05:57,733
so let's take a look at that

158
00:05:57,833 --> 00:05:58,666
it's under build

159
00:05:59,466 --> 00:06:02,433
and it's under dev lib poison

160
00:06:03,800 --> 00:06:06,366
and we want to go down into e bin directory for it

161
00:06:06,600 --> 00:06:06,800
well

162
00:06:06,800 --> 00:06:09,000
and you see that there's just a bunch of beam files

163
00:06:09,000 --> 00:06:10,766
corresponding to all the modules

164
00:06:10,933 --> 00:06:12,500
that are in the poison library

165
00:06:12,500 --> 00:06:14,866
and there's also a poison dot app file

166
00:06:15,233 --> 00:06:16,266
looks pretty familiar

167
00:06:16,266 --> 00:06:17,400
let's have a look at that

168
00:06:17,700 --> 00:06:19,500
poison nut app and I'm just going to run the

169
00:06:19,500 --> 00:06:20,600
cat command on it

170
00:06:21,966 --> 00:06:22,933
shrink it down a little bit

171
00:06:22,933 --> 00:06:24,100
so we can see the full thing

172
00:06:24,933 --> 00:06:27,833
well it's got a description has all the modules

173
00:06:28,700 --> 00:06:29,866
it's got a version number

174
00:06:30,200 --> 00:06:32,400
and then the applications that it needs started

175
00:06:32,866 --> 00:06:36,600
so when we fire up if s mix it compiles

176
00:06:36,866 --> 00:06:37,866
everything that's out of date

177
00:06:38,066 --> 00:06:40,333
generates a new service file

178
00:06:40,433 --> 00:06:43,433
and then top looks for the service file

179
00:06:43,500 --> 00:06:45,600
and uses it to start the application

180
00:06:45,733 --> 00:06:47,266
and all of its dependencies

181
00:06:47,266 --> 00:06:49,133
including poison we see right here

182
00:06:50,300 --> 00:06:51,566
back over an ix

183
00:06:51,566 --> 00:06:53,900
we can also stop the application as a hole

184
00:06:53,900 --> 00:06:54,833
and then start it again

185
00:06:54,833 --> 00:06:56,866
so we can use that application module

186
00:06:57,033 --> 00:06:58,233
we can call stop

187
00:06:58,700 --> 00:07:00,600
on our survey application

188
00:07:02,500 --> 00:07:05,033
okay now if we look at started applications again

189
00:07:05,033 --> 00:07:07,166
well you notice servi isn't at the top

190
00:07:07,766 --> 00:07:11,366
so we could restart it by using start passing serve

191
00:07:12,900 --> 00:07:14,133
and now it started again

192
00:07:15,233 --> 00:07:16,400
so the takeaway here

193
00:07:16,400 --> 00:07:20,000
is that an top application is a first class entity

194
00:07:20,066 --> 00:07:22,700
that can be started and stopped as a unit as

195
00:07:22,700 --> 00:07:26,000
a whole and can be reused in other systems

196
00:07:26,200 --> 00:07:28,333
in this way it's more like a component

197
00:07:28,400 --> 00:07:31,433
or a service than a traditional application

198
00:07:32,566 --> 00:07:33,800
so now that we have a better

199
00:07:33,933 --> 00:07:36,666
understanding of what an top application is

200
00:07:36,933 --> 00:07:38,700
let's return to our original goal

201
00:07:39,133 --> 00:07:40,666
even though our application is running

202
00:07:40,666 --> 00:07:43,400
we still have to start the supervisor manually to

203
00:07:43,400 --> 00:07:44,633
bootstrap everything

204
00:07:44,966 --> 00:07:47,166
instead of manually starting the supervisor

205
00:07:47,166 --> 00:07:49,733
we want the supervisor to start automatically

206
00:07:49,733 --> 00:07:51,933
when the application itself starts

207
00:07:52,366 --> 00:07:55,133
so how do we typically tell top to do something

208
00:07:55,166 --> 00:07:56,933
that specific to our application

209
00:07:57,233 --> 00:07:58,833
well we use a callback

210
00:07:59,200 --> 00:08:02,033
we've used callbacks to specialize gendered behaviors

211
00:08:02,100 --> 00:08:02,733
and we've used

212
00:08:02,733 --> 00:08:05,300
callbacks to specialize supervisor behaviors

213
00:08:05,466 --> 00:08:06,400
in the same way

214
00:08:06,433 --> 00:08:08,233
we'll use a callback to specialize

215
00:08:08,233 --> 00:08:09,766
the application behavior

216
00:08:10,733 --> 00:08:14,100
as the callback module will use this file survey

217
00:08:14,100 --> 00:08:15,966
ex it's under lib

218
00:08:16,000 --> 00:08:18,366
but it's not in the survey sub directory

219
00:08:18,600 --> 00:08:21,866
it's this top level file that was generated when we ran

220
00:08:21,900 --> 00:08:23,866
mix new a long

221
00:08:24,166 --> 00:08:25,533
long time ago

222
00:08:26,200 --> 00:08:28,433
so we'll get rid of this hello stuff here

223
00:08:31,333 --> 00:08:34,266
and then we're going to use the application behavior

224
00:08:34,666 --> 00:08:37,533
and the application behavior expects the callback

225
00:08:37,533 --> 00:08:39,766
module to define a start function

226
00:08:41,533 --> 00:08:43,133
start function takes two arguments

227
00:08:43,133 --> 00:08:45,000
the first one is going to be the type

228
00:08:45,000 --> 00:08:46,866
now this is typically just the atom

229
00:08:46,933 --> 00:08:48,633
normal so we're going to ignore that

230
00:08:48,800 --> 00:08:50,633
and the second one is arguments

231
00:08:50,633 --> 00:08:52,333
and we're going to ignore those as well

232
00:08:53,033 --> 00:08:54,100
then we're going to print out

233
00:08:55,100 --> 00:08:56,766
starting the application

234
00:08:57,833 --> 00:08:59,933
so this start function will be invoked

235
00:08:59,933 --> 00:09:01,733
when the application starts

236
00:09:01,766 --> 00:09:02,700
what do we want to do

237
00:09:02,833 --> 00:09:05,700
well we want to start our top level supervisor

238
00:09:06,000 --> 00:09:07,100
and I happen to have that quit

239
00:09:07,100 --> 00:09:08,666
I'm just going to paste it right in there

240
00:09:09,300 --> 00:09:11,233
in start must return a tuple

241
00:09:11,300 --> 00:09:14,500
okay pid where pid identifies the supervisor process

242
00:09:14,566 --> 00:09:15,766
so we can leave it like this

243
00:09:15,766 --> 00:09:17,100
or we can just remove this

244
00:09:17,100 --> 00:09:19,400
because we know that a tuple is going to get returned

245
00:09:19,633 --> 00:09:21,600
and then that will be implicitly returned

246
00:09:21,600 --> 00:09:22,600
by the start function

247
00:09:22,600 --> 00:09:24,500
which fulfills our side of the bargain

248
00:09:25,033 --> 00:09:27,433
so by writing this application behavior

249
00:09:27,666 --> 00:09:29,866
we basically want to override

250
00:09:30,133 --> 00:09:33,400
the generic application behavior for the application

251
00:09:33,533 --> 00:09:35,400
and to do that we need to make sure

252
00:09:35,666 --> 00:09:37,866
that this survey module is called

253
00:09:38,100 --> 00:09:40,400
and we do that in mix ex

254
00:09:41,333 --> 00:09:43,533
down in this application section

255
00:09:44,233 --> 00:09:45,800
we're going to add a new line here

256
00:09:46,033 --> 00:09:47,200
it's going to be mod

257
00:09:47,800 --> 00:09:51,433
and mod specifies that callback module to invoke

258
00:09:51,500 --> 00:09:53,233
when the application is started

259
00:09:53,700 --> 00:09:56,233
we give it a tuple and then we give it the module

260
00:09:56,366 --> 00:09:57,166
survey

261
00:09:57,300 --> 00:10:01,233
and top will invoke the start function of that module

262
00:10:01,266 --> 00:10:02,833
that's part of the contract

263
00:10:02,933 --> 00:10:04,700
and we can pass it rag

264
00:10:04,700 --> 00:10:06,433
and we're just going to use an empty list

265
00:10:06,666 --> 00:10:08,733
but you could pass whatever argument you need

266
00:10:09,400 --> 00:10:10,966
the callback module can be

267
00:10:11,033 --> 00:10:13,566
any module that uses the application behavior

268
00:10:13,566 --> 00:10:15,500
so you could have created a new

269
00:10:15,666 --> 00:10:18,466
survey application module for example

270
00:10:18,866 --> 00:10:20,500
but it's also common just to use this

271
00:10:20,500 --> 00:10:22,200
top level module survey

272
00:10:22,533 --> 00:10:25,500
the takeaway here is that top will automatically call

273
00:10:25,500 --> 00:10:27,400
this module start function

274
00:10:27,500 --> 00:10:29,300
when it starts the application

275
00:10:29,933 --> 00:10:31,000
so we'll save that away

276
00:10:31,800 --> 00:10:33,833
and then we want to start a new sex session

277
00:10:38,366 --> 00:10:39,200
and look at that

278
00:10:39,200 --> 00:10:40,900
this time it fires everything up

279
00:10:40,900 --> 00:10:42,400
it started the application

280
00:10:42,433 --> 00:10:44,533
then it started our top level supervisor

281
00:10:44,600 --> 00:10:46,266
and then everything else fell in place

282
00:10:47,200 --> 00:10:49,533
now what if you wanted to start the application

283
00:10:49,666 --> 00:10:51,066
without the sex shell

284
00:10:51,366 --> 00:10:53,000
well you could use mix run

285
00:10:53,600 --> 00:10:56,766
yeah I'll just get out of here if you run mix run

286
00:10:57,633 --> 00:10:58,433
like that

287
00:10:59,066 --> 00:11:00,466
and it starts everything up

288
00:11:00,466 --> 00:11:03,500
but then we end up back in a terminal session prompt

289
00:11:03,500 --> 00:11:05,066
well that's because the instance

290
00:11:05,066 --> 00:11:07,166
terminated as soon as our service

291
00:11:07,166 --> 00:11:08,500
start function finished

292
00:11:08,866 --> 00:11:10,866
after the top level supervisor started

293
00:11:11,400 --> 00:11:13,633
so to keep it running we need to use this

294
00:11:13,633 --> 00:11:14,866
no halt option

295
00:11:16,233 --> 00:11:17,400
no dash halt

296
00:11:18,466 --> 00:11:19,266
perfect

297
00:11:19,700 --> 00:11:22,600
seeing that output reminds me that our web server

298
00:11:22,766 --> 00:11:24,866
always runs on port 4000

299
00:11:25,366 --> 00:11:26,866
yeah the port number is currently hard

300
00:11:26,866 --> 00:11:28,800
coded in our kickstarter module

301
00:11:29,633 --> 00:11:31,233
so over here under survey

302
00:11:31,766 --> 00:11:33,100
there it is kickstarter

303
00:11:33,133 --> 00:11:35,800
and then down here we're starting it on port 4000

304
00:11:36,133 --> 00:11:37,833
we can make this easier to configure

305
00:11:37,833 --> 00:11:40,033
by adding a default port value

306
00:11:40,033 --> 00:11:41,866
to the applications environment

307
00:11:42,200 --> 00:11:45,466
to do that we come back over to our mix ex file

308
00:11:46,133 --> 00:11:46,933
and then we'll add

309
00:11:47,200 --> 00:11:49,133
another line down here under application

310
00:11:49,500 --> 00:11:52,600
it's going to be end and then we give it a keyword list

311
00:11:53,166 --> 00:11:54,033
so our port

312
00:11:54,400 --> 00:11:56,933
we want to be 3000 I'm going to use 3000

313
00:11:57,033 --> 00:11:59,633
just so that you see it changes from 4000

314
00:12:00,000 --> 00:12:03,700
so what this is going to do is add this key value pair

315
00:12:03,966 --> 00:12:05,733
to the applications environment

316
00:12:06,200 --> 00:12:07,400
so let's save this away

317
00:12:08,400 --> 00:12:09,233
then back over here

318
00:12:09,233 --> 00:12:12,333
I'm going to kill sex and I'm going to use mix compile

319
00:12:12,433 --> 00:12:15,633
that's going to generate a new service app file

320
00:12:16,133 --> 00:12:17,633
and if we have a look at that

321
00:12:18,433 --> 00:12:22,200
we'll notice that the port 3000 is part of

322
00:12:22,333 --> 00:12:23,733
this application file

323
00:12:24,233 --> 00:12:26,633
so now when top starts the application

324
00:12:26,633 --> 00:12:28,566
the default application environment

325
00:12:28,566 --> 00:12:29,700
will include the port

326
00:12:30,633 --> 00:12:32,433
then back over and kick starter

327
00:12:32,866 --> 00:12:34,666
rather than hard coating the port

328
00:12:34,833 --> 00:12:37,500
we can read it from the application's environment

329
00:12:37,833 --> 00:12:38,000
yeah

330
00:12:38,000 --> 00:12:40,833
the way we do that is we use the application module

331
00:12:41,033 --> 00:12:42,733
there's a function get end

332
00:12:43,433 --> 00:12:46,433
we pass it the application's name serving in this case

333
00:12:46,600 --> 00:12:48,433
and the name of the variable which is port

334
00:12:49,133 --> 00:12:52,166
then we can just use that port variable right down here

335
00:12:53,633 --> 00:12:56,733
and now when we fire up ix s mix

336
00:12:58,100 --> 00:12:58,933
well you notice

337
00:12:58,966 --> 00:13:01,566
our web servers now listening on port 3000

338
00:13:01,866 --> 00:13:04,366
pretty cool now that we have a complete

339
00:13:04,966 --> 00:13:07,466
proper top application running

340
00:13:07,500 --> 00:13:10,000
let's see what it looks like in the observer gooey

341
00:13:10,366 --> 00:13:11,400
yeah let's fire that up

342
00:13:12,600 --> 00:13:14,166
earlier on in the course we looked at

343
00:13:14,166 --> 00:13:16,700
the individual process is running by going

344
00:13:16,733 --> 00:13:18,266
into this processes tab

345
00:13:18,933 --> 00:13:21,433
but now we can go to the applications tab

346
00:13:21,433 --> 00:13:23,166
and see all the applications that

347
00:13:23,166 --> 00:13:23,966
are currently running

348
00:13:24,000 --> 00:13:25,466
it's over on the left hand side here

349
00:13:25,766 --> 00:13:28,700
including our humble little survey application

350
00:13:29,266 --> 00:13:32,266
so let's start by having a look at the sex application

351
00:13:32,766 --> 00:13:35,300
well this is interesting we see its supervision tree

352
00:13:35,600 --> 00:13:37,633
it has a supervisor and then it has

353
00:13:37,700 --> 00:13:38,766
two gen servers here

354
00:13:39,066 --> 00:13:41,466
and we now know exactly how that works

355
00:13:41,800 --> 00:13:43,166
yeah if we look at colonel

356
00:13:43,733 --> 00:13:45,166
well it has a supervisor

357
00:13:45,166 --> 00:13:46,933
colonel sup is what it's named

358
00:13:46,933 --> 00:13:49,200
and then notice it's got a second level supervisor

359
00:13:49,200 --> 00:13:50,300
colonel safe sup

360
00:13:50,466 --> 00:13:52,333
and then it has some processes under here

361
00:13:52,900 --> 00:13:54,733
so this is its supervision tree

362
00:13:55,100 --> 00:13:56,333
if we look at logger

363
00:13:56,733 --> 00:13:57,900
well it's got a top level

364
00:13:57,900 --> 00:14:00,533
supervisor and then it's got a watcher supervisor

365
00:14:00,533 --> 00:14:02,566
and then it's got some worker processes

366
00:14:02,933 --> 00:14:04,600
and now for the big reveal

367
00:14:04,900 --> 00:14:06,633
here's our supervision tree

368
00:14:07,466 --> 00:14:09,366
we've got our top level supervisor

369
00:14:09,500 --> 00:14:10,933
we've got our kickstarter

370
00:14:11,033 --> 00:14:13,533
our services supervisor that's our 2nd level

371
00:14:13,700 --> 00:14:15,333
and then they're managing children

372
00:14:16,166 --> 00:14:16,366
okay

373
00:14:16,366 --> 00:14:19,133
let's see what happens when we kill a worker process

374
00:14:19,133 --> 00:14:20,800
such as the pledge server

375
00:14:21,400 --> 00:14:22,600
okay if we click on that

376
00:14:22,600 --> 00:14:25,833
we see down here it's pied one sixty nine currently

377
00:14:25,966 --> 00:14:27,400
so I can right click on it

378
00:14:27,733 --> 00:14:30,633
kill process send it to kill signal

379
00:14:31,800 --> 00:14:32,866
okay we see down here

380
00:14:33,400 --> 00:14:34,900
starting the pledge server

381
00:14:35,066 --> 00:14:38,300
so it got restarted by our services supervisor

382
00:14:38,533 --> 00:14:40,166
and if I click on pledge server now

383
00:14:40,200 --> 00:14:42,833
well it's a different pid now it's 4 6 6

384
00:14:43,400 --> 00:14:44,666
oh that's pretty cool

385
00:14:44,900 --> 00:14:48,000
what happens if we kill the services supervisor though

386
00:14:48,533 --> 00:14:51,433
if we click on it right now it's pit one sixty eight

387
00:14:51,833 --> 00:14:53,100
we'll kill it the same way

388
00:14:55,866 --> 00:14:56,833
all right we see

389
00:14:56,833 --> 00:14:58,833
the services supervisor is getting restarted

390
00:14:58,833 --> 00:15:00,266
which started the pledge server

391
00:15:00,366 --> 00:15:01,566
and the sensor server

392
00:15:01,666 --> 00:15:05,233
and if we click on services supervisor its pit is now

393
00:15:05,400 --> 00:15:08,166
4 7 4 that's pretty sweet

394
00:15:09,500 --> 00:15:11,066
that wraps it up for this course

395
00:15:11,100 --> 00:15:12,733
thanks so much for joining us

396
00:15:13,033 --> 00:15:14,033
we hope you have a lot of fun

397
00:15:14,033 --> 00:15:15,966
using a picture to build your own apps

398
00:15:15,966 --> 00:15:17,000
we'll see you next time

399
00:15:18,500 --> 00:15:20,333
now let's go photograph some bears

400
00:15:20,433 --> 00:15:22,133
or maybe even sasquatch

