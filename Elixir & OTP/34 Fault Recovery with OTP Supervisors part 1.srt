1
00:00:00,466 --> 00:00:03,033
are you ready for another top behavior

2
00:00:03,200 --> 00:00:04,866
bring on the supervisors

3
00:00:05,333 --> 00:00:06,200
at this point

4
00:00:06,200 --> 00:00:07,833
we have the kickstarter process

5
00:00:07,833 --> 00:00:09,600
link to the web server process

6
00:00:09,600 --> 00:00:11,733
so if the web server process crashes

7
00:00:11,733 --> 00:00:14,733
a new web server process is kick started now

8
00:00:14,733 --> 00:00:16,533
unlike http server

9
00:00:16,533 --> 00:00:18,800
the pledge server and sensor server

10
00:00:18,800 --> 00:00:21,600
are top gen server processes

11
00:00:21,666 --> 00:00:23,066
we can therefore use another

12
00:00:23,066 --> 00:00:26,166
top behavior called supervisor to start

13
00:00:26,500 --> 00:00:29,633
monitor and restart these processes if they crash

14
00:00:29,966 --> 00:00:32,533
will name ours services supervisor

15
00:00:32,700 --> 00:00:34,733
a supervisor is like a mother hand

16
00:00:34,766 --> 00:00:36,800
who watches over other processes

17
00:00:36,800 --> 00:00:38,800
commonly refer to as her children

18
00:00:39,066 --> 00:00:42,833
that's right an top supervisor can supervise one

19
00:00:43,233 --> 00:00:45,433
or more gender processes

20
00:00:45,433 --> 00:00:47,933
and as we'll see a bit later can supervise

21
00:00:48,166 --> 00:00:50,033
other supervisor processes

22
00:00:50,266 --> 00:00:53,833
top supervisors can support a variety of strategies

23
00:00:53,833 --> 00:00:56,966
for restarting the child processes if necessary

24
00:00:57,200 --> 00:00:59,866
one common strategy is one for all

25
00:00:59,866 --> 00:01:02,466
which means if one process terminates

26
00:01:02,466 --> 00:01:04,700
the supervisor will terminate all

27
00:01:04,700 --> 00:01:05,700
the other children

28
00:01:05,700 --> 00:01:07,933
and start new processes in their place

29
00:01:08,466 --> 00:01:09,433
in our case

30
00:01:09,433 --> 00:01:12,233
since the child processes aren't dependent on

31
00:01:12,233 --> 00:01:15,633
each other we'll use the one for one restart strategy

32
00:01:15,833 --> 00:01:18,700
which means if a child process terminates

33
00:01:18,833 --> 00:01:20,733
only that process is restarted

34
00:01:21,000 --> 00:01:21,500
after all

35
00:01:21,500 --> 00:01:24,500
there's no need for us to restart both processes

36
00:01:24,633 --> 00:01:25,800
so let's get started

37
00:01:26,433 --> 00:01:27,766
let's create the module

38
00:01:29,000 --> 00:01:31,366
name of the file is services supervisor

39
00:01:36,966 --> 00:01:38,400
and there's no magic to this name

40
00:01:38,400 --> 00:01:39,966
here services supervisor

41
00:01:39,966 --> 00:01:41,833
the magic comes when you actually use

42
00:01:42,200 --> 00:01:43,633
the supervisor behavior

43
00:01:43,933 --> 00:01:45,800
now a supervisor is a process in its

44
00:01:45,800 --> 00:01:48,066
own right just like any other process

45
00:01:48,200 --> 00:01:48,800
so to start

46
00:01:48,800 --> 00:01:51,633
the supervisor process will write a rapper function

47
00:01:51,733 --> 00:01:53,866
this time called start link and you'll see why

48
00:01:53,866 --> 00:01:56,333
in a minute and then we'll just start by printing out

49
00:01:56,900 --> 00:01:59,866
starting the services supervisor

50
00:02:00,900 --> 00:02:02,600
to start the supervisor process

51
00:02:02,600 --> 00:02:05,066
you might think we could call supervisor

52
00:02:06,900 --> 00:02:09,633
start because that's what we did for a gen server

53
00:02:09,733 --> 00:02:12,533
but the supervisor module doesn't define a start

54
00:02:12,533 --> 00:02:15,633
function it only has a start link function

55
00:02:16,033 --> 00:02:19,000
calling start link spawns a supervisor process

56
00:02:19,000 --> 00:02:21,733
and links it to the process that calls this

57
00:02:21,733 --> 00:02:23,133
start link function here

58
00:02:23,733 --> 00:02:27,466
initially we'll call start link from the ix process

59
00:02:27,466 --> 00:02:29,800
but later on we'll write a top level

60
00:02:29,833 --> 00:02:31,366
supervisor process

61
00:02:31,366 --> 00:02:34,866
that then is linked to this supervisor process

62
00:02:35,300 --> 00:02:37,300
now similar to how the gents over behavior works

63
00:02:37,300 --> 00:02:38,900
the supervisor behavior

64
00:02:39,100 --> 00:02:40,933
also needs a callback module

65
00:02:40,966 --> 00:02:42,933
and that's the first argument to start link

66
00:02:42,966 --> 00:02:44,433
and it's going to be this module

67
00:02:44,433 --> 00:02:45,800
our services supervisor

68
00:02:46,466 --> 00:02:48,966
and then we'll use ok as the argument

69
00:02:49,066 --> 00:02:51,133
and we're also going to register this process

70
00:02:51,133 --> 00:02:52,733
under the same name as the module

71
00:02:52,733 --> 00:02:54,066
so we use the name option

72
00:02:54,333 --> 00:02:56,433
and then we want it to be this module

73
00:02:56,766 --> 00:02:56,933
now

74
00:02:56,933 --> 00:02:59,600
the supervisor behavior expects the callback module

75
00:02:59,600 --> 00:03:01,266
to implement in a knit function

76
00:03:01,366 --> 00:03:02,633
so that's our next step

77
00:03:03,966 --> 00:03:05,500
and we'll pattern match on ok

78
00:03:05,533 --> 00:03:06,833
just because we pass that in

79
00:03:07,366 --> 00:03:09,533
similar to how a knit works with gen server

80
00:03:09,633 --> 00:03:10,366
and knit is

81
00:03:10,366 --> 00:03:12,866
automatically invoked when we start the supervisor

82
00:03:12,866 --> 00:03:16,433
here and because we passed ok is the second argument

83
00:03:16,433 --> 00:03:17,833
well it's going to pass that in

84
00:03:17,900 --> 00:03:19,400
to a knit is the first argument

85
00:03:19,400 --> 00:03:20,666
so we just pattern match it

86
00:03:21,066 --> 00:03:21,266
now

87
00:03:21,266 --> 00:03:24,333
the nit callback is where we tell the supervisor which

88
00:03:24,333 --> 00:03:25,466
processes or

89
00:03:25,466 --> 00:03:28,200
children it needs to start and then supervise

90
00:03:28,600 --> 00:03:32,166
in our case it's responsible for two child processes

91
00:03:32,166 --> 00:03:33,800
and we'll put those in a list

92
00:03:34,366 --> 00:03:35,766
yeah we'll call the list children

93
00:03:37,600 --> 00:03:40,133
and it's going to be the pledge server

94
00:03:41,266 --> 00:03:43,000
and also serve

95
00:03:43,866 --> 00:03:44,833
sensor server

96
00:03:46,166 --> 00:03:48,066
then we need to call supervisor

97
00:03:48,900 --> 00:03:49,700
nit

98
00:03:49,700 --> 00:03:52,266
we pass at the list of children as the first argument

99
00:03:52,633 --> 00:03:55,933
and then we also give it the restart strategy

100
00:03:56,300 --> 00:03:58,833
and as we said earlier we're going to use the one

101
00:03:59,933 --> 00:04:02,866
for one strategy and notice that that's an atom

102
00:04:03,366 --> 00:04:04,333
so let's go ahead and

103
00:04:04,333 --> 00:04:06,800
fire up the supervisor to see what happens

104
00:04:07,733 --> 00:04:08,766
over an ix

105
00:04:09,533 --> 00:04:11,166
to start the supervisor we would use

106
00:04:11,933 --> 00:04:14,066
services supervisor

107
00:04:15,366 --> 00:04:17,666
the name of our wrapper function is start link

108
00:04:18,433 --> 00:04:20,533
alright and that's going to return a pid

109
00:04:20,533 --> 00:04:22,233
which is going to be wrapped in a two pull

110
00:04:22,333 --> 00:04:24,900
okay the pid I'm going to call sub pid

111
00:04:27,700 --> 00:04:28,533
just like that

112
00:04:29,600 --> 00:04:31,566
uh oh we get an air

113
00:04:32,100 --> 00:04:35,300
well it's trying to invoke the pledge server

114
00:04:35,333 --> 00:04:38,900
start link and pass an empty list as the argument

115
00:04:40,166 --> 00:04:41,633
we'll notice in our code

116
00:04:41,833 --> 00:04:44,466
we didn't tell the supervisor how to start

117
00:04:44,500 --> 00:04:46,000
the child processes

118
00:04:46,500 --> 00:04:48,200
so the supervisor assumes our

119
00:04:48,200 --> 00:04:50,066
code follows some conventions

120
00:04:50,233 --> 00:04:51,266
when a child process

121
00:04:51,300 --> 00:04:54,266
starts it needs to be linked to the supervisor

122
00:04:54,366 --> 00:04:56,733
so the supervisor can detect a crash

123
00:04:57,100 --> 00:04:59,333
so the supervisor assumes that the child

124
00:04:59,333 --> 00:05:00,733
process defines a start

125
00:05:00,733 --> 00:05:01,633
link function

126
00:05:01,800 --> 00:05:03,333
that starts the process

127
00:05:03,333 --> 00:05:05,200
and links it to the current process

128
00:05:05,200 --> 00:05:07,066
which will be the supervisor in this case

129
00:05:07,300 --> 00:05:09,633
and if we look over in our pledge server

130
00:05:10,133 --> 00:05:12,033
well it doesn't follow that convention

131
00:05:12,133 --> 00:05:15,000
it defines a start function of ability zero

132
00:05:15,000 --> 00:05:17,466
it doesn't take any arguments and it doesn't do

133
00:05:17,566 --> 00:05:20,900
any linking and this is the same for our sensor server

134
00:05:21,066 --> 00:05:21,966
start function

135
00:05:22,366 --> 00:05:23,766
so that's why we get the air

136
00:05:23,800 --> 00:05:25,566
because the supervisor is looking for a

137
00:05:25,566 --> 00:05:26,700
start link function

138
00:05:27,133 --> 00:05:28,200
so let's fix that

139
00:05:28,200 --> 00:05:30,533
we'll rename this interface function from start

140
00:05:30,633 --> 00:05:31,633
to start link

141
00:05:32,133 --> 00:05:33,233
then instead of calling

142
00:05:34,366 --> 00:05:35,833
gen server start link

143
00:05:36,166 --> 00:05:38,133
that's going to spawn the gen server process and

144
00:05:38,133 --> 00:05:38,633
link it

145
00:05:38,633 --> 00:05:41,233
to the process that calls our start link function

146
00:05:41,566 --> 00:05:43,533
and the supervisor is going to pass this start

147
00:05:43,533 --> 00:05:44,266
link function

148
00:05:44,266 --> 00:05:46,366
in argument we don't really care what it is

149
00:05:46,366 --> 00:05:48,000
we're just going to use underscore arg

150
00:05:48,166 --> 00:05:49,366
but we saw in the air message

151
00:05:49,366 --> 00:05:50,833
it's just going to be an empty list

152
00:05:51,133 --> 00:05:51,866
and then we'll

153
00:05:51,866 --> 00:05:53,700
also add a print out here at the top of this

154
00:05:53,733 --> 00:05:55,033
because we don't have one right now

155
00:05:55,233 --> 00:05:56,133
it's just going to say

156
00:05:56,500 --> 00:05:58,933
starting the sensor server

157
00:06:00,233 --> 00:06:01,066
while we're here

158
00:06:01,100 --> 00:06:03,800
let's crank the refresh interval way down

159
00:06:03,900 --> 00:06:05,533
so that the d bug output

160
00:06:05,533 --> 00:06:07,366
doesn't get in the way of what we're seeing when

161
00:06:07,366 --> 00:06:08,533
the process is start

162
00:06:08,833 --> 00:06:11,766
so let's put it on an interval of 60min okay

163
00:06:11,766 --> 00:06:13,466
well we've got that commented at the end

164
00:06:13,500 --> 00:06:14,700
so we'll just take it out of here

165
00:06:15,166 --> 00:06:17,700
we'll comment our 5 seconds interval

166
00:06:17,966 --> 00:06:19,333
and then we'll have it be

167
00:06:19,766 --> 00:06:22,300
60min that way we won't see as much debug

168
00:06:22,766 --> 00:06:25,433
let's also fix our pledge server in the same way

169
00:06:25,733 --> 00:06:28,333
we want our interface function to be start link

170
00:06:28,800 --> 00:06:30,200
gen server start link

171
00:06:30,333 --> 00:06:32,500
oh and it takes arguments which will ignore

172
00:06:33,166 --> 00:06:34,533
now that we're following the conventions

173
00:06:34,533 --> 00:06:35,900
the supervisor should be happy

174
00:06:35,900 --> 00:06:38,300
so let's try that out in a clean slate here

175
00:06:40,966 --> 00:06:43,500
all right let's start up our services supervisor

176
00:06:45,566 --> 00:06:47,033
ah that's looking a lot better

177
00:06:47,566 --> 00:06:49,633
yeah we see the services supervisor

178
00:06:49,633 --> 00:06:52,033
starts and then automatically starts the two

179
00:06:52,033 --> 00:06:53,366
child processes

180
00:06:53,866 --> 00:06:56,066
this is a good time to point out that the supervisor

181
00:06:56,066 --> 00:06:57,100
module itself

182
00:06:57,300 --> 00:06:59,533
has some handy functions worth keeping in your back

183
00:06:59,533 --> 00:07:01,133
pocket for example

184
00:07:01,433 --> 00:07:02,800
let's say we want to see which

185
00:07:02,833 --> 00:07:04,366
children it's supervising

186
00:07:04,700 --> 00:07:06,366
well we can use this supervisor module

187
00:07:06,366 --> 00:07:08,266
this isn't services supervisor

188
00:07:08,366 --> 00:07:10,766
this is just a built in supervisor module

189
00:07:10,900 --> 00:07:12,800
it has a function called witch children

190
00:07:14,500 --> 00:07:16,600
and then we pass it the pid of a supervisor

191
00:07:16,600 --> 00:07:18,133
well that's our sup of pid

192
00:07:18,966 --> 00:07:21,800
and we see that it has two children the sensor server

193
00:07:21,900 --> 00:07:23,633
here's the pid of that child

194
00:07:23,766 --> 00:07:24,600
it says worker

195
00:07:24,600 --> 00:07:25,600
and when you see worker

196
00:07:25,600 --> 00:07:28,333
it just means any process other than a supervisor

197
00:07:28,433 --> 00:07:30,100
and then we've got our pledge server it's

198
00:07:30,100 --> 00:07:31,633
pid and it's also a worker

199
00:07:32,066 --> 00:07:33,933
if you wanted you can also count the children

200
00:07:33,933 --> 00:07:36,533
just change which children to count children

201
00:07:36,900 --> 00:07:39,000
and we see that we have two workers

202
00:07:39,833 --> 00:07:41,733
so let's crash our sensor server

203
00:07:42,166 --> 00:07:43,566
yeah first we need to find it

204
00:07:43,566 --> 00:07:45,500
so we'll use that where is function

205
00:07:46,133 --> 00:07:48,133
and then we have our sensor server registered

206
00:07:48,133 --> 00:07:49,266
under sensor server

207
00:07:49,366 --> 00:07:50,833
that's going to return a pid

208
00:07:50,833 --> 00:07:52,833
and then this time I'm just going to use a pipe

209
00:07:52,833 --> 00:07:55,533
I'm going to pipe it into process exit

210
00:07:55,700 --> 00:07:57,233
because the first argument of that is a pig

211
00:07:57,266 --> 00:07:59,666
the second argument is the reason we want to exit

212
00:07:59,733 --> 00:08:01,266
and we'll use kaboom again

213
00:08:02,633 --> 00:08:06,366
perfect only that child process got restarted

214
00:08:06,400 --> 00:08:09,300
because we're using the one for one restart strategy

215
00:08:09,766 --> 00:08:10,966
and for good measure

216
00:08:10,966 --> 00:08:12,866
let's go ahead and crash the pledge server

217
00:08:13,000 --> 00:08:15,366
yeah we have it registered under pledge server

218
00:08:16,133 --> 00:08:17,433
so we'll kaboom it as well

219
00:08:17,966 --> 00:08:20,033
and we see that it gets restarted

220
00:08:20,166 --> 00:08:20,966
woo hoo

221
00:08:22,000 --> 00:08:22,666
now suppose

222
00:08:22,666 --> 00:08:24,633
we needed to configure the sensor server

223
00:08:24,633 --> 00:08:25,600
when it's started

224
00:08:25,600 --> 00:08:28,100
for example to set the refresh interval

225
00:08:28,333 --> 00:08:31,066
well since we're not starting the sensor server anymore

226
00:08:31,166 --> 00:08:33,100
that's now the supervisor's job

227
00:08:33,400 --> 00:08:36,400
this is where the start link argument comes in handy

228
00:08:36,866 --> 00:08:39,366
yeah we want to pass the refresh interval in here

229
00:08:39,366 --> 00:08:40,300
as this arc

230
00:08:40,566 --> 00:08:43,500
to do that we come back over to the services supervisor

231
00:08:43,633 --> 00:08:45,400
and you notice this list of children

232
00:08:45,400 --> 00:08:47,200
we're just using module names

233
00:08:47,200 --> 00:08:49,233
but another way to do this is to use a

234
00:08:49,233 --> 00:08:50,566
tuple the first

235
00:08:50,566 --> 00:08:53,133
element of the tuple is the module sensor server

236
00:08:53,333 --> 00:08:56,000
and then the second element is going to be an argument

237
00:08:56,033 --> 00:08:56,900
so in our case

238
00:08:56,900 --> 00:08:59,300
if we wanted it to be 60min refresh interval

239
00:08:59,366 --> 00:09:00,866
we could use 60

240
00:09:01,166 --> 00:09:02,533
but this could be any argument

241
00:09:02,533 --> 00:09:04,066
you could use a list here

242
00:09:04,066 --> 00:09:06,200
or a map or whatever you need

243
00:09:06,366 --> 00:09:08,533
to configure your server process

244
00:09:08,766 --> 00:09:11,566
so now 60 is going to get passed

245
00:09:11,800 --> 00:09:14,166
over to our sensor server as this argument

246
00:09:14,166 --> 00:09:15,766
so this is going to be interval

247
00:09:16,033 --> 00:09:17,166
and then we'll just print out

248
00:09:17,166 --> 00:09:18,566
starting the sensor server

249
00:09:19,066 --> 00:09:19,866
with

250
00:09:20,266 --> 00:09:23,533
interval and I'll say men refresh

251
00:09:24,933 --> 00:09:26,500
now we'll get a clean slate over here

252
00:09:29,166 --> 00:09:31,000
fire up our services supervisor

253
00:09:32,433 --> 00:09:34,700
and you see it says starting the sensor server with

254
00:09:34,733 --> 00:09:35,933
60min refresh

255
00:09:36,566 --> 00:09:38,400
now for this to actually work

256
00:09:38,466 --> 00:09:40,566
you would need to put the refresh interval

257
00:09:40,566 --> 00:09:43,833
in the state rather than just using a module attribute

258
00:09:43,833 --> 00:09:45,033
which is a constant

259
00:09:45,033 --> 00:09:47,200
but we'll leave that as an exercise for you

260
00:09:47,466 --> 00:09:49,433
the point is you can arrange things

261
00:09:49,433 --> 00:09:51,233
so that the supervisor passes

262
00:09:51,233 --> 00:09:53,066
whatever arguments are needed

263
00:09:53,066 --> 00:09:54,033
to its children

264
00:09:54,933 --> 00:09:57,000
so following the conventions gave us a quick wind

265
00:09:57,000 --> 00:09:59,400
but sometimes you want to color outside the lines

266
00:09:59,466 --> 00:10:00,600
don't understand how to do that

267
00:10:00,600 --> 00:10:01,866
let's dig a little deeper

268
00:10:02,200 --> 00:10:04,133
back over in our service to supervisor

269
00:10:04,266 --> 00:10:05,933
we initialize the supervisor

270
00:10:05,933 --> 00:10:07,466
with a list of children like this

271
00:10:07,966 --> 00:10:10,000
notice we didn't have to tell it how to start

272
00:10:10,000 --> 00:10:11,366
each child process

273
00:10:11,466 --> 00:10:12,533
so how does it know

274
00:10:13,300 --> 00:10:15,800
so check this out survey pledge server

275
00:10:15,800 --> 00:10:17,633
we know that that's a gen server

276
00:10:17,633 --> 00:10:20,700
and when a process uses the gen server behavior

277
00:10:20,933 --> 00:10:22,000
we've seen that some

278
00:10:22,000 --> 00:10:24,033
functions are automatically injected

279
00:10:24,033 --> 00:10:24,900
into the module

280
00:10:25,033 --> 00:10:25,700
well one of those

281
00:10:25,700 --> 00:10:27,900
functions that we haven't looked at yet is called

282
00:10:27,900 --> 00:10:28,800
child spec

283
00:10:30,266 --> 00:10:31,333
so by default

284
00:10:31,333 --> 00:10:34,300
when we give the supervisor a child module like this

285
00:10:34,433 --> 00:10:35,500
like pledge server

286
00:10:36,000 --> 00:10:38,166
well it calls the child spec function

287
00:10:38,166 --> 00:10:40,300
passing in an empty list just like this

288
00:10:40,866 --> 00:10:43,833
and that returns what's called a child specification

289
00:10:43,900 --> 00:10:45,400
which is an elixir map

290
00:10:45,400 --> 00:10:48,000
describing how the supervisor should start

291
00:10:48,200 --> 00:10:50,233
and supervise the child process

292
00:10:50,500 --> 00:10:52,200
you see it has an id here

293
00:10:52,233 --> 00:10:54,233
that's just set to serve pledge server

294
00:10:54,266 --> 00:10:56,733
and that's just used internally by the supervisor

295
00:10:56,800 --> 00:10:58,766
to identify this child

296
00:10:59,100 --> 00:11:00,700
it also has restart

297
00:11:00,833 --> 00:11:03,666
which indicates when a terminated child process

298
00:11:03,666 --> 00:11:04,900
should be restarted

299
00:11:05,100 --> 00:11:07,566
now permanent which is what it's set to right now

300
00:11:07,566 --> 00:11:11,100
by default means the child process is always restarted

301
00:11:11,300 --> 00:11:12,800
another option is temporary

302
00:11:12,800 --> 00:11:14,866
which indicates the child process should never

303
00:11:14,866 --> 00:11:17,300
be restarted it also has shut down

304
00:11:17,300 --> 00:11:19,200
which indicates how a child process should be

305
00:11:19,233 --> 00:11:21,266
terminated this is a timeout value

306
00:11:21,700 --> 00:11:23,800
we see it's got a type and that's a worker

307
00:11:23,833 --> 00:11:25,266
because this isn't a supervisor

308
00:11:25,266 --> 00:11:27,733
it's a regular gendered process

309
00:11:28,066 --> 00:11:30,200
and then here's the key to how it gets started

310
00:11:30,633 --> 00:11:34,066
we see that the start key has a value that's a tuple

311
00:11:34,533 --> 00:11:36,300
where the first element is the module

312
00:11:36,466 --> 00:11:38,300
the second element is the function

313
00:11:38,300 --> 00:11:39,100
to run

314
00:11:39,100 --> 00:11:41,566
and then the third element is a list of arguments

315
00:11:41,766 --> 00:11:43,966
well it's going to pass an empty list

316
00:11:43,966 --> 00:11:45,400
so the list of arguments

317
00:11:45,400 --> 00:11:47,200
is just one argument up by default

318
00:11:47,200 --> 00:11:48,866
which is an empty list itself

319
00:11:49,333 --> 00:11:51,666
so this is typically referred to as the mmafa

320
00:11:51,966 --> 00:11:53,433
module function

321
00:11:53,700 --> 00:11:54,700
and then the argument

322
00:11:55,033 --> 00:11:56,433
and given that information

323
00:11:56,500 --> 00:11:59,700
this supervisor knows how to start this child process

324
00:12:00,033 --> 00:12:01,833
you can think of a child spec as a

325
00:12:01,833 --> 00:12:05,066
recipe the supervisor uses to spawn its children

326
00:12:05,600 --> 00:12:07,400
now the default child specs work

327
00:12:07,400 --> 00:12:09,500
great for the purposes of our application

328
00:12:09,700 --> 00:12:11,233
but we'll give you some starting points

329
00:12:11,233 --> 00:12:13,466
so you know how to customize if need be

330
00:12:13,766 --> 00:12:15,500
for example what if you wanted to change

331
00:12:15,533 --> 00:12:18,333
restart from permanent to temporary

332
00:12:18,600 --> 00:12:19,866
well I'll just copy this out

333
00:12:20,666 --> 00:12:22,933
we'll come back over here we'll go to our pledge server

334
00:12:23,366 --> 00:12:24,366
and then when we use

335
00:12:24,400 --> 00:12:26,566
gen server we can tack on some options

336
00:12:26,566 --> 00:12:29,366
we're going to say restart is now temporary

337
00:12:30,033 --> 00:12:32,266
and by doing this we're going to override

338
00:12:32,433 --> 00:12:33,833
the default restart

339
00:12:33,833 --> 00:12:35,600
that's in the default child's back

340
00:12:35,833 --> 00:12:36,933
if we save that away

341
00:12:37,733 --> 00:12:40,400
come back over here and we reload

342
00:12:41,166 --> 00:12:42,700
survey pledge server

343
00:12:44,500 --> 00:12:46,033
and we look at its child spec again

344
00:12:46,066 --> 00:12:47,766
by calling that child spec function

345
00:12:48,566 --> 00:12:51,166
well look at that restart is now temporary

346
00:12:51,566 --> 00:12:52,900
now taking it a step further

347
00:12:52,900 --> 00:12:55,533
if you wanted to change a bunch of these defaults

348
00:12:55,566 --> 00:12:58,466
you can override the default child spec function

349
00:12:58,866 --> 00:13:00,433
so you can just take this map I'll just

350
00:13:00,466 --> 00:13:01,766
copy this whole thing here

351
00:13:02,366 --> 00:13:04,600
we'll come back over to our pledge server

352
00:13:05,233 --> 00:13:06,500
and then I'm going to remove this

353
00:13:06,500 --> 00:13:08,300
because I don't just want to override that

354
00:13:09,133 --> 00:13:11,633
and I'm going to define my own child spec function

355
00:13:11,800 --> 00:13:12,866
it's child spec

356
00:13:13,400 --> 00:13:14,433
it takes an org

357
00:13:14,566 --> 00:13:16,900
and then you just paste that map in just like that

358
00:13:17,033 --> 00:13:19,000
and change any of these values you want

359
00:13:19,433 --> 00:13:19,700
and then

360
00:13:19,700 --> 00:13:22,066
when the supervisor calls the child spec function

361
00:13:22,266 --> 00:13:24,166
well it'll get all your overrides

362
00:13:24,566 --> 00:13:25,700
armed with this knowledge

363
00:13:25,700 --> 00:13:28,066
you have a lot of flexibility when it comes to

364
00:13:28,066 --> 00:13:30,266
overriding the defaults for custom behavior

365
00:13:30,800 --> 00:13:32,766
now we don't need this level of customization

366
00:13:32,800 --> 00:13:34,766
so I'm just going to remove this before moving on

