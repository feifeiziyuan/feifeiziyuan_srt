1
00:00:00,266 --> 00:00:03,333
let's step back and squint at the code we have so far

2
00:00:03,933 --> 00:00:06,100
looking at this client server interaction

3
00:00:06,100 --> 00:00:08,000
we see two flavors of code

4
00:00:08,300 --> 00:00:10,166
code that's common to all messages

5
00:00:10,166 --> 00:00:12,166
and code that's specific to a message

6
00:00:12,533 --> 00:00:14,166
in terms of the client interface

7
00:00:14,166 --> 00:00:16,566
all three functions send a message to the server

8
00:00:16,566 --> 00:00:18,500
and then wait to receive a response

9
00:00:18,866 --> 00:00:21,500
the receive block at first appear specific

10
00:00:21,733 --> 00:00:23,766
but these variable names are arbitrary

11
00:00:23,933 --> 00:00:25,700
so we can make these blocks generic

12
00:00:25,700 --> 00:00:28,500
simply by renaming the variable to response

13
00:00:28,833 --> 00:00:29,366
now the

14
00:00:29,366 --> 00:00:30,800
only thing that specific to each

15
00:00:30,800 --> 00:00:32,400
function is the actual message

16
00:00:32,400 --> 00:00:33,200
that's sent

17
00:00:33,800 --> 00:00:34,166
now what

18
00:00:34,166 --> 00:00:35,800
about the code in the listen loop that

19
00:00:35,800 --> 00:00:37,900
runs in the server process well

20
00:00:37,900 --> 00:00:40,600
one thing to notice is that all expected messages have

21
00:00:40,600 --> 00:00:42,233
sender as the first element

22
00:00:43,000 --> 00:00:46,000
also each clause ends by doing the same two things

23
00:00:46,233 --> 00:00:49,033
they send a response message back to the sender

24
00:00:49,200 --> 00:00:51,566
and then recursively loop with the state

25
00:00:51,566 --> 00:00:53,533
to be used when handling the next message

26
00:00:54,133 --> 00:00:55,766
in the case of creating a pledge

27
00:00:55,766 --> 00:00:57,466
the response includes id

28
00:00:57,533 --> 00:00:59,900
and the state is the updated cash

29
00:01:00,366 --> 00:01:02,500
in the case of getting recent pledges

30
00:01:02,533 --> 00:01:04,200
the response includes the state

31
00:01:04,466 --> 00:01:05,966
which is the list of pledges

32
00:01:06,166 --> 00:01:07,600
and since the state didn't change

33
00:01:07,900 --> 00:01:10,533
the next iteration of the loop uses the current state

34
00:01:11,200 --> 00:01:13,500
and in the case of getting the total pledge

35
00:01:13,500 --> 00:01:15,633
the response includes the total amount

36
00:01:15,633 --> 00:01:17,266
and the state is unchanged

37
00:01:17,633 --> 00:01:18,866
now you can imagine that

38
00:01:18,900 --> 00:01:20,600
every time you introduce a new message

39
00:01:20,600 --> 00:01:23,866
you'll need to write more of this generic to handle

40
00:01:24,000 --> 00:01:26,766
the low level details of client server interaction

41
00:01:27,300 --> 00:01:29,300
but surely elixir wouldn't make us do that

42
00:01:29,866 --> 00:01:32,333
writing spadeful server processes like this is

43
00:01:32,333 --> 00:01:34,633
so common that there's actually an abstraction

44
00:01:35,033 --> 00:01:38,433
gen server which stands for generic server process

45
00:01:38,500 --> 00:01:40,333
encapsulates the generic code

46
00:01:40,333 --> 00:01:43,033
that's common to spadeful server processes

47
00:01:43,200 --> 00:01:44,100
and that way

48
00:01:44,166 --> 00:01:47,233
we can focus on writing the application specific code

49
00:01:47,766 --> 00:01:49,700
so we could convert our pledge server

50
00:01:49,700 --> 00:01:51,733
straight to a gen server at this point

51
00:01:51,866 --> 00:01:53,366
but if we make that leap

52
00:01:53,500 --> 00:01:55,333
gen server is going to film magical

53
00:01:55,566 --> 00:01:57,033
probably too magical

54
00:01:57,300 --> 00:01:58,033
yeah instead

55
00:01:58,033 --> 00:01:59,300
we want to refactor our

56
00:01:59,300 --> 00:02:01,366
code towards the gen server style

57
00:02:01,466 --> 00:02:04,233
and by the end a gen server will just sort of fall out

58
00:02:04,400 --> 00:02:05,266
and you'll have a better

59
00:02:05,366 --> 00:02:07,133
understanding of how it works under the hood

60
00:02:07,833 --> 00:02:09,866
let's start by removing the duplication

61
00:02:09,866 --> 00:02:11,933
in these client interface functions

62
00:02:12,266 --> 00:02:14,866
yeah we'll try to help our method that encapsulates to

63
00:02:14,866 --> 00:02:16,933
send and receive steps inside of these

64
00:02:17,433 --> 00:02:19,100
so I'm just going to go ahead and copy one of these

65
00:02:19,100 --> 00:02:20,000
and take it with us

66
00:02:20,566 --> 00:02:22,266
we're going to find a function down here

67
00:02:22,833 --> 00:02:26,266
called call think remote procedure call

68
00:02:26,266 --> 00:02:27,800
it's a synchronous request

69
00:02:27,866 --> 00:02:29,600
it sends a message to the server

70
00:02:29,600 --> 00:02:31,400
and then waits for our response

71
00:02:31,433 --> 00:02:34,833
and gender refers to synchronous requests as calls

72
00:02:34,866 --> 00:02:36,033
so we'll follow suit

73
00:02:36,433 --> 00:02:37,900
then just paste in that coat

74
00:02:38,333 --> 00:02:39,966
and let's make it more generic now

75
00:02:39,966 --> 00:02:41,700
so call is going to need to take a

76
00:02:41,700 --> 00:02:43,200
pid and a message

77
00:02:43,566 --> 00:02:45,233
and we're going to send to that pid

78
00:02:46,933 --> 00:02:49,500
the message so we can remove this specific message

79
00:02:49,500 --> 00:02:51,500
it's just going to be whatever message gets passed in

80
00:02:51,766 --> 00:02:53,800
and self must always be the first

81
00:02:53,800 --> 00:02:54,766
element of the message

82
00:02:54,766 --> 00:02:56,233
and this function takes care of

83
00:02:56,233 --> 00:02:58,066
making sure that's always true

84
00:02:58,400 --> 00:02:59,566
and then in the receive block

85
00:02:59,566 --> 00:03:01,366
we're going to tag the response as

86
00:03:01,366 --> 00:03:03,066
response which is an atom

87
00:03:03,133 --> 00:03:04,033
and then we're just going to bind

88
00:03:04,033 --> 00:03:05,566
the response to a generic variable

89
00:03:05,566 --> 00:03:07,266
we're just going to call response

90
00:03:09,100 --> 00:03:09,800
so now let's change

91
00:03:09,800 --> 00:03:11,600
the client interface functions to use

92
00:03:11,600 --> 00:03:13,133
our new call function

93
00:03:13,466 --> 00:03:15,700
so we'll start by removing this receive line

94
00:03:15,766 --> 00:03:17,566
I'll just remove that in all the functions

95
00:03:17,566 --> 00:03:18,966
because call does that for us

96
00:03:20,300 --> 00:03:21,500
and then instead of calling

97
00:03:21,500 --> 00:03:22,766
cind right here we want to call

98
00:03:22,766 --> 00:03:24,300
call and we'll pass it at name

99
00:03:24,300 --> 00:03:26,533
that's the pit of our server process

100
00:03:26,600 --> 00:03:27,900
and then in terms of the message

101
00:03:27,900 --> 00:03:29,000
we don't need to include

102
00:03:29,000 --> 00:03:30,500
self is the first element because the

103
00:03:30,500 --> 00:03:31,933
call function takes care of that

104
00:03:32,533 --> 00:03:33,966
okay and this message is a tootle

105
00:03:33,966 --> 00:03:35,533
so we've got curlies around it

106
00:03:35,533 --> 00:03:37,400
but we don't need curlies around these

107
00:03:37,400 --> 00:03:38,500
because they're just adams

108
00:03:38,500 --> 00:03:39,466
so I'll remove those

109
00:03:40,933 --> 00:03:42,666
now if we look down in the received block of

110
00:03:42,666 --> 00:03:43,700
mizzen loop down here

111
00:03:43,700 --> 00:03:44,600
you notice that

112
00:03:44,866 --> 00:03:46,333
this great pledge message

113
00:03:46,533 --> 00:03:48,933
well it's not in curly's but this one up here is

114
00:03:49,500 --> 00:03:51,700
so we need to make sure to nest this in curly's

115
00:03:51,700 --> 00:03:52,500
right down here

116
00:03:53,766 --> 00:03:55,100
save that away and if we run it

117
00:03:55,433 --> 00:03:56,833
well it works just like before

118
00:03:56,866 --> 00:03:58,466
but now we've removed the duplication

119
00:03:58,466 --> 00:04:00,133
in those climbed interface functions

120
00:04:00,900 --> 00:04:02,133
now down in the listen loop

121
00:04:02,133 --> 00:04:03,366
we want to separate the

122
00:04:03,366 --> 00:04:06,333
common code from the application specific code

123
00:04:06,600 --> 00:04:07,600
and to do that

124
00:04:07,733 --> 00:04:10,000
let's add a generic clause to the

125
00:04:10,000 --> 00:04:11,633
top of the received loop

126
00:04:11,633 --> 00:04:15,233
since all expected messages have the same basic pattern

127
00:04:15,533 --> 00:04:16,733
yeah they start with a sender

128
00:04:16,733 --> 00:04:18,266
and then there's the rest of the message

129
00:04:19,466 --> 00:04:22,100
in each claws ends by doing the same two things

130
00:04:22,566 --> 00:04:24,500
they send a response to the sender

131
00:04:24,866 --> 00:04:26,866
so it send sender

132
00:04:27,600 --> 00:04:28,900
and the message looks like this

133
00:04:29,100 --> 00:04:31,300
response and then there's some response

134
00:04:31,300 --> 00:04:32,300
associated with that

135
00:04:32,933 --> 00:04:35,133
and then they recursively call listen loop

136
00:04:35,933 --> 00:04:36,866
with the state

137
00:04:36,866 --> 00:04:39,166
to be used in the next iteration of the loop

138
00:04:39,766 --> 00:04:41,966
each clause also has message specific code

139
00:04:41,966 --> 00:04:43,366
so here's some message specific

140
00:04:43,366 --> 00:04:44,800
code for creating a pledge

141
00:04:45,333 --> 00:04:47,666
total pledges does a computation right there

142
00:04:48,066 --> 00:04:50,366
and we don't want any of that code in the receive loop

143
00:04:50,366 --> 00:04:52,000
we want the loop to be generic

144
00:04:52,433 --> 00:04:53,400
well that's no problem

145
00:04:53,700 --> 00:04:55,900
we know a way to conditionally run code

146
00:04:55,900 --> 00:04:57,466
based on pattern matches

147
00:04:57,533 --> 00:04:59,633
we can use multi clause functions

148
00:04:59,900 --> 00:05:01,733
yeah we'll put it below this listen loop

149
00:05:03,600 --> 00:05:06,733
and we'll name the functions handle underscore call

150
00:05:06,833 --> 00:05:08,833
because they handle the synchronous call

151
00:05:08,833 --> 00:05:10,133
we got from the client

152
00:05:10,400 --> 00:05:12,900
and then they're going to take two arguments a message

153
00:05:13,566 --> 00:05:14,433
and the state

154
00:05:14,833 --> 00:05:15,700
and we're going to need a

155
00:05:15,700 --> 00:05:18,733
function clause like this for every specific message

156
00:05:18,933 --> 00:05:21,933
so let's start from the bottom and work our way up 1st

157
00:05:21,933 --> 00:05:24,766
we need a handle call function clause that matches

158
00:05:24,833 --> 00:05:25,933
total pledges

159
00:05:26,433 --> 00:05:27,733
so that's going to be the message

160
00:05:28,333 --> 00:05:29,433
I'll just paste that there

161
00:05:29,966 --> 00:05:32,033
and then we'll take the message specific code

162
00:05:34,100 --> 00:05:36,000
and paste it in as the body of the function

163
00:05:36,433 --> 00:05:38,266
and now this function returns the total

164
00:05:38,266 --> 00:05:40,100
which is the response that we want to send

165
00:05:40,100 --> 00:05:41,600
back to the client process

166
00:05:42,133 --> 00:05:44,900
so now if we go back up into our generic claws here

167
00:05:45,433 --> 00:05:47,533
what we need to do is invoke handle call

168
00:05:49,400 --> 00:05:51,366
pass it the message in the current state

169
00:05:51,866 --> 00:05:52,866
it's going to return

170
00:05:52,866 --> 00:05:54,800
the thing that we should send back to the client

171
00:05:54,800 --> 00:05:55,800
so we're going to bind that

172
00:05:55,800 --> 00:05:57,566
to a variable called response

173
00:05:57,666 --> 00:05:59,600
and then we include the response in the message

174
00:05:59,600 --> 00:06:00,400
right there

175
00:06:00,700 --> 00:06:03,266
now you notice we just passed this part of the message

176
00:06:03,266 --> 00:06:03,900
into handle call

177
00:06:03,900 --> 00:06:05,566
we didn't have to pass the sender in

178
00:06:05,766 --> 00:06:07,666
because the sender is used on the line

179
00:06:07,766 --> 00:06:10,266
after handle call to send back to the sender

180
00:06:10,333 --> 00:06:12,900
so all handle call needs is this part of the message

181
00:06:13,466 --> 00:06:16,133
so now we can remove this clause for total pledges

182
00:06:16,400 --> 00:06:18,666
because the generic clause takes care of that

183
00:06:19,500 --> 00:06:21,233
next we need a function clause that

184
00:06:21,233 --> 00:06:23,533
matches the recent pledges message

185
00:06:24,033 --> 00:06:25,400
all right we'll copy that message

186
00:06:27,500 --> 00:06:29,433
at a handle call function clause

187
00:06:29,433 --> 00:06:30,633
that's going to be the message

188
00:06:31,000 --> 00:06:31,600
also has to take the

189
00:06:31,600 --> 00:06:32,400
state

190
00:06:32,800 --> 00:06:34,500
so what's the response in this case

191
00:06:34,500 --> 00:06:36,533
well the client wants the recent pledges

192
00:06:36,533 --> 00:06:38,633
so we just return the entire state

193
00:06:38,666 --> 00:06:40,766
that's the response we want to send back to the client

194
00:06:41,100 --> 00:06:43,533
and now we can remove the recent pledges claws

195
00:06:43,533 --> 00:06:45,100
because our generic claws at the top

196
00:06:45,100 --> 00:06:46,166
is going to take care of that

197
00:06:46,933 --> 00:06:47,500
and then last

198
00:06:47,500 --> 00:06:49,000
but not least we need a

199
00:06:49,000 --> 00:06:51,433
third function clause that matches the create

200
00:06:51,433 --> 00:06:52,400
pledge message

201
00:06:53,733 --> 00:06:54,533
all right

202
00:06:55,633 --> 00:06:56,466
handle call

203
00:06:57,400 --> 00:06:58,366
there's the message

204
00:06:58,533 --> 00:06:59,400
there's the state

205
00:06:59,833 --> 00:07:01,600
then I'm going to go back up and get the message

206
00:07:01,600 --> 00:07:02,433
specific code

207
00:07:02,433 --> 00:07:04,766
it's everything before the send

208
00:07:05,033 --> 00:07:06,066
so I'll just copy that

209
00:07:11,333 --> 00:07:13,366
okay so what's the response in this case

210
00:07:13,500 --> 00:07:15,433
well we want to return this id

211
00:07:15,733 --> 00:07:16,866
that id is bound

212
00:07:16,866 --> 00:07:19,400
as a result of calling this sin pledge to service

213
00:07:19,400 --> 00:07:20,700
so it's whatever id

214
00:07:20,866 --> 00:07:22,633
the external service sent back to us

215
00:07:23,100 --> 00:07:25,033
so we'll just put that on the last line the function

216
00:07:25,133 --> 00:07:26,366
and then it'll get returned

217
00:07:26,666 --> 00:07:27,633
and then that id

218
00:07:27,866 --> 00:07:29,800
will be part of the response that sent back

219
00:07:29,800 --> 00:07:30,600
to the client

220
00:07:31,000 --> 00:07:34,033
and then we can remove that clause in our received loop

221
00:07:34,600 --> 00:07:36,366
because our generic clause is taking care of that one

222
00:07:36,366 --> 00:07:37,166
now too

223
00:07:39,633 --> 00:07:40,900
okay so let's run it

224
00:07:41,766 --> 00:07:43,800
well that's not quite right

225
00:07:43,933 --> 00:07:44,500
we see

226
00:07:44,500 --> 00:07:47,866
that the pledges were created in the external service

227
00:07:48,066 --> 00:07:51,066
but our cash is empty and our total is zero

228
00:07:51,566 --> 00:07:53,066
and that's because create

229
00:07:53,100 --> 00:07:55,900
pledge transforms the current state

230
00:07:56,066 --> 00:07:57,300
into a new state

231
00:07:57,866 --> 00:07:59,333
but the generic clause

232
00:07:59,333 --> 00:08:01,700
is always recurring with the current state

233
00:08:02,066 --> 00:08:04,666
yeah if handle call updates the state

234
00:08:04,866 --> 00:08:06,100
that gets passed to it

235
00:08:06,233 --> 00:08:08,833
then we need to recurs with that new state

236
00:08:09,400 --> 00:08:10,200
so we'll change

237
00:08:10,200 --> 00:08:13,433
handle call to always return two things in a tuple

238
00:08:13,766 --> 00:08:14,133
the first

239
00:08:14,133 --> 00:08:16,000
thing will be the response that we want to send back

240
00:08:16,000 --> 00:08:16,866
to the client

241
00:08:16,866 --> 00:08:17,633
and the second

242
00:08:17,633 --> 00:08:18,333
thing will be

243
00:08:18,333 --> 00:08:20,233
the new state that we want to recurs with

244
00:08:21,166 --> 00:08:23,900
so we need to change state here to new state

245
00:08:24,500 --> 00:08:25,300
now for that to work

246
00:08:25,300 --> 00:08:26,500
we need to change our function

247
00:08:26,500 --> 00:08:28,200
claws down here to return

248
00:08:28,300 --> 00:08:30,566
two things the first thing is going to be the id

249
00:08:30,566 --> 00:08:32,733
that's the response we want to send back to the client

250
00:08:33,033 --> 00:08:34,866
but we also want to return the new state

251
00:08:35,666 --> 00:08:36,933
so we're returning a tuple there

252
00:08:37,400 --> 00:08:39,900
that way when we transform the state to the new state

253
00:08:40,066 --> 00:08:41,166
we return that back

254
00:08:41,800 --> 00:08:42,533
in the same way

255
00:08:42,533 --> 00:08:44,666
we need to return a two element tuple in the

256
00:08:44,666 --> 00:08:45,566
other handle call

257
00:08:45,566 --> 00:08:46,733
function clauses

258
00:08:47,400 --> 00:08:48,800
so for total pledged

259
00:08:48,900 --> 00:08:51,166
we want to send back the total to the client

260
00:08:51,300 --> 00:08:53,466
and then we were going to recurs with the state

261
00:08:53,466 --> 00:08:54,700
because we haven't changed the state

262
00:08:54,800 --> 00:08:57,033
we're just going to return the existing state

263
00:08:57,566 --> 00:08:59,200
and then for recent pledges

264
00:08:59,266 --> 00:09:00,333
we want to return

265
00:09:00,466 --> 00:09:01,766
this state to the client

266
00:09:01,766 --> 00:09:03,700
because the state has all the pledges and

267
00:09:03,700 --> 00:09:05,533
they're asking for all the recent pledges

268
00:09:05,566 --> 00:09:07,466
and we also want to re curse with that state

269
00:09:07,733 --> 00:09:08,766
so this tuple has

270
00:09:08,900 --> 00:09:10,366
two elements that are both state

271
00:09:11,400 --> 00:09:12,533
save it away and run it

272
00:09:12,933 --> 00:09:14,233
hey and that now works

273
00:09:15,266 --> 00:09:17,433
now we commented out the line that has

274
00:09:17,433 --> 00:09:19,000
our unexpected message

275
00:09:19,033 --> 00:09:21,933
if we put that back in now and run it

276
00:09:22,866 --> 00:09:24,200
well we get an error

277
00:09:24,700 --> 00:09:27,666
right it says there's no function claws matching

278
00:09:28,000 --> 00:09:30,366
it's trying to call the handle call function

279
00:09:30,500 --> 00:09:31,566
with hammer time

280
00:09:32,066 --> 00:09:34,700
well that's because this message is going to match our

281
00:09:34,700 --> 00:09:36,200
generic message claws

282
00:09:36,200 --> 00:09:39,333
it thinks this is the sender and this is the message

283
00:09:40,100 --> 00:09:42,700
so up here if we look at our generic claws again

284
00:09:43,233 --> 00:09:46,833
so this pattern is going to match stop

285
00:09:47,266 --> 00:09:48,033
hammer time

286
00:09:48,033 --> 00:09:49,766
and this is going to try to call handle call

287
00:09:49,766 --> 00:09:50,600
with hammer time

288
00:09:50,600 --> 00:09:51,800
which is why we get that air

289
00:09:51,800 --> 00:09:54,966
there's no function claws that matches that message

290
00:09:55,533 --> 00:09:58,033
so to fix this we're going to add a guard claws

291
00:09:58,033 --> 00:09:59,333
to this pattern right here

292
00:09:59,366 --> 00:10:02,133
I'm going to say when is pid sender

293
00:10:02,466 --> 00:10:05,033
so that's saying this should only match

294
00:10:05,200 --> 00:10:08,066
if whatever is in the first element of this tuple

295
00:10:08,233 --> 00:10:11,966
is a pid we use the stupid function and pass in sender

296
00:10:12,000 --> 00:10:13,366
that way it won't match

297
00:10:13,466 --> 00:10:16,366
stop the atom that we have in our unexpected message

298
00:10:16,433 --> 00:10:18,266
it will only match if this is a pid

299
00:10:19,700 --> 00:10:20,766
and now that works

300
00:10:21,633 --> 00:10:23,500
now there may be situations in your app

301
00:10:23,500 --> 00:10:26,166
where you want to send a message to a server process

302
00:10:26,166 --> 00:10:27,933
but you don't need to wait for a reply

303
00:10:28,466 --> 00:10:29,900
basically you want to fire off

304
00:10:29,900 --> 00:10:32,466
a message to the server and then forget about it

305
00:10:32,966 --> 00:10:35,066
so let's look at a simple example for now

306
00:10:35,333 --> 00:10:37,533
later we'll look at a more involved example

307
00:10:37,966 --> 00:10:40,766
let's suppose we want the option of being able to clear

308
00:10:40,766 --> 00:10:43,933
out the cash so we could call like a clear function

309
00:10:45,200 --> 00:10:47,200
yeah let's assume we have a pledge server

310
00:10:47,600 --> 00:10:48,833
clear function like that

311
00:10:49,300 --> 00:10:50,533
so let's go ahead and implement that

312
00:10:50,533 --> 00:10:51,733
client interface function

313
00:10:51,733 --> 00:10:52,966
I'll put it right up here

314
00:10:57,666 --> 00:10:59,200
so all it needs to do is send

315
00:10:59,666 --> 00:11:02,300
to our server process the message clear

316
00:11:02,866 --> 00:11:05,366
and in contrast to the other client interface functions

317
00:11:05,400 --> 00:11:06,633
clear is a synchronous

318
00:11:06,633 --> 00:11:08,933
it just fires off a message to the server and

319
00:11:09,000 --> 00:11:11,200
since it doesn't need to wait for a response

320
00:11:11,300 --> 00:11:12,933
it returns almost immediately

321
00:11:13,366 --> 00:11:15,366
now you can imagine a scenario where you have

322
00:11:15,366 --> 00:11:16,066
more than one

323
00:11:16,066 --> 00:11:18,266
function that simply sends a message like this

324
00:11:18,466 --> 00:11:21,466
so in the same way that we wrote a call helper function

325
00:11:21,566 --> 00:11:23,600
that encapsulates synchronous requests

326
00:11:23,933 --> 00:11:24,500
similarly

327
00:11:24,500 --> 00:11:26,666
we can write a helper function that encapsulates

328
00:11:26,666 --> 00:11:27,866
a synchronous request

329
00:11:28,100 --> 00:11:29,066
just for symmetry

330
00:11:29,933 --> 00:11:31,033
so I'm going to put a comment here

331
00:11:31,033 --> 00:11:32,400
here are helper functions

332
00:11:33,866 --> 00:11:35,433
and down below call

333
00:11:36,200 --> 00:11:37,533
will define a new function

334
00:11:37,833 --> 00:11:39,333
I'm going to call it cast

335
00:11:39,766 --> 00:11:42,233
think of this like casting the message to the wind

336
00:11:42,366 --> 00:11:43,966
it's an e synchronous request

337
00:11:43,966 --> 00:11:45,500
it sends a message to the server

338
00:11:45,533 --> 00:11:47,500
and doesn't expect a response

339
00:11:47,566 --> 00:11:49,800
so it's going to take a pid and a message

340
00:11:50,966 --> 00:11:52,100
and this is going to send

341
00:11:52,833 --> 00:11:54,200
the message to that pit

342
00:11:55,200 --> 00:11:58,233
then we can change clear to instead of calling send

343
00:11:58,233 --> 00:12:00,200
it's just going to call cast

344
00:12:00,766 --> 00:12:02,200
now that didn't buy us much

345
00:12:02,200 --> 00:12:04,566
other than some renaming and some cemetery

346
00:12:04,600 --> 00:12:06,233
but hang with us for a minute

347
00:12:06,766 --> 00:12:08,100
then in our received block

348
00:12:08,100 --> 00:12:09,766
we can handle that clear message

349
00:12:09,766 --> 00:12:10,733
I'll put it right here

350
00:12:11,500 --> 00:12:12,300
clear

351
00:12:12,633 --> 00:12:13,700
and all we need to do is

352
00:12:13,700 --> 00:12:15,433
reset the state to an empty list

353
00:12:15,433 --> 00:12:16,366
so the new state

354
00:12:16,900 --> 00:12:18,533
is just going to be an empty list like that

355
00:12:18,700 --> 00:12:20,800
and then we need to recurs with that new state

356
00:12:21,166 --> 00:12:23,966
the client doesn't expect a response so we don't send

357
00:12:24,033 --> 00:12:24,833
anything back

358
00:12:25,133 --> 00:12:26,866
so if we say that away and we run it

359
00:12:27,133 --> 00:12:27,966
while it works

360
00:12:27,966 --> 00:12:29,300
now our recent pledges

361
00:12:29,333 --> 00:12:31,466
just includes grace because we cleared it

362
00:12:31,533 --> 00:12:32,600
and everything else was gone

363
00:12:32,600 --> 00:12:34,933
and then we added grace to the recent pledges

364
00:12:35,766 --> 00:12:37,700
but suppose you have more than one of these

365
00:12:37,700 --> 00:12:39,800
and you want a generic way to handle a

366
00:12:39,800 --> 00:12:41,233
synchronous messages

367
00:12:41,400 --> 00:12:42,366
well to do that

368
00:12:42,433 --> 00:12:45,433
let's add another generic clause to the receive loop

369
00:12:46,366 --> 00:12:49,600
and the message pattern here will never have a sender

370
00:12:49,633 --> 00:12:50,566
just a message

371
00:12:52,000 --> 00:12:53,766
an asynchronous message clauses

372
00:12:53,766 --> 00:12:55,500
only need to recursively call

373
00:12:55,500 --> 00:12:57,066
listen loop with the state

374
00:12:57,966 --> 00:13:00,466
we'll take care of the message specific code in another

375
00:13:00,466 --> 00:13:01,800
multi clause function

376
00:13:01,866 --> 00:13:03,800
which will name handle cast

377
00:13:05,166 --> 00:13:07,100
because it handles a synchronous request

378
00:13:07,100 --> 00:13:08,066
sent by the client

379
00:13:08,600 --> 00:13:11,100
it needs to take a message in the current state

380
00:13:11,500 --> 00:13:13,000
and then return the new state

381
00:13:15,333 --> 00:13:17,433
then it's going to recurs with that new state

382
00:13:18,100 --> 00:13:19,566
so unlike handle call

383
00:13:19,666 --> 00:13:20,133
handle

384
00:13:20,133 --> 00:13:23,133
cast doesn't need to return a response for the client

385
00:13:23,300 --> 00:13:24,866
because the client doesn't expect one

386
00:13:25,666 --> 00:13:27,733
so now let's define handle cast

387
00:13:30,766 --> 00:13:32,966
we only have one cast message to handle

388
00:13:32,966 --> 00:13:34,933
so we only need one function claws

389
00:13:35,000 --> 00:13:36,233
the message is clear

390
00:13:37,366 --> 00:13:38,900
then the second argument is state

391
00:13:39,100 --> 00:13:40,233
but we're not going to use the state

392
00:13:40,233 --> 00:13:41,366
so I'm going to use underscore state

393
00:13:41,366 --> 00:13:42,500
so we don't get a warning

394
00:13:42,633 --> 00:13:45,033
and then all we need to do is return the new state

395
00:13:45,066 --> 00:13:47,200
well that's just an empty list in this case

396
00:13:47,833 --> 00:13:49,866
so now we can remove this claws

397
00:13:49,866 --> 00:13:51,566
because our generic claws right here

398
00:13:51,733 --> 00:13:52,533
handles that

399
00:13:53,200 --> 00:13:54,866
so now if we save that away and we run it

400
00:13:55,600 --> 00:13:57,000
oh we get another error

401
00:13:57,100 --> 00:13:59,200
it's the no function claws matching error

402
00:13:59,200 --> 00:14:01,766
but this time is trying to call handle cast

403
00:14:01,766 --> 00:14:03,233
with stop hammer time

404
00:14:03,633 --> 00:14:05,566
and that's because stop hammer time

405
00:14:05,700 --> 00:14:08,500
will match this pattern right here message

406
00:14:08,600 --> 00:14:09,633
because it's just a variable

407
00:14:09,633 --> 00:14:10,633
it's going to soak up

408
00:14:10,666 --> 00:14:12,266
whatever message we get right here

409
00:14:12,866 --> 00:14:15,100
remember patterns are matched top to bottom

410
00:14:15,133 --> 00:14:17,800
and all unexpected messages are going to get matched

411
00:14:17,800 --> 00:14:20,366
too early by this pattern message

412
00:14:21,000 --> 00:14:24,200
so we need a way to match call and cast messages

413
00:14:24,200 --> 00:14:25,000
but then let

414
00:14:25,366 --> 00:14:28,133
everything else fall through to the unexpected clause

415
00:14:28,600 --> 00:14:29,133
to do that

416
00:14:29,133 --> 00:14:31,700
we're going to tag the messages as either being a call

417
00:14:31,700 --> 00:14:33,933
or a cast and we'll do that by adding an

418
00:14:33,933 --> 00:14:35,633
element to the message tuple

419
00:14:35,633 --> 00:14:38,133
so we'll have the atom call right there

420
00:14:39,066 --> 00:14:42,000
and we'll have the atom cast inside of this tuple

421
00:14:43,033 --> 00:14:44,033
now for this to work

422
00:14:44,033 --> 00:14:47,366
the client must send messages with these tags

423
00:14:47,800 --> 00:14:48,600
well that's no problem

424
00:14:48,600 --> 00:14:49,433
because we already have

425
00:14:49,433 --> 00:14:51,933
these helper functions call encase

426
00:14:51,933 --> 00:14:53,000
that are used

427
00:14:53,000 --> 00:14:55,666
by the client interface functions to send messages

428
00:14:55,900 --> 00:14:56,833
so in call

429
00:14:57,200 --> 00:15:00,233
we just add the atom call right there to that message

430
00:15:00,300 --> 00:15:02,800
and in cast will change its message

431
00:15:02,900 --> 00:15:04,466
to automatically tag those

432
00:15:05,533 --> 00:15:06,800
so now cast is

433
00:15:06,900 --> 00:15:08,266
actually pulling some weight

434
00:15:08,333 --> 00:15:10,133
by tagging the messages for us

435
00:15:10,733 --> 00:15:12,500
yeah and what's nice is we don't have to change

436
00:15:12,600 --> 00:15:14,533
any of these client interface functions

437
00:15:14,800 --> 00:15:15,466
because the call

438
00:15:15,500 --> 00:15:17,833
and cast helper functions do the tagging

439
00:15:18,233 --> 00:15:21,433
if we save that away it should work and indeed it does

440
00:15:22,200 --> 00:15:23,300
so let's step back

441
00:15:23,333 --> 00:15:25,866
and separate what's generic to all

442
00:15:25,900 --> 00:15:28,666
server processes and what's specific to this

443
00:15:28,700 --> 00:15:30,633
particular server process

444
00:15:30,966 --> 00:15:32,866
yeah let's just go ahead and start at the top here

445
00:15:33,400 --> 00:15:36,066
so these client interface functions right here

446
00:15:36,133 --> 00:15:37,933
are specific to pledging

447
00:15:38,166 --> 00:15:40,066
but these helper functions down here

448
00:15:40,300 --> 00:15:41,433
while they're generic

449
00:15:41,566 --> 00:15:44,133
they're used by the client interface functions to send

450
00:15:44,133 --> 00:15:45,733
call or cast messages

451
00:15:45,833 --> 00:15:48,266
so let's go ahead and move these into a new module

452
00:15:49,433 --> 00:15:50,700
and I'm just going to put it at the top

453
00:15:50,700 --> 00:15:51,333
of the file here

454
00:15:51,333 --> 00:15:53,633
just so it's easier to run inside of sublime

455
00:15:54,233 --> 00:15:56,166
and we're going to call the module survey

456
00:15:56,700 --> 00:15:57,766
generic server

457
00:15:58,333 --> 00:15:59,466
and I'll just paste in

458
00:15:59,466 --> 00:16:00,700
those helper functions

459
00:16:01,900 --> 00:16:03,033
then down in pledge server

460
00:16:03,033 --> 00:16:04,933
we're going to alias that module in

461
00:16:07,500 --> 00:16:09,933
and then down in our client interface functions

462
00:16:09,933 --> 00:16:11,966
where we have the call right here

463
00:16:13,000 --> 00:16:15,800
well that's just going to be generic server

464
00:16:15,833 --> 00:16:16,300
call now

465
00:16:16,300 --> 00:16:18,233
because that's where the call function is defined

466
00:16:18,633 --> 00:16:20,466
in the same way for cast

467
00:16:21,400 --> 00:16:23,800
we're called generic server cast

468
00:16:24,166 --> 00:16:25,766
if we save that away and we run it

469
00:16:26,000 --> 00:16:28,600
well no surprise it works just as it did before

470
00:16:29,400 --> 00:16:31,600
next up is this listen loop right here

471
00:16:32,500 --> 00:16:33,800
and it's also generic

472
00:16:33,800 --> 00:16:34,500
there's nothing

473
00:16:34,500 --> 00:16:36,800
application specific about this code at all

474
00:16:37,033 --> 00:16:39,200
the application specific code

475
00:16:39,366 --> 00:16:41,266
lives in these multi clause functions

476
00:16:41,266 --> 00:16:43,066
handle call and handle cast

477
00:16:43,400 --> 00:16:46,866
you'd need to include this generic loop function in

478
00:16:46,900 --> 00:16:47,933
one form or another

479
00:16:48,033 --> 00:16:50,266
when writing any server process

480
00:16:50,366 --> 00:16:51,700
so let's go ahead and move it

481
00:16:51,700 --> 00:16:53,533
into the generic server module as well

482
00:16:57,900 --> 00:17:00,233
so now when listen loop receives a message

483
00:17:00,233 --> 00:17:03,200
it needs to invoke the corresponding handle call

484
00:17:03,200 --> 00:17:04,833
or handle cast function

485
00:17:05,033 --> 00:17:07,666
that's in the pledge server module so this needs to be

486
00:17:07,966 --> 00:17:08,766
survey

487
00:17:10,033 --> 00:17:11,800
handle call in the same way

488
00:17:12,066 --> 00:17:14,766
we need to call handle cast on that module

489
00:17:15,600 --> 00:17:17,733
now going back down to our pledge server module

490
00:17:17,733 --> 00:17:18,866
what else could we move

491
00:17:19,166 --> 00:17:20,933
well with a couple minor changes

492
00:17:20,933 --> 00:17:23,100
we could move this start function

493
00:17:23,200 --> 00:17:24,300
of to our generic server

494
00:17:24,300 --> 00:17:25,466
I'm just going to copy it

495
00:17:25,866 --> 00:17:27,100
and we'll paste it up here

496
00:17:28,200 --> 00:17:29,300
we'll remove this first

497
00:17:29,300 --> 00:17:31,266
io dot put us because we're not starting the pledge

498
00:17:31,266 --> 00:17:32,666
server this is more generic

499
00:17:32,900 --> 00:17:33,833
and since this

500
00:17:33,933 --> 00:17:35,233
underscore underscore module

501
00:17:35,233 --> 00:17:37,333
underscore underscore will expand

502
00:17:37,433 --> 00:17:39,633
to the current module which would be serviced

503
00:17:39,633 --> 00:17:41,133
generic server in this case

504
00:17:41,366 --> 00:17:43,833
well this line is going to go ahead and spawn

505
00:17:44,100 --> 00:17:45,600
the listen loop that we have to find

506
00:17:45,600 --> 00:17:46,733
inside this module

507
00:17:47,333 --> 00:17:48,333
so that's all good

508
00:17:48,566 --> 00:17:52,133
but this at name is specific to a process

509
00:17:52,166 --> 00:17:53,366
and this initial state

510
00:17:53,400 --> 00:17:54,966
which in this case is an empty list

511
00:17:54,966 --> 00:17:56,666
is specific to a process

512
00:17:56,866 --> 00:17:58,666
so to make this start function generic

513
00:17:58,666 --> 00:18:00,266
we're going to need to pass in these two things

514
00:18:00,266 --> 00:18:02,966
as argument so we'll pass in the initial state

515
00:18:03,466 --> 00:18:04,500
it's the first argument

516
00:18:04,533 --> 00:18:05,966
and then the second one will be the name

517
00:18:06,833 --> 00:18:08,833
and then we'll substitute here instead of an empty list

518
00:18:08,833 --> 00:18:10,000
it's going to be initial state

519
00:18:11,600 --> 00:18:12,033
and then

520
00:18:12,033 --> 00:18:14,433
instead of using at name we're just going to use name

521
00:18:15,366 --> 00:18:18,300
then down in the start function of our plug server

522
00:18:18,333 --> 00:18:20,666
right here we don't have to do this stuff anymore

523
00:18:20,766 --> 00:18:23,066
we can just call generic server start

524
00:18:23,433 --> 00:18:26,500
and then pass in this process's initial state

525
00:18:27,000 --> 00:18:28,900
which is an empty list and then the name

526
00:18:28,933 --> 00:18:30,266
which we have in at name

527
00:18:30,933 --> 00:18:32,033
save that away and run it

528
00:18:32,366 --> 00:18:33,666
and that works just the same

529
00:18:34,566 --> 00:18:35,466
and now everything

530
00:18:35,466 --> 00:18:38,166
else in pledge server is specific to pledging

531
00:18:38,566 --> 00:18:40,300
but if we go back to our

532
00:18:40,333 --> 00:18:42,866
generic server and look in the listen loop

533
00:18:43,033 --> 00:18:45,266
well we've hard coated pledge server

534
00:18:45,433 --> 00:18:48,566
to truly be generic generic servers should work with

535
00:18:48,600 --> 00:18:49,266
any module

536
00:18:49,266 --> 00:18:52,000
as long as that module implements the two functions

537
00:18:52,000 --> 00:18:54,200
handle call and handle cast

538
00:18:54,533 --> 00:18:57,200
we want the generic server to call back

539
00:18:57,300 --> 00:18:59,433
to our pledge server module to run

540
00:18:59,433 --> 00:19:01,366
the application specific code

541
00:19:01,666 --> 00:19:03,766
in other words pledge server

542
00:19:03,900 --> 00:19:06,300
is to be our callback module

543
00:19:07,066 --> 00:19:09,366
we'll have a variable called callback module that

544
00:19:09,366 --> 00:19:11,166
holds onto that callback module

545
00:19:11,300 --> 00:19:12,100
and then we'll call

546
00:19:12,100 --> 00:19:14,766
handle cast and handle call on that module

547
00:19:15,400 --> 00:19:17,766
so how are we going to feed this callback module

548
00:19:17,866 --> 00:19:19,066
into the generic server

549
00:19:19,300 --> 00:19:21,800
well first down in our start function here

550
00:19:22,566 --> 00:19:25,200
when we start the generic server we need to tell it

551
00:19:25,200 --> 00:19:28,333
which module implements the callback functions

552
00:19:28,400 --> 00:19:30,900
and we'll pass the callback module as the first

553
00:19:30,900 --> 00:19:31,700
argument

554
00:19:32,300 --> 00:19:32,966
now the callback

555
00:19:32,966 --> 00:19:35,066
module that implements the callback functions

556
00:19:35,066 --> 00:19:36,033
is this module

557
00:19:36,033 --> 00:19:37,333
it's the pledge server module

558
00:19:37,333 --> 00:19:38,966
so we can use this trick again

559
00:19:40,366 --> 00:19:42,400
so we're telling the generic server

560
00:19:42,433 --> 00:19:44,433
that we are the current module

561
00:19:44,433 --> 00:19:45,900
the pledge server module

562
00:19:46,200 --> 00:19:47,666
where the callback module

563
00:19:48,200 --> 00:19:49,166
now for that to work

564
00:19:49,166 --> 00:19:50,000
we need to change

565
00:19:50,000 --> 00:19:51,233
the start function up here

566
00:19:51,233 --> 00:19:52,366
in generic server to

567
00:19:52,366 --> 00:19:54,900
take that callback module as the first argument

568
00:19:57,100 --> 00:19:59,200
and then ultimately we need to pass it down to this

569
00:19:59,200 --> 00:20:03,133
listen loop we'll remember the third argument to spawn

570
00:20:03,533 --> 00:20:06,366
is a list of arguments to send to

571
00:20:06,533 --> 00:20:07,900
the function that's getting spawned

572
00:20:07,900 --> 00:20:09,300
in this case it's listen loop

573
00:20:09,533 --> 00:20:10,300
so right now

574
00:20:10,300 --> 00:20:12,533
listen loop just takes one argument the initial state

575
00:20:12,766 --> 00:20:14,566
but we can pass it a second argument that's

576
00:20:14,566 --> 00:20:15,933
going to be our callback module

577
00:20:16,433 --> 00:20:17,766
then down in listen loop

578
00:20:18,200 --> 00:20:19,533
we'll have callback module there

579
00:20:21,100 --> 00:20:22,233
and since this function now

580
00:20:22,233 --> 00:20:23,500
takes two arguments we know

581
00:20:23,500 --> 00:20:25,100
we're going to have to recurs with those same

582
00:20:25,100 --> 00:20:26,033
two arguments

583
00:20:26,200 --> 00:20:28,333
so we're going to have callback module passed there

584
00:20:29,200 --> 00:20:30,933
there and also there

585
00:20:31,700 --> 00:20:33,266
save that away and run it

586
00:20:33,566 --> 00:20:35,266
hey cool that works too

587
00:20:35,600 --> 00:20:36,400
who

588
00:20:37,133 --> 00:20:39,566
so now generic server encapsulates all

589
00:20:39,566 --> 00:20:42,700
the generic code that's common to server processes

590
00:20:42,900 --> 00:20:44,600
it relies on a callback module

591
00:20:44,600 --> 00:20:46,233
such as the pled server module

592
00:20:46,333 --> 00:20:48,866
to implement the application specific code

593
00:20:48,966 --> 00:20:52,466
in the callback functions handle call and handles

594
00:20:52,733 --> 00:20:54,433
so down here in our pledge server

595
00:20:54,433 --> 00:20:55,833
we can change this comment

596
00:20:55,833 --> 00:20:56,800
server right here

597
00:20:57,000 --> 00:20:58,433
to server callbacks

598
00:20:58,466 --> 00:21:00,966
because these are just callbacks that are called by

599
00:21:00,966 --> 00:21:02,166
our generic server

600
00:21:02,733 --> 00:21:03,833
and now we're in a great

601
00:21:03,833 --> 00:21:06,866
position to start using the gen server abstraction

602
00:21:07,100 --> 00:21:08,266
and it's up next

