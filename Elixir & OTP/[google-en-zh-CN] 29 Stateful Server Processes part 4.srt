1
00:00:00,433 --> 00:00:03,466
记得回到本节的开头
remember way back at the beginning of this section

2
00:00:03,466 --> 00:00:05,633
我们向您介绍了质押控制器
we introduced you to a pledge controller

3
00:00:05,866 --> 00:00:07,033
好吧，它现在应该可以工作了
well it should now work

4
00:00:07,233 --> 00:00:08,966
因为我们已经实现了 create
because we've implemented create

5
00:00:09,033 --> 00:00:11,433
承诺和最近的承诺
pledge and recent pledges

6
00:00:12,066 --> 00:00:13,300
所以我重新启动了它
so I've restarted it

7
00:00:13,300 --> 00:00:15,500
只是为了在这里得到一个完全干净的石板
just to get a totally clean slate here

8
00:00:15,500 --> 00:00:16,633
我们将从
and we're going to start by

9
00:00:16,833 --> 00:00:18,566
启动我们的质押服务器
firing up our pledge server

10
00:00:19,966 --> 00:00:21,566
我们将使用我们方便的启动功能
we'll use our handy start function

11
00:00:22,266 --> 00:00:24,166
好的，这会产生一个过程
all right and that gets spawned into a process

12
00:00:24,166 --> 00:00:25,733
已处理一六十五
it's processed one sixty five

13
00:00:26,033 --> 00:00:28,500
然后我们需要启动我们的http服务器
and then we need to start up our http server

14
00:00:30,633 --> 00:00:32,700
我会像往常一样从 4000 端口开始
I'll start on port 4000 as usual

15
00:00:32,700 --> 00:00:34,066
现在当我们在这里调用开始时
now when we call start here

16
00:00:34,100 --> 00:00:35,766
这不会产生一个进程
this doesn't spawn a process

17
00:00:35,766 --> 00:00:39,266
请记住，它只是为每个请求生成进程
remember it just spawns processes for each request

18
00:00:39,566 --> 00:00:41,700
所以这会束缚性，但没关系
so this is going to tie up sex but that's okay

19
00:00:42,533 --> 00:00:44,300
现在在一个单独的终端选项卡中
now over in a separate terminal tab

20
00:00:44,300 --> 00:00:46,500
我们将使用 curl 发送一些请求
we'll use curl to send some requests

21
00:00:47,133 --> 00:00:48,600
所以我们要发送的第一个请求
so the first request we're going to send to

22
00:00:48,600 --> 00:00:49,400
削减承诺
slash pledges

23
00:00:49,400 --> 00:00:50,433
这将是一个 git 请求
it's going to be a git request

24
00:00:50,433 --> 00:00:52,500
所以这将兑现我们最近的承诺
so this is going to return our recent pledges

25
00:00:52,533 --> 00:00:54,200
现在它只是一个空列表
and right now it's just an empty list

26
00:00:54,800 --> 00:00:56,300
好吧，让我们创建一些承诺
all right so let's create some pledges

27
00:00:56,300 --> 00:00:57,400
我要再次使用 curl
I'm going to use curl again

28
00:00:58,400 --> 00:01:00,233
我将使用 x post 选项
I'm going to use the x post option

29
00:01:00,400 --> 00:01:03,466
将此数据作为发布请求发布
to post this data as a post request

30
00:01:03,900 --> 00:01:05,133
削减承诺
to slash pledges

31
00:01:05,133 --> 00:01:07,000
这将由 crate 动作处理
and that's going to get handled by the crate action

32
00:01:07,000 --> 00:01:08,233
我们的质押控制器
of our pledge controller

33
00:01:08,800 --> 00:01:11,066
太阳能将承诺 100 美元
solar is going to pledge $100

34
00:01:11,366 --> 00:01:14,300
然后我们将承诺 200 美元
and then we'll have mo pledged $200

35
00:01:16,133 --> 00:01:17,900
curly会承诺300
curly's gonna pledge 300

36
00:01:20,233 --> 00:01:23,733
黛西一旦参加了她会给我们400的行动
daisy once in on the action she's gonna give us 400

37
00:01:25,333 --> 00:01:27,800
但不甘示弱
but not to be outdone as grace and

38
00:01:27,800 --> 00:01:29,033
她给了我们五个
she's giving us five

39
00:01:29,033 --> 00:01:31,833
我们可能会得到一两条鳄鱼
and we might just get ourselves an alligator or two

40
00:01:32,600 --> 00:01:34,766
酷现在让我们看看我们最近的承诺
cool now let's have a look at our recent pledges

41
00:01:35,300 --> 00:01:37,366
我们有我们最近的三个承诺
and we've got our three most recent pledges

42
00:01:38,666 --> 00:01:40,400
回顾我们的质押服务器模块
looking back at our pledge server module

43
00:01:40,400 --> 00:01:41,433
我们现在有五个
we now have five

44
00:01:41,433 --> 00:01:43,033
这一模块中的功能
functions in this one module

45
00:01:43,033 --> 00:01:45,366
重要的是要注意这些函数运行在
and it's important to note that these functions run in

46
00:01:45,366 --> 00:01:46,500
不同的过程
different processes

47
00:01:46,633 --> 00:01:48,766
这个启动函数被调用
this start function is called

48
00:01:48,766 --> 00:01:51,466
由客户端生成服务器进程
by the client to spawn the server process

49
00:01:51,833 --> 00:01:52,766
然后这个创建
then this create

50
00:01:52,766 --> 00:01:55,433
这里的承诺和最近的承诺功能是
pledge and recent pledges functions down here are

51
00:01:55,466 --> 00:01:56,833
也被客户端调用
also called by the client

52
00:01:56,866 --> 00:01:59,033
它们在客户端进程中运行
and they run in the client process

53
00:01:59,200 --> 00:02:00,433
所以让我们真正抓住那些
so let's actually grab those

54
00:02:00,433 --> 00:02:02,766
我们会将所有客户端功能一起移动
and we'll move all the client functions together

55
00:02:02,966 --> 00:02:05,733
我会像这样把这些放在开始
I'll put these up under start just like that

56
00:02:06,000 --> 00:02:07,800
然后让我们在这里添加评论
and then let's add a comment up here

57
00:02:08,066 --> 00:02:11,000
所有这些都是客户端接口功能
all of these are client interface functions

58
00:02:11,900 --> 00:02:14,233
现在这里的监听循环不同了
now this listen loop down here is different

59
00:02:14,666 --> 00:02:16,200
它被 spawn 调用
it's called by spawn

60
00:02:16,200 --> 00:02:19,333
这意味着它在这个生成服务器进程中运行
which means it runs in this spawn server process

61
00:02:19,500 --> 00:02:21,000
所以让我们在这里添加评论
so let's add a comment up here

62
00:02:21,066 --> 00:02:23,133
下面的所有内容都在服务器中运行
everything below here is run in the server

63
00:02:23,566 --> 00:02:24,000
首先
at first

64
00:02:24,000 --> 00:02:26,966
单个模块可以有可能看起来很奇怪
it might seem strange that a single module can have

65
00:02:27,000 --> 00:02:29,866
在不同的进程中运行不同的功能
different functions running in different processes

66
00:02:30,066 --> 00:02:30,633
并且真的
and in really

67
00:02:30,633 --> 00:02:33,300
您可能想要分开的复杂案例
complex cases you might want to separate

68
00:02:33,333 --> 00:02:35,266
您的客户端和服务器功能
your client and server functions

69
00:02:35,266 --> 00:02:36,700
分成两个独立的模块
into two separate modules

70
00:02:37,333 --> 00:02:39,766
但它实际上很常见并且可以接受
but it's actually quite common and acceptable to have

71
00:02:39,766 --> 00:02:42,166
同一模块中的两种功能
both types of functions in the same module

72
00:02:42,466 --> 00:02:43,700
因为毕竟
because after all

73
00:02:44,000 --> 00:02:46,466
模块只是功能的桶
modules are just buckets for functions

74
00:02:47,066 --> 00:02:48,400
看看我们必须做什么
to see what we would have to do

75
00:02:48,400 --> 00:02:50,700
在客户端和服务端实现一个新的
in the client and the server to implement a new

76
00:02:50,700 --> 00:02:52,733
消息让我们假设我们想要得到
message let's suppose we want to get the

77
00:02:52,733 --> 00:02:54,833
最近认捐总额
total amount of the recent pledges

78
00:02:55,200 --> 00:02:56,300
我们可以做到这一点
we could do that by having

79
00:02:56,300 --> 00:02:57,200
客户得到
the client get the

80
00:02:57,200 --> 00:02:58,200
最近的承诺
recent pledges

81
00:02:58,200 --> 00:03:00,566
然后在客户端进程中汇总它们
and then total them up in the client process

82
00:03:00,700 --> 00:03:02,733
但服务器进程可以做更多
but the server process can do more

83
00:03:02,733 --> 00:03:04,166
而不是简单地存储状态
than simply store state

84
00:03:04,533 --> 00:03:05,900
它实际上可以工作
it can actually do work

85
00:03:06,500 --> 00:03:08,366
这是正确的，只是为了证明这一点
that's right and just to demonstrate that

86
00:03:08,366 --> 00:03:10,000
我们将拥有服务器进程
we'll have the server process

87
00:03:10,000 --> 00:03:11,366
做那个计算
do that computation

88
00:03:11,766 --> 00:03:12,933
所以在底部
so down at the bottom here

89
00:03:12,933 --> 00:03:14,766
我们将再次梳理这段代码
we'll uncombed this code again

90
00:03:14,766 --> 00:03:15,833
因为我们想运行它
because we want to run it

91
00:03:16,166 --> 00:03:18,566
我们将在底部添加一条线
we're going to add a line down at the bottom

92
00:03:18,766 --> 00:03:20,733
我们希望我们的客户端界面看起来像这样
we want our client interface to look like this

93
00:03:22,200 --> 00:03:25,566
p 服务器我们要调用一个函数 total 质押
p server we want to call a function total pledged

94
00:03:26,800 --> 00:03:28,100
那应该返回总数
and that should return the total

95
00:03:28,100 --> 00:03:29,933
然后我们使用检查来检查它
and then we use inspect just to inspect it

96
00:03:30,300 --> 00:03:31,100
所以要让它发挥作用
so to make that work

97
00:03:31,100 --> 00:03:33,566
我们需要定义这个客户端接口函数
we need to define this client interface function

98
00:03:33,566 --> 00:03:36,133
我们将在客户端界面下执行此操作
we'll do that up here under client interface

99
00:03:36,166 --> 00:03:38,500
我只是要复制这个给我们一个良好的开端
I'm just going to copy this one to give us a head start

100
00:03:41,300 --> 00:03:43,033
所以这可以称为总质押
so this can be called total pledged

101
00:03:43,800 --> 00:03:45,166
它将发送到服务器
it's going to send to the server

102
00:03:45,566 --> 00:03:46,700
它需要回复
it needs a reply back

103
00:03:46,700 --> 00:03:48,500
所以它在消息中包含 self
so it includes self in the message

104
00:03:48,766 --> 00:03:49,566
然后
and then the

105
00:03:49,566 --> 00:03:52,966
atom 或此处的消息将被完全承诺
atom or the message here is going to be total pledged

106
00:03:53,200 --> 00:03:54,733
它会模仿函数名
it'll mimic the function name

107
00:03:54,733 --> 00:03:57,166
函数名不一定是真的
that doesn't have to be true that the function name

108
00:03:57,333 --> 00:03:59,766
与消息相同，但这样做很常见
is the same as the message but it's common to do that

109
00:04:00,266 --> 00:04:02,400
然后响应将发回总数
and then the response is going to send back the total

110
00:04:02,400 --> 00:04:04,100
所以这将是总数
so this is going to be the total

111
00:04:04,133 --> 00:04:04,600
我们只是
and we just

112
00:04:04,600 --> 00:04:06,766
提取它并从函数中返回它
extract that and return it from the function

113
00:04:07,266 --> 00:04:09,766
与其他客户端接口功能非常相似
so similar to the other client interface functions

114
00:04:09,766 --> 00:04:11,333
这个函数是同步的
this function is synchronous

115
00:04:11,333 --> 00:04:13,233
它期待来自服务器的回复
it expects a reply from the server

116
00:04:13,533 --> 00:04:15,100
然后我们需要处理消息
then we need to handle the message

117
00:04:15,100 --> 00:04:16,566
在服务器进程中
in the server process

118
00:04:16,566 --> 00:04:18,366
我们需要在这里添加一个爪子
we need to add a claws down here

119
00:04:18,933 --> 00:04:20,700
消息的模式是发件人
the pattern of the message is sender

120
00:04:21,333 --> 00:04:23,533
并且消息是完全承诺的
and the message is total pledged

121
00:04:25,100 --> 00:04:26,566
我们知道我们将不得不发送
and we know we're going to have to send

122
00:04:26,566 --> 00:04:27,766
回寄件人
back to the sender

123
00:04:28,500 --> 00:04:29,766
看起来像这样的消息
a message that looks like this

124
00:04:29,766 --> 00:04:32,333
响应和我们计算的任何总数
response and whatever total we compute

125
00:04:32,533 --> 00:04:34,166
然后我们将不得不重复
and then we're going to have to recurs

126
00:04:35,466 --> 00:04:37,966
以现有状态传递的监听循环
listen loop passing in the existing state

127
00:04:37,966 --> 00:04:39,366
因为我们不会改变状态
because we're not going to change the state

128
00:04:39,833 --> 00:04:41,566
那么服务器要做什么
so what's the work the server is going to do

129
00:04:41,566 --> 00:04:43,500
好吧，我只需要计算这个总数
well I just need to compute this total

130
00:04:44,233 --> 00:04:45,533
现在有几种不同的方法可以做到这一点
now there are a couple different ways to do this

131
00:04:45,533 --> 00:04:47,366
如果你愿意，你可以使用 reduce
you could use reduce if you wanted to

132
00:04:47,366 --> 00:04:48,433
但我要使用地图
but I'm going to use map

133
00:04:49,433 --> 00:04:50,933
所以我要采取我们的状态
so I'm going to take our state

134
00:04:51,200 --> 00:04:53,333
记住我们的状态是一个元组列表
and remember our state is a list of tuples

135
00:04:53,366 --> 00:04:54,666
首先是名字
where the first thing is the name

136
00:04:54,666 --> 00:04:55,933
第二件事
and the second thing

137
00:04:56,233 --> 00:04:57,800
是金额
is the amount

138
00:04:58,066 --> 00:05:00,400
还有一个叫做 lm 的长生不老药的功能
and there's a function that elixir called lm

139
00:05:00,500 --> 00:05:01,800
它需要倾倒
and it takes a topple

140
00:05:01,866 --> 00:05:03,366
我就叫它一秒钟
I'll just call that t for a second

141
00:05:03,700 --> 00:05:06,266
然后它需要你想要得到的索引
and then it takes the index that you want to get

142
00:05:06,266 --> 00:05:07,633
并且有从零开始的索引
and there's zero based index

143
00:05:07,633 --> 00:05:09,066
所以这个会得名
so this one would get the name

144
00:05:09,800 --> 00:05:11,366
这个会得到金额
this one would get the amount

145
00:05:11,600 --> 00:05:12,833
但要与地图一起使用
but to use that with map

146
00:05:12,866 --> 00:05:14,133
我们需要捕获函数
we need to capture the function

147
00:05:14,133 --> 00:05:15,700
所以我们用来捕获操作员
so we used to capture operator

148
00:05:15,766 --> 00:05:16,266
我们想要
and we wanted

149
00:05:16,266 --> 00:05:18,833
把倒塌传给我们，所以这将是
to pass us the topple so this is going to be

150
00:05:19,100 --> 00:05:20,066
与号一
ampersand one

151
00:05:20,566 --> 00:05:22,600
地图将调用此函数
maps going to call this function

152
00:05:22,766 --> 00:05:24,766
列表中的每个元素和
with every element in the list and

153
00:05:25,166 --> 00:05:26,400
每个元素都是一个元组
every element is a tuple

154
00:05:26,466 --> 00:05:28,566
所以我们将元组作为第一个参数传入
so we pass the tuple in as the first argument

155
00:05:28,633 --> 00:05:31,300
然后我们想要金额，所以我们在那里传递一个
and then we want the amount so we pass in one there

156
00:05:31,800 --> 00:05:34,033
所以这会给我们一个清单
so that's going to give us a list of

157
00:05:34,433 --> 00:05:37,966
那么我们可以通过管道输入的所有金额
all the amounts that then we can pipe into e nous

158
00:05:40,000 --> 00:05:42,500
所以这对服务器来说不是很辛苦的工作
so this isn't very hard work for the server to do

159
00:05:42,700 --> 00:05:44,833
但这是工作的一个例子
but it's an example of work

160
00:05:45,200 --> 00:05:47,400
服务器进程现在正在存储状态
the server process is now storing state

161
00:05:47,700 --> 00:05:50,066
并对该状态执行计算
and performing computations on that state

162
00:05:50,166 --> 00:05:51,066
我们把它存起来
we save that away

163
00:05:51,533 --> 00:05:54,300
果然，我们得到一个总数，它是 120
well sure enough we get a total and it's 120

164
00:05:54,833 --> 00:05:57,233
所以我们在接收循环中有几个模式
so we have several patterns in the receive loop

165
00:05:57,233 --> 00:05:59,900
但是如果我们的服务器收到一条消息会发生什么
but what happens if our server receives a message

166
00:05:59,933 --> 00:06:02,100
与这些模式中的任何一个都不匹配
that doesn't match any of these patterns

167
00:06:02,333 --> 00:06:04,833
我们有发送的客户端接口函数
we have client interface functions that send

168
00:06:04,833 --> 00:06:06,433
预期消息
expected messages

169
00:06:06,566 --> 00:06:09,233
但有人可能会向我们发送意想不到的信息
but someone could send us an unexpected message

170
00:06:09,833 --> 00:06:12,466
是的，在底部证明这一点
yeah to demonstrate that down at the bottom here

171
00:06:13,533 --> 00:06:15,433
好吧，我们可以发送到那个坑
well we could just send to that pit

172
00:06:15,433 --> 00:06:17,033
因为开始回坑
because start returns to the pit

173
00:06:17,033 --> 00:06:18,800
我们只会给它发送消息
and we'll just send it the message

174
00:06:18,800 --> 00:06:19,866
哦，这是一个两极
oh it's a two pole

175
00:06:19,933 --> 00:06:22,066
第一个元素停止，第二个是
first element stop and the second one is

176
00:06:22,300 --> 00:06:23,133
锤击时间
hammer time

177
00:06:23,866 --> 00:06:24,733
然后在最后
then at the end

178
00:06:25,400 --> 00:06:30,266
我们将使用 io 并检查进程消息
we'll use io and we'll inspect the processes messages

179
00:06:30,900 --> 00:06:33,266
所以这就是这样的pid消息
so this would be the pid messages just like that

180
00:06:33,600 --> 00:06:35,300
如果我们把它保存起来并运行它
if we save that away and run it

181
00:06:35,600 --> 00:06:36,600
当我们看到最后
while we see at the end

182
00:06:36,600 --> 00:06:39,000
消息包括停止锤子时间
the messages include stop hammer time

183
00:06:39,400 --> 00:06:40,066
所以因为没有
so because none

184
00:06:40,066 --> 00:06:41,500
匹配的模式
of the patterns matched

185
00:06:41,500 --> 00:06:43,100
然后意外的消息只是
then the unexpected message just

186
00:06:43,100 --> 00:06:45,200
作为邮箱在这个过程中徘徊
hangs around in the process as mailbox

187
00:06:45,500 --> 00:06:48,000
所以为了避免像这样弄乱邮箱
so to avoid cluttering the mailbox like this

188
00:06:48,100 --> 00:06:50,033
这最终会影响性能
which can ultimately impact performance

189
00:06:50,166 --> 00:06:52,800
在最后添加一个模式是个好主意
it's a good idea to add a pattern at the end

190
00:06:52,800 --> 00:06:54,733
这将匹配所有消息
that will match all messages

191
00:06:55,233 --> 00:06:56,666
我们在接收到的块中完成
we do that up in the received block

192
00:06:56,666 --> 00:06:58,866
这将是这里的最后一个模式
and it's going to be the last pattern here

193
00:06:59,166 --> 00:07:01,166
我们将使用意想不到的
and we'll just use unexpected

194
00:07:01,300 --> 00:07:02,466
这是一个变量
that's a variable

195
00:07:02,800 --> 00:07:05,500
所以这将匹配任何通过的消息
so that's going to match any message that falls through

196
00:07:06,000 --> 00:07:07,366
然后我们就打印出来
and then we'll just print out

197
00:07:08,633 --> 00:07:10,000
意外消息
unexpected message

198
00:07:12,466 --> 00:07:15,766
然后我们将调用检查该意外消息
and then we'll call inspect on that unexpected message

199
00:07:16,266 --> 00:07:18,466
所以我们基本上只是记录意外消息
so we're basically just logging the unexpected message

200
00:07:18,466 --> 00:07:19,433
然后我们必须记住
and then we have to remember

201
00:07:19,700 --> 00:07:21,133
最后调用监听循环
to call listen loop at the end

202
00:07:22,033 --> 00:07:25,000
所以这可以保证匹配所有意外的消息
so this is guaranteed to match all unexpected messages

203
00:07:25,233 --> 00:07:26,966
因为这是最后的爪子
because it's the last claws

204
00:07:27,033 --> 00:07:28,733
因为我们只是在这里使用变量
and because we just use the variable here

205
00:07:28,866 --> 00:07:31,166
它只会吸收任何消息模式
it's just going to soak up any message pattern

206
00:07:31,433 --> 00:07:32,900
现在如果我们把它保存起来并运行它
now if we save that away and run it

207
00:07:33,233 --> 00:07:36,200
看来我们看到意外消息停止锤子时间
well appear we see unexpected message stop hammer time

208
00:07:36,466 --> 00:07:36,766
但是之后
but then

209
00:07:36,766 --> 00:07:38,666
稍后我们偷看邮箱时
when we peek in the mailbox a little bit later on

210
00:07:38,766 --> 00:07:39,933
没有消息
there are no messages

211
00:07:40,700 --> 00:07:42,800
所以这里有一些重要的事情要记住
so here's something important to keep in mind

212
00:07:42,900 --> 00:07:45,000
想象一下我们的网络服务器有五个
imagine our web server gets five

213
00:07:45,033 --> 00:07:47,333
创建质押的并发请求
concurrent requests to create a pledge

214
00:07:47,600 --> 00:07:49,333
这导致五个创建
this results in five create

215
00:07:49,333 --> 00:07:50,466
承诺信息
pledge messages

216
00:07:50,466 --> 00:07:53,266
被发送到我们的单一质押服务器进程
being sent to our single pledge server process

217
00:07:53,666 --> 00:07:55,233
记得虽然收到
remember though that receive

218
00:07:55,500 --> 00:07:57,866
总是一次处理一条消息
always handles messages one at a time

219
00:07:58,466 --> 00:07:59,733
所以虽然每个请求
so although each request

220
00:07:59,733 --> 00:08:02,433
同时运行并且可能并行运行
runs concurrently and likely in parallel

221
00:08:02,600 --> 00:08:04,000
消息处理是
message handling is

222
00:08:04,066 --> 00:08:06,866
始终在服务器进程中进行消毒，并且
always sterilized in the server process and

223
00:08:06,866 --> 00:08:09,266
因为这样的服务器进程是
as such server processes are

224
00:08:09,266 --> 00:08:11,933
应用程序中的同步点
synchronization points in an application

225
00:08:12,400 --> 00:08:14,766
现在最初这似乎不是最佳的
now initially this might seem sub optimal

226
00:08:14,933 --> 00:08:16,166
但这正是
but it's exactly how

227
00:08:16,166 --> 00:08:18,433
我们希望管理服务器状态
we want the server state to be managed

228
00:08:18,533 --> 00:08:21,866
你能想象有多个并发进程吗
can you imagine having multiple concurrent processes

229
00:08:21,866 --> 00:08:24,700
所有人都试图在同一时间更新现金
all trying to update the cash at exactly the same time

230
00:08:25,033 --> 00:08:26,833
这对所有人都是免费的
it would be a free for all

231
00:08:27,133 --> 00:08:29,566
现金很可能会腐败
and the cash would likely become corrupted

232
00:08:30,000 --> 00:08:31,500
所以虽然看起来服务器
so while it appears that the server

233
00:08:31,500 --> 00:08:33,266
过程只是存储状态
process is simply storing state

234
00:08:33,400 --> 00:08:35,133
它实际上做的不止这些
it's actually doing more than that

235
00:08:35,333 --> 00:08:37,033
通过消毒访问
by sterilizing access

236
00:08:37,033 --> 00:08:39,500
它正在维护该州的完整性
it's preserving the integrity of that state

237
00:08:39,833 --> 00:08:43,233
同时来自多个并发进程的负载不足
while underload from multiple concurrent processes

238
00:08:43,633 --> 00:08:45,766
所以现在我们知道如何存储一个简单的状态
so now we know how to store a simple state

239
00:08:45,766 --> 00:08:47,533
在一个服务器进程中，可以
in a server process that can

240
00:08:47,600 --> 00:08:48,733
也做其他工作
also do other work

241
00:08:49,133 --> 00:08:49,966
在下一节
in the next section

242
00:08:49,966 --> 00:08:52,833
我们将看看如何使服务器代码更通用
we'll look at how to make the server code more generic

243
00:08:52,833 --> 00:08:54,900
我们正在前往 gen 服务器的路上
and we're on our way to a gen server

