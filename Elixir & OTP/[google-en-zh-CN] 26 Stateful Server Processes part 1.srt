1
00:00:00,300 --> 00:00:02,033
假设我们正在运行一个承诺驱动器
let's say we're running a pledge drive

2
00:00:02,066 --> 00:00:04,700
在我们的避难所建造鳄鱼沼泽
to build a crocodile swamp on our refuge

3
00:00:04,733 --> 00:00:07,266
哎呀，我希望我们不会吸引锁定怪物
gee I hope we don't attract a lock ness monster

4
00:00:08,133 --> 00:00:10,433
人们会承诺很多
people would pledge a lot to see that

5
00:00:10,800 --> 00:00:13,566
无论如何，我们的服务器将如何处理承诺
in any event how's our server going to handle pledges

6
00:00:14,000 --> 00:00:15,633
很好地创造一个承诺
well to create a pledge

7
00:00:15,633 --> 00:00:17,866
姓名和金额将发送到我们的服务器
a name and an amount will be sent to our server

8
00:00:17,866 --> 00:00:19,033
作为发布请求
as a post request

9
00:00:19,433 --> 00:00:21,133
我们将该请求路由到创建
we'll route that request to the create

10
00:00:21,133 --> 00:00:22,766
质押控制人的行动
action of a pledge controller

11
00:00:22,766 --> 00:00:23,700
这将反过来
which will in turn

12
00:00:23,766 --> 00:00:26,900
将质押信息发送到外部服务
send the pledge information to an external service

13
00:00:27,000 --> 00:00:29,100
通过它的 api 因为
via its api because

14
00:00:29,166 --> 00:00:31,766
毕竟我们正忙着经营一个野生动物保护区
after all we're busy running a wildlife refuge

15
00:00:31,766 --> 00:00:33,533
也懒得处理所有
and can't be bothered to handle all

16
00:00:33,533 --> 00:00:35,266
承诺驱动的复杂性
the intricacies of a pledge drive

17
00:00:35,366 --> 00:00:37,433
你知道像管理用户帐户
you know like managing user accounts

18
00:00:37,466 --> 00:00:39,133
向信用卡等收费
charging credit cards and the like

19
00:00:39,533 --> 00:00:42,033
所以我们会让外部服务处理所有这些
so we'll let the external service handle all of those

20
00:00:42,066 --> 00:00:45,000
细节然后我们什么时候想要得到所有的承诺
details then when we want to get all the pledges

21
00:00:45,000 --> 00:00:47,100
我们将向我们的服务器发送一个获取请求
we'll send a get request to our server

22
00:00:47,500 --> 00:00:48,566
我们将路由该请求
we'll route that request

23
00:00:48,566 --> 00:00:50,833
质押控制器的索引动作
to the index action of the pledge controller

24
00:00:50,866 --> 00:00:51,933
这将转身
which will turn around

25
00:00:51,933 --> 00:00:54,566
并从外部服务获取承诺
and fetch the pledges from the external service

26
00:00:54,966 --> 00:00:55,166
但
but

27
00:00:55,166 --> 00:00:57,400
假设我们只对显示这三个感兴趣
suppose we're only interested in displaying the three

28
00:00:57,400 --> 00:00:58,700
最近的承诺
most recent pledges

29
00:00:58,733 --> 00:01:00,233
不是所有的承诺
not all the pledges

30
00:01:00,400 --> 00:01:02,700
好，而不是打外部服务
well rather than hitting the external service

31
00:01:02,733 --> 00:01:05,200
每次我们想显示最近的承诺
every time we want to display recent pledges

32
00:01:05,200 --> 00:01:07,300
我们将创建一个内存现金
we'll create an in memory cash

33
00:01:07,633 --> 00:01:09,066
何时创建承诺
when pledges are created

34
00:01:09,066 --> 00:01:11,800
将它们全部发送到外部服务
will send them all to the external service

35
00:01:11,833 --> 00:01:15,266
但只保留最近的三个现金
but only keep a cash of the three most recent ones

36
00:01:15,533 --> 00:01:17,166
所以当一个新的承诺出现时
so when a new pledge comes in

37
00:01:17,333 --> 00:01:19,000
我们将取消最古老的承诺
we'll bump the oldest pledge out of

38
00:01:19,000 --> 00:01:22,466
现金并添加最新的现金并这样做
the cash and add the newest one in and in doing so

39
00:01:22,733 --> 00:01:24,366
只保留最近的三个
only keep the most recent three

40
00:01:24,933 --> 00:01:27,100
然后当要求最近的承诺时
then when the recent pledges are requested

41
00:01:27,266 --> 00:01:29,433
我们将直接从现金中退回
we'll return them straight from the cash

42
00:01:29,900 --> 00:01:32,800
现在我们已经知道如何处理 git 和 post 请求了
now we already know how to handle git and post request

43
00:01:32,800 --> 00:01:34,633
我们在之前的模块中已经做到了
we've done that in previous modules

44
00:01:34,800 --> 00:01:37,333
所以我们已经准备好代码让我们领先一步
so we've prepared that code to give us a head start

45
00:01:37,966 --> 00:01:40,933
在处理程序 ex 中，我们定义了两条新路线
in handler ex we've defined two new routes

46
00:01:41,100 --> 00:01:43,833
所以如果我们收到一个关于承诺的帖子请求
so if we get a post request for pledges

47
00:01:44,033 --> 00:01:44,866
我们要委托
we're going to delegate

48
00:01:44,866 --> 00:01:47,200
到质押控制器的 crate 操作
to the crate action of a pledge controller

49
00:01:47,633 --> 00:01:49,500
如果我们收到一个获取 slash 承诺的请求
and if we get a get request for slash pledges

50
00:01:49,500 --> 00:01:51,333
我们将委托给那个 index 动作
we're going to delegate to the index action of that

51
00:01:51,333 --> 00:01:52,366
同质押控制器
same pledge controller

52
00:01:52,933 --> 00:01:54,800
我们继续创建了质押控制器
and we went ahead and created the pledge controller

53
00:01:54,800 --> 00:01:57,100
你在这里看到它的承诺控制器前
you see it over here pledge controller ex

54
00:01:57,166 --> 00:01:59,400
它有一个 crate 动作和一个 index 动作
it has a crate action and an index action

55
00:01:59,533 --> 00:02:01,300
crate 动作只是捕获
the crate action just captures the

56
00:02:01,300 --> 00:02:02,900
名称和挂载参数
name and the mount parameters

57
00:02:03,033 --> 00:02:05,233
然后它需要发送该质押信息
and then it needs to send that pledge information

58
00:02:05,366 --> 00:02:07,500
到外部服务并兑现
to the external service and also cash it

59
00:02:07,700 --> 00:02:09,466
所以我们将在一个名为
so we'll do that in a function called

60
00:02:09,466 --> 00:02:10,400
创建承诺通知
create pledge notice

61
00:02:10,400 --> 00:02:12,600
它需要两个参数名称的数量
it takes two arguments the name in the amount

62
00:02:12,900 --> 00:02:14,700
然后在响应正文中我们只是说
and then in the response body we just say

63
00:02:14,866 --> 00:02:16,666
无论金额是多少，都承诺的名字
name pledged whatever the amount is

64
00:02:17,433 --> 00:02:19,766
然后在索引动作中我们需要得到原因
then in the index action we need to get the reason

65
00:02:19,766 --> 00:02:21,166
现金认捐
pledges from the cash

66
00:02:21,266 --> 00:02:22,433
我们将在一个函数中做到这一点
we're going to do that in a function

67
00:02:22,433 --> 00:02:23,766
称为最近的承诺
called recent pledges

68
00:02:23,833 --> 00:02:25,166
回报那些承诺
the returns those pledges

69
00:02:25,166 --> 00:02:26,533
然后我们只是检查它们
and then we just inspect them

70
00:02:26,766 --> 00:02:28,266
并将它们放入响应正文中
and put them in the response body

71
00:02:28,833 --> 00:02:29,933
所以我们需要定义两个
so we need to define two

72
00:02:29,933 --> 00:02:32,100
函数创建质押函数和
functions this create pledge function and

73
00:02:32,100 --> 00:02:33,500
近期认捐功能
recent pledges function

74
00:02:33,633 --> 00:02:35,933
在这个中定义那些是没有意义的
and it doesn't make sense to define those in this

75
00:02:35,933 --> 00:02:36,866
控制器模块
controller module

76
00:02:37,000 --> 00:02:39,900
所以我们将在一个名为的新模块中定义这些函数
so we'll define those functions in a new module called

77
00:02:39,900 --> 00:02:40,900
质押服务器
pledge server

78
00:02:41,133 --> 00:02:43,133
然后我们将调用该模块上的函数
and then we'll call the functions on that module

79
00:02:43,133 --> 00:02:44,200
所以这将是
so this is going to be

80
00:02:44,733 --> 00:02:46,433
服务质押服务器
serve pledge server

81
00:02:49,700 --> 00:02:50,466
就拿那个
and just take that

82
00:02:50,466 --> 00:02:52,000
我们将呼吁最近的承诺
and we're going to call recent pledges on that

83
00:02:52,000 --> 00:02:52,800
相同的模块
same module

84
00:02:53,433 --> 00:02:55,433
现在让我们继续创建质押服务器模块
now let's go ahead and create the pledge server module

85
00:02:55,433 --> 00:02:57,400
它将在 lib 调查目录中
it's going to be in the lib survey directory

86
00:02:59,600 --> 00:03:01,000
插入服务器 dx
plug server dx

87
00:03:05,133 --> 00:03:06,300
服务点承诺服务器
servey dot pledge server

88
00:03:08,566 --> 00:03:09,233
然后是第一个
and then that first

89
00:03:09,233 --> 00:03:11,333
我们想要的函数叫做 crate 质押
function that we want is called crate pledge

90
00:03:11,900 --> 00:03:13,600
它需要一个名字和一个数量
it takes a name and an amount

91
00:03:14,766 --> 00:03:16,200
然后这个函数应该做什么
and then what should this function do

92
00:03:16,366 --> 00:03:16,900
先好了
well first

93
00:03:16,900 --> 00:03:19,800
它需要将质押发送到外部服务
it needs to send the pledge to the external service

94
00:03:20,033 --> 00:03:21,400
所以假设我们有一个函数叫做
so let's say we have a function called

95
00:03:21,433 --> 00:03:23,200
发送服务承诺
send pledge to service

96
00:03:23,900 --> 00:03:25,833
我们就直接把名字和金额穿梭
we'll just go ahead and shuttle the name and the amount

97
00:03:25,833 --> 00:03:26,900
到那个功能
over to that function

98
00:03:27,133 --> 00:03:28,966
然后它会返回一个元组
and then it's going to return a tuple

99
00:03:29,266 --> 00:03:30,700
如果它成功了
if it's successful it's going to be

100
00:03:30,766 --> 00:03:33,500
亚当还好，然后是一些身份证
the adam okay and then some id

101
00:03:33,666 --> 00:03:35,466
它可能就像一个交易ID
it might be like a transaction id

102
00:03:35,466 --> 00:03:37,166
质押或质押 ID
of the pledge or the pledge id

103
00:03:37,333 --> 00:03:37,566
只是
just

104
00:03:37,566 --> 00:03:40,166
该承诺创建的一些唯一标识符
some unique identifier that that pledge got created

105
00:03:40,600 --> 00:03:43,166
我们假设我们的承诺总是成功创建
we'll assume our pledge is always successfully created

106
00:03:43,166 --> 00:03:45,633
但你可以想象返回一个不同的元组
but you can imagine returning a different tuple

107
00:03:45,800 --> 00:03:47,066
如果有空气
and if there's an air

108
00:03:47,066 --> 00:03:47,733
那么你可以使用
then you can use

109
00:03:47,733 --> 00:03:50,266
处理成功的案例语句
a case statement to handle either the success

110
00:03:50,266 --> 00:03:51,133
或失败
or the failure

111
00:03:52,000 --> 00:03:54,400
好吧，现在这个罪恶承诺服务功能
okay now for this sin pledge to service function

112
00:03:54,566 --> 00:03:55,200
我要去
I'm going to

113
00:03:55,200 --> 00:03:58,466
为那个罪做一个私人的功能承诺服务
make a private function for that sin pledge to service

114
00:04:00,800 --> 00:04:02,133
我们只是要解决这个问题
and we're just going to stub this out

115
00:04:02,133 --> 00:04:02,533
不是
we're not

116
00:04:02,533 --> 00:04:04,166
实际上是将其发送到外部服务
actually going to send it to an external service

117
00:04:04,166 --> 00:04:05,600
所以我不会使用这个名字
so I'm not going to use the name

118
00:04:05,600 --> 00:04:07,100
所以我将使用下划线名称
so I'm going to use underscore name

119
00:04:07,266 --> 00:04:09,166
这样我们就不会收到任何编译器警告和
just so we don't get any compiler warnings and

120
00:04:09,166 --> 00:04:10,100
下划线安装
underscore mount

121
00:04:10,333 --> 00:04:12,933
在这口井的主体中，我们会有一些代码
and in the body of this well we would have some code

122
00:04:13,500 --> 00:04:15,800
代码在这里发送承诺
code goes here to send pledge

123
00:04:16,333 --> 00:04:17,533
对外服务
to external service

124
00:04:19,766 --> 00:04:21,033
然后我们将返回一个
and then we'll just return a

125
00:04:21,100 --> 00:04:22,733
罐头响应，所以它将是一个元组
canned response so it's going to be a tuple

126
00:04:22,766 --> 00:04:23,533
我们假设它
we're going to assume it

127
00:04:23,566 --> 00:04:25,533
总是返回 ok 作为第一个元素
always returns ok as the first element

128
00:04:25,766 --> 00:04:27,266
然后我们需要一个 id
and then we need an id

129
00:04:27,633 --> 00:04:28,866
只是为了让它变得有趣
and just to make it interesting

130
00:04:28,866 --> 00:04:29,733
我将使用一个字符串
I'm going to use a string

131
00:04:29,766 --> 00:04:31,433
它将被承诺冲刺
it's going to be pledged dash

132
00:04:31,566 --> 00:04:33,333
然后我们将生成我们的随机数
and then we're going to generate our random number

133
00:04:33,366 --> 00:04:35,166
只是为了让我们在这里有一些独特的东西
just so that we have something unique here

134
00:04:35,733 --> 00:04:37,966
我将使用 rand 模块
and I'm going to use the rand module

135
00:04:37,966 --> 00:04:39,466
这是一个城市模块
that's an urban module

136
00:04:39,633 --> 00:04:41,500
它具有统一的功能
and it has a function uniform

137
00:04:41,700 --> 00:04:43,900
它会通过它 1000 并且会返回
and it will pass it 1000 and that will return

138
00:04:44,166 --> 00:04:45,266
一个随机整数
a random integer

139
00:04:45,266 --> 00:04:48,133
均匀分布在 1 到 1000 的范围内
uniformly distributed in the range from one to 1000

140
00:04:48,133 --> 00:04:49,566
所以我们会有类似的承诺
so we'll have like pledge

141
00:04:49,900 --> 00:04:51,400
例如 4 5 6
4 5 6 for example

142
00:04:51,933 --> 00:04:52,333
所以这
so this

143
00:04:52,333 --> 00:04:55,166
模拟将质押发送到外部服务
simulates sending the pledge to the external service

144
00:04:55,300 --> 00:04:56,266
但是这个功能
but this function

145
00:04:56,333 --> 00:04:58,666
还需要兑现记忆中的质押
also needs to cash the pledge in memory

146
00:05:02,833 --> 00:05:04,966
所以现金只是一个清单
so the cash is just going to be a list

147
00:05:05,466 --> 00:05:07,900
在该列表中，我们想要我们的承诺信息
and inside that list we want our pledge information

148
00:05:08,133 --> 00:05:09,966
我们将把它表示为一个元组
and we're going to represent that as a tuple

149
00:05:10,066 --> 00:05:11,500
元组的第一个元素将是
the first element of the tuple will be the

150
00:05:11,500 --> 00:05:12,233
人名
person's name

151
00:05:12,233 --> 00:05:12,900
然后是第二个
and then the second

152
00:05:12,900 --> 00:05:14,400
要素将是他们承诺多少
element will be how much they pledge

153
00:05:14,400 --> 00:05:16,500
所以拉里承诺10美元
so larry pledge $10

154
00:05:16,866 --> 00:05:19,700
所以如果板条箱承诺被拉里和锡召唤
so if crate pledge gets called with larry and tin

155
00:05:19,700 --> 00:05:22,166
那么我们的现金看起来就像这样
then our cash is going to look exactly like this

156
00:05:22,866 --> 00:05:26,066
好的，那么我们最近的承诺功能应该怎么做
okay so what should our recent pledges function do

157
00:05:26,633 --> 00:05:28,133
好吧，它需要返回
well it needs to return

158
00:05:28,533 --> 00:05:29,833
最近的
the most recent

159
00:05:30,866 --> 00:05:33,400
承诺，这是我们的现金
pledges and that's our cash

160
00:05:34,400 --> 00:05:36,866
所以如果我们的现金目前是这个清单
so if our cash is currently this list

161
00:05:36,866 --> 00:05:39,033
那么它需要返回该列表
then it would need to return that list

162
00:05:39,900 --> 00:05:41,633
所以坚持我们的野生动物主题
so sticking with our wildlife theme

163
00:05:41,633 --> 00:05:43,566
这是房间里的大鳄鱼
here's the big crocodile in the room

164
00:05:43,566 --> 00:05:45,766
我们在哪里存放这些现金
where do we store this cash

165
00:05:45,833 --> 00:05:48,466
以便 crate 质押功能可以更新它
so that the crate pledge function can update it

166
00:05:48,566 --> 00:05:51,566
然后最近的质押功能可以返回
and then the recent pledges function can return

167
00:05:51,866 --> 00:05:52,866
那些承诺
those pledges

168
00:05:53,133 --> 00:05:55,000
井模块不能保持状态
well modules can't hold state

169
00:05:55,166 --> 00:05:56,066
模块不像
modules aren't like

170
00:05:56,066 --> 00:05:57,833
对象华丽语言中的对象
objects in an object ornate language

171
00:05:57,833 --> 00:05:58,833
可以保持状态
that can hold state

172
00:05:58,833 --> 00:06:00,233
在实例变量中
in instance variables

173
00:06:00,500 --> 00:06:04,533
啊，但事实证明进程可以保持状态
ah but it turns out processes can hold state

174
00:06:04,966 --> 00:06:05,966
在质押服务器中
in the pledge server

175
00:06:05,966 --> 00:06:09,033
模块将定义一个名为listen loop的函数
module will define a function named listen loop

176
00:06:09,033 --> 00:06:11,433
不断接收和处理
that continuously receives and handles

177
00:06:11,433 --> 00:06:13,200
无限循环中的消息
messages in an endless loop

178
00:06:13,266 --> 00:06:15,833
并将产生一个运行该功能的进程
and will spawn a process that runs that function

179
00:06:16,200 --> 00:06:19,200
在那个服务器进程中将保持一些内部状态
in that server process will keep some internal state

180
00:06:19,200 --> 00:06:21,433
最近认捐的现金
a cash of recent pledges

181
00:06:21,766 --> 00:06:23,233
当过程开始时
when the process starts

182
00:06:23,233 --> 00:06:26,066
它的初始状态将是一个空的长生不老药列表
its initial state will be an empty elixir list

183
00:06:26,400 --> 00:06:27,800
当我们得到我们的第一个承诺
when we get our first pledge

184
00:06:27,800 --> 00:06:30,233
请求处理过程将发送一条消息
the request handling process will send a message

185
00:06:30,233 --> 00:06:31,700
到服务器进程
to the server process

186
00:06:31,766 --> 00:06:33,233
与质押信息
with the pledge information

187
00:06:33,700 --> 00:06:35,533
当服务器收到该消息时
when the server receives that message

188
00:06:35,633 --> 00:06:36,633
承诺信息
the pledge info

189
00:06:36,633 --> 00:06:38,966
将传递给外部服务
will get passed along to the external service

190
00:06:39,166 --> 00:06:41,700
我们不会关心这是怎么发生的
we won't concern ourselves with how that happens

191
00:06:41,933 --> 00:06:42,766
更相关
more relevant

192
00:06:42,766 --> 00:06:43,900
达到我们的目标
to our objective

193
00:06:44,133 --> 00:06:45,633
服务器进程将
the server process will

194
00:06:45,833 --> 00:06:48,066
还将质押添加到现金中
also add the pledge to the cash

195
00:06:48,100 --> 00:06:50,833
这是服务器进程管理的状态
which is the state managed by the server process

196
00:06:51,100 --> 00:06:53,300
然后服务器进程将发回一条消息
the server process will then send a message back

197
00:06:53,300 --> 00:06:53,966
对请求
to the request

198
00:06:53,966 --> 00:06:55,133
处理过程
handling process

199
00:06:55,166 --> 00:06:58,100
表示质押创建成功
indicating that the pledge was successfully created

200
00:06:58,166 --> 00:06:59,566
或不是请求
or not the request

201
00:06:59,566 --> 00:07:00,733
然后嚎叫过程
howling process then

202
00:07:00,733 --> 00:07:03,766
发回相应的 http 响应
sends a corresponding http response back

203
00:07:03,766 --> 00:07:04,800
给它的客户
to its client

204
00:07:04,933 --> 00:07:07,633
例如浏览器和进程死亡
for example a browser and the process dies

205
00:07:08,166 --> 00:07:10,566
然后当我们得到我们的第二个并且希望
then when we get our 2nd and hopefully

206
00:07:10,566 --> 00:07:11,966
随后的承诺
subsequent pledges

207
00:07:12,033 --> 00:07:14,766
请求嚎叫过程将向此发送消息
the request howling process will send a message to this

208
00:07:14,766 --> 00:07:18,600
相同的服务器进程更新其现有现金
same server process updating its existing cash

209
00:07:19,166 --> 00:07:21,633
然后当要求最近的承诺时
then when the recent pledges are requested

210
00:07:21,666 --> 00:07:23,666
请求处理过程将发送一个
the request handling process will send a

211
00:07:23,766 --> 00:07:25,900
给服务器进程的不同消息
different message to the server process

212
00:07:26,166 --> 00:07:28,100
当服务器收到该消息时
when the server receives that message

213
00:07:28,100 --> 00:07:29,500
它会发回一条消息
it will send a message back

214
00:07:29,500 --> 00:07:31,666
包括现金认捐
that includes the pledges in the cash

215
00:07:32,133 --> 00:07:34,433
所以服务器进程需要接收
so the server process will need to receive

216
00:07:34,500 --> 00:07:37,633
并能够处理不同类型的消息
and be able to handle different kinds of messages

217
00:07:37,900 --> 00:07:39,266
这很有趣
this is pretty interesting

218
00:07:39,266 --> 00:07:41,433
Elixir 进程可以存储状态
elixir processes can store state

219
00:07:41,666 --> 00:07:43,766
和其他过程可以改变
and other processes can change

220
00:07:43,800 --> 00:07:46,700
或通过发送消息检索该状态
or retrieve that state by sending messages

221
00:07:47,166 --> 00:07:47,866
退后一步
stepping back

222
00:07:47,866 --> 00:07:49,866
我们看到两种不同类型的过程
we see two different types of processes

223
00:07:49,866 --> 00:07:51,466
每个都有特定的角色
each with specific roles

224
00:07:51,833 --> 00:07:54,833
服务器进程通常是我们长期运行的进程
a server process is typically our long running process

225
00:07:54,833 --> 00:07:56,000
保持状态
that maintains state

226
00:07:56,200 --> 00:07:57,366
我们稍后会看到
and as we'll see later

227
00:07:57,433 --> 00:08:00,233
也可以同时执行任意工作
can also perform arbitrary work concurrently

228
00:08:00,600 --> 00:08:02,533
另一方面，客户端进程
client processes on the other hand

229
00:08:02,866 --> 00:08:05,366
向服务器发送和接收消息
send to and receive messages from the server

