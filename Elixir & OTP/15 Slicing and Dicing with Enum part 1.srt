1
00:00:00,233 --> 00:00:01,566
as our app stands now

2
00:00:01,566 --> 00:00:04,000
when we get a request for slash bears

3
00:00:04,000 --> 00:00:05,900
we respond with this simple string

4
00:00:06,066 --> 00:00:08,033
but this being a web server in all

5
00:00:08,033 --> 00:00:10,400
we really should respond with some html

6
00:00:10,866 --> 00:00:11,600
yeah and we'll do that

7
00:00:11,600 --> 00:00:12,166
by using

8
00:00:12,166 --> 00:00:14,466
some of the transformation functions that are in the e

9
00:00:14,466 --> 00:00:15,400
new module

10
00:00:15,700 --> 00:00:17,966
but let's start off by organizing our code to look

11
00:00:17,966 --> 00:00:21,066
more like a web framework that follows the nvc pattern

12
00:00:21,066 --> 00:00:22,566
such as Phoenix or rails

13
00:00:23,466 --> 00:00:24,933
typically in a web framework

14
00:00:24,933 --> 00:00:27,300
the routes would simply dispatch or

15
00:00:27,466 --> 00:00:29,066
delegate to a controller

16
00:00:29,466 --> 00:00:30,266
yeah we can do that

17
00:00:30,266 --> 00:00:32,500
we'll define a new controller over here

18
00:00:32,866 --> 00:00:35,800
new file and we're going to call it bare controller

19
00:00:38,466 --> 00:00:39,666
we'll set up the module

20
00:00:40,133 --> 00:00:42,533
it's going to be survey bare controller

21
00:00:42,966 --> 00:00:43,700
save that away

22
00:00:43,700 --> 00:00:44,866
and then we're going to use that back

23
00:00:44,866 --> 00:00:46,300
over in our handler module

24
00:00:46,600 --> 00:00:49,766
so at the top of a handler I'm going to alias that in

25
00:00:53,533 --> 00:00:55,100
and then we want to use that in the

26
00:00:55,100 --> 00:00:56,466
bears route right here

27
00:00:57,800 --> 00:00:59,266
so I'm just going to cut this line out

28
00:00:59,600 --> 00:01:01,700
and instead we'll call bear controller

29
00:01:01,966 --> 00:01:03,633
and we'll assume we're going to have a

30
00:01:03,633 --> 00:01:05,200
function called index

31
00:01:05,300 --> 00:01:07,866
and then we're going to pass in that co and v map

32
00:01:08,033 --> 00:01:08,600
that way

33
00:01:08,600 --> 00:01:11,266
the function can update it and return a new copy

34
00:01:11,700 --> 00:01:12,366
so then back

35
00:01:12,366 --> 00:01:15,300
over in our bare controller we just need to find index

36
00:01:17,900 --> 00:01:19,033
it takes co and v

37
00:01:19,033 --> 00:01:21,300
and I'm going to paste in what I cut out from the

38
00:01:21,300 --> 00:01:23,933
other file we want to do a similar thing

39
00:01:23,933 --> 00:01:25,666
for the bare slash one route

40
00:01:25,666 --> 00:01:28,600
we want to delegate it to a show function

41
00:01:29,000 --> 00:01:30,533
yeah so I'll cut this out of here

42
00:01:31,133 --> 00:01:32,833
this is going to be bare controller

43
00:01:33,166 --> 00:01:33,966
dot show

44
00:01:34,600 --> 00:01:35,900
we'll pass it cunt

45
00:01:35,966 --> 00:01:37,600
and it's also going to need that id

46
00:01:37,600 --> 00:01:39,566
so we'll pass it as the second parameter

47
00:01:39,966 --> 00:01:41,333
then over in the controller

48
00:01:41,666 --> 00:01:42,533
we'll set up show

49
00:01:44,600 --> 00:01:46,866
see one v in the id and I'll paste that in

50
00:01:47,400 --> 00:01:48,300
so this will work

51
00:01:48,333 --> 00:01:49,533
but there's another way to do it

52
00:01:49,533 --> 00:01:52,233
as opposed to passing in an id like this

53
00:01:52,433 --> 00:01:54,533
what if we wanted to package up that id

54
00:01:54,733 --> 00:01:57,433
with the other parameters because id's really just a

55
00:01:57,433 --> 00:01:58,633
request parameter

56
00:01:58,800 --> 00:02:00,466
so what we want to do is merge it

57
00:02:00,533 --> 00:02:02,333
into the existing parameters

58
00:02:02,600 --> 00:02:05,700
and you'll remember that those are in co and v paras

59
00:02:05,866 --> 00:02:07,000
so let's do it this way

60
00:02:07,466 --> 00:02:10,100
param's equals map put

61
00:02:10,266 --> 00:02:13,600
we'll take co and v paras and we'll add to it

62
00:02:13,666 --> 00:02:14,966
a key called id

63
00:02:15,033 --> 00:02:16,300
and the id value

64
00:02:16,300 --> 00:02:18,500
and then we'll turn around and pass that as the second

65
00:02:18,500 --> 00:02:20,766
parameter to our show function

66
00:02:21,233 --> 00:02:23,600
and if we do that back over here in show

67
00:02:23,733 --> 00:02:26,166
then instead of taking id this is going to be a map

68
00:02:26,400 --> 00:02:27,833
and we can just pattern match on it

69
00:02:28,966 --> 00:02:31,533
so we want to extract the value of the id like that

70
00:02:31,933 --> 00:02:33,533
and then we reference id right here

71
00:02:33,866 --> 00:02:35,533
so this will work just as well

72
00:02:35,600 --> 00:02:37,566
just gives us a little bit more flexibility

73
00:02:37,600 --> 00:02:39,733
we can take the entire prams map

74
00:02:39,766 --> 00:02:41,066
and then do some pattern matching

75
00:02:41,066 --> 00:02:42,266
figure out what's inside of there

76
00:02:42,566 --> 00:02:43,800
you can imagine that there might be

77
00:02:43,800 --> 00:02:46,800
other parameters being set further up the pipeline

78
00:02:46,933 --> 00:02:49,466
so this just gives the action all the parameters

79
00:02:49,466 --> 00:02:51,266
and it can figure out what to do with those

80
00:02:52,166 --> 00:02:53,466
so we have one more to go

81
00:02:53,766 --> 00:02:57,500
for the post route we want to delegate to a create

82
00:02:57,566 --> 00:02:58,366
function

83
00:02:59,133 --> 00:03:00,700
this would be bare controller

84
00:03:01,566 --> 00:03:02,366
create

85
00:03:03,166 --> 00:03:04,266
pass it co and v

86
00:03:04,533 --> 00:03:06,633
and it's going to need the posted parameters

87
00:03:06,633 --> 00:03:07,633
so we're going to pass

88
00:03:07,633 --> 00:03:09,466
co and v paras

89
00:03:09,833 --> 00:03:11,166
remember those posted parameters

90
00:03:11,166 --> 00:03:13,966
get parsed out and we put them in co and v params

91
00:03:13,966 --> 00:03:15,400
which we did a bit earlier in the course

92
00:03:16,133 --> 00:03:17,366
then over in the controller

93
00:03:19,266 --> 00:03:20,100
we'll define create

94
00:03:20,500 --> 00:03:23,266
take ceo and v and also takes paras

95
00:03:23,966 --> 00:03:25,133
and I'll just paste that in

96
00:03:25,733 --> 00:03:27,866
now because the name of the argument here is para

97
00:03:27,866 --> 00:03:29,866
we don't have to reference cover paras

98
00:03:29,866 --> 00:03:31,666
it's just going to be param's type

99
00:03:31,900 --> 00:03:32,833
and then over here

100
00:03:33,900 --> 00:03:35,133
we've got the name of the bear

101
00:03:35,133 --> 00:03:37,233
it's just going to be params

102
00:03:38,733 --> 00:03:40,100
now to take this one step further

103
00:03:40,100 --> 00:03:41,900
we know that we can pattern match on this

104
00:03:41,900 --> 00:03:42,966
so we could do it this way

105
00:03:45,300 --> 00:03:46,166
extract the name

106
00:03:48,500 --> 00:03:49,733
extract the type

107
00:03:50,100 --> 00:03:50,766
and if we wanted to

108
00:03:50,766 --> 00:03:51,966
we could set this equal to

109
00:03:51,966 --> 00:03:53,700
para if we wanted access to that

110
00:03:53,800 --> 00:03:57,500
but now down here we have type that's bound to the

111
00:03:57,500 --> 00:03:59,166
type that was in parts and

112
00:03:59,600 --> 00:04:00,400
we have the name

113
00:04:02,566 --> 00:04:03,433
we save that away

114
00:04:04,333 --> 00:04:06,933
and back over an ix if we recompile everything

115
00:04:08,400 --> 00:04:09,766
well it looks like everything still worked

116
00:04:09,766 --> 00:04:12,033
we just moved some code from the route functions

117
00:04:12,333 --> 00:04:13,900
into our controller functions

118
00:04:14,800 --> 00:04:18,700
right now our resources or our bears are just names

119
00:04:18,733 --> 00:04:20,366
but resources typically have

120
00:04:20,433 --> 00:04:21,633
other attributes

121
00:04:21,633 --> 00:04:22,566
and we know

122
00:04:22,566 --> 00:04:26,100
how to model entities that have multiple attributes

123
00:04:26,100 --> 00:04:28,966
we define a structure with specific fields

124
00:04:29,266 --> 00:04:31,366
so let's define a bear structure

125
00:04:32,266 --> 00:04:34,266
we'll put it in a file called bear

126
00:04:34,266 --> 00:04:36,800
ex to find the module

127
00:04:37,933 --> 00:04:38,866
survey bear

128
00:04:39,433 --> 00:04:41,300
then inside of there we'll define our structure

129
00:04:41,900 --> 00:04:45,400
and our bears will have an id initial value will be nil

130
00:04:45,566 --> 00:04:46,400
they'll have a name

131
00:04:46,433 --> 00:04:48,266
which will default to an empty string

132
00:04:48,466 --> 00:04:50,566
they'll also have a type which will be an empty string

133
00:04:50,900 --> 00:04:53,000
and then we'll put a hibernating flag on there

134
00:04:53,100 --> 00:04:55,000
to indicate whether the bear is hibernating or not

135
00:04:55,066 --> 00:04:56,466
and we'll default that to false

136
00:04:56,966 --> 00:04:59,033
then we just need to create some instances of

137
00:04:59,033 --> 00:05:00,200
this bare structure

138
00:05:00,200 --> 00:05:01,800
so where should we do that

139
00:05:02,433 --> 00:05:04,833
well we could do that in the index function

140
00:05:04,833 --> 00:05:06,333
but here's another idea

141
00:05:06,833 --> 00:05:08,600
let's create a new module

142
00:05:08,600 --> 00:05:11,133
that provides some abstraction for fetching

143
00:05:11,133 --> 00:05:12,866
any of our wild resources

144
00:05:13,333 --> 00:05:15,300
let's call the new module wild things

145
00:05:15,966 --> 00:05:19,200
sure I'll put it in the file wild things dot

146
00:05:22,833 --> 00:05:24,366
it's very wild things

147
00:05:24,900 --> 00:05:26,333
and then we're going to be using our bear

148
00:05:26,333 --> 00:05:27,233
struck inside of here

149
00:05:27,233 --> 00:05:28,366
so I'm going to alias

150
00:05:28,433 --> 00:05:29,366
survey bear

151
00:05:30,633 --> 00:05:31,733
and then we want to function

152
00:05:31,733 --> 00:05:32,733
that returns a

153
00:05:32,733 --> 00:05:34,166
list of example bears

154
00:05:34,166 --> 00:05:35,300
and I have one of those queued up

155
00:05:35,300 --> 00:05:36,700
I'll just paste it in right here

156
00:05:37,300 --> 00:05:40,733
so it's just a list that contains bear strict instances

157
00:05:40,733 --> 00:05:42,033
notice we've got one through

158
00:05:42,033 --> 00:05:43,466
tin here with different names

159
00:05:43,466 --> 00:05:44,266
different types and

160
00:05:44,433 --> 00:05:45,633
some of them are hibernating

161
00:05:45,866 --> 00:05:47,633
and you can pick up these examples in the note

162
00:05:47,633 --> 00:05:48,900
so you don't have to type all this in

163
00:05:49,400 --> 00:05:50,200
so we'll save that away

164
00:05:50,200 --> 00:05:52,200
we want to use that over in our bear controller

165
00:05:52,200 --> 00:05:54,766
so I'm going to start by just aliasing that in

166
00:05:54,900 --> 00:05:56,966
alias survey wild things

167
00:05:57,700 --> 00:05:59,333
and then we want to get our list of bears down

168
00:05:59,333 --> 00:06:00,766
on the index function

169
00:06:00,933 --> 00:06:02,133
so we're going to say bears

170
00:06:03,233 --> 00:06:05,266
wild things list bears

171
00:06:06,133 --> 00:06:07,733
and then the next thing we want to do

172
00:06:07,733 --> 00:06:09,900
is transform the list of bears

173
00:06:09,900 --> 00:06:11,266
there are bear structures right now

174
00:06:11,333 --> 00:06:14,600
we want to transform them into an html list

175
00:06:16,333 --> 00:06:17,466
so what we're going to return

176
00:06:17,466 --> 00:06:19,666
in the response body isn't going to be a comma

177
00:06:19,666 --> 00:06:21,766
separated string of bear names

178
00:06:21,766 --> 00:06:24,700
instead it's going to be an html ul

179
00:06:26,366 --> 00:06:28,666
and inside of that we'll have an li

180
00:06:29,000 --> 00:06:30,600
for each of the bears so we'll have

181
00:06:30,733 --> 00:06:32,700
a bear name here and it's type

182
00:06:32,800 --> 00:06:33,600
and we'll have

183
00:06:33,633 --> 00:06:35,500
however many of those we have bears

184
00:06:36,166 --> 00:06:38,700
so how are we going to transform this list of struts

185
00:06:38,933 --> 00:06:40,500
into this html

186
00:06:40,933 --> 00:06:41,666
well the e new

187
00:06:41,666 --> 00:06:42,866
module includes a bunch of

188
00:06:42,866 --> 00:06:44,166
functions that you've likely

189
00:06:44,166 --> 00:06:46,133
used in other programming languages

190
00:06:46,133 --> 00:06:47,533
for working with lists

191
00:06:47,866 --> 00:06:50,133
so over an I ex let's see what e n has for us

192
00:06:50,133 --> 00:06:53,166
I'll use h e new dot I'm just going to hit tab

193
00:06:53,666 --> 00:06:55,933
well it has a bunch of familiar functions

194
00:06:55,933 --> 00:06:57,200
so if I just scroll up here

195
00:06:58,333 --> 00:06:59,766
you'll notice it has each

196
00:07:00,266 --> 00:07:03,000
it has filter it has map

197
00:07:04,600 --> 00:07:06,033
we've got reduce

198
00:07:06,566 --> 00:07:07,400
and reject

199
00:07:08,233 --> 00:07:10,033
it has all sorts of functions

200
00:07:10,033 --> 00:07:11,333
but what we want to do is

201
00:07:11,333 --> 00:07:16,100
transform a list of strings to a list of html items

202
00:07:16,100 --> 00:07:18,300
and that's a job for the map function

203
00:07:19,100 --> 00:07:20,933
yeah let's look at the documentation for that

204
00:07:21,833 --> 00:07:23,600
it's map with an ability too

205
00:07:24,166 --> 00:07:27,133
so what it does is that transforms this given list

206
00:07:27,233 --> 00:07:28,400
into a new list

207
00:07:28,700 --> 00:07:29,966
by applying this

208
00:07:30,100 --> 00:07:31,666
function which is the second

209
00:07:31,666 --> 00:07:33,266
parameter to the map function

210
00:07:33,700 --> 00:07:36,533
and this 2nd parameter is an anonymous function

211
00:07:36,800 --> 00:07:39,633
anonymous functions are delimited with this fn

212
00:07:39,966 --> 00:07:40,766
and then a

213
00:07:40,800 --> 00:07:43,733
list of parameters in this case just one called x

214
00:07:43,966 --> 00:07:45,166
then it has this arrow

215
00:07:45,400 --> 00:07:46,800
and then this is the body of the function

216
00:07:46,800 --> 00:07:48,700
it just takes x and multiplies it by two

217
00:07:48,933 --> 00:07:49,900
and then there's an end

218
00:07:50,466 --> 00:07:52,500
so it applies this function

219
00:07:52,933 --> 00:07:54,966
to each element in the given list

220
00:07:55,433 --> 00:07:57,600
giving us back the double numbers

221
00:07:57,933 --> 00:07:59,433
so let's just copy this out of here

222
00:08:00,800 --> 00:08:01,533
and we'll paste it in

223
00:08:01,533 --> 00:08:03,166
I'm going to change the function body to

224
00:08:03,166 --> 00:08:04,466
actually triple the numbers

225
00:08:04,800 --> 00:08:07,400
and we get back a list of the triple numbers

226
00:08:07,800 --> 00:08:08,800
now anonymous functions

227
00:08:08,800 --> 00:08:10,566
are first class values in elixir

228
00:08:10,566 --> 00:08:12,566
so we can bind them to variables

229
00:08:12,666 --> 00:08:15,166
let's say we wanted to bind it to variable triple

230
00:08:16,200 --> 00:08:17,400
I can just take this here

231
00:08:19,733 --> 00:08:20,833
and paste it like that

232
00:08:21,433 --> 00:08:23,600
and now we have a function called triple

233
00:08:23,733 --> 00:08:25,066
and to call the function

234
00:08:25,300 --> 00:08:26,300
we say triple

235
00:08:26,700 --> 00:08:27,800
and then give a dot

236
00:08:27,833 --> 00:08:29,866
and parentheses and then pass in the argument

237
00:08:29,866 --> 00:08:31,033
in this case 10

238
00:08:31,133 --> 00:08:33,000
and we get back to triple value 30

239
00:08:33,533 --> 00:08:35,533
now it's important to note that this dot

240
00:08:35,733 --> 00:08:38,233
between the variable triple and the prostheses

241
00:08:38,233 --> 00:08:40,833
is required to invoke an anonymous function

242
00:08:41,000 --> 00:08:43,766
it differentiates it from calling a name function

243
00:08:43,900 --> 00:08:45,933
which could be somewhere else inside of a module

244
00:08:46,366 --> 00:08:49,300
since anonymous functions are first class values we can

245
00:08:49,466 --> 00:08:51,100
also pass them as arguments

246
00:08:51,100 --> 00:08:52,700
to other functions such as map

247
00:08:52,700 --> 00:08:53,700
so if we take map

248
00:08:55,266 --> 00:08:56,600
give it a list of 1 2 3

249
00:08:57,433 --> 00:08:59,300
then instead of inclining the anonymous function

250
00:08:59,300 --> 00:09:00,466
we could just give it triple

251
00:09:01,033 --> 00:09:01,966
and we get the same thing

252
00:09:02,533 --> 00:09:04,933
so we can either inline the function like we did

253
00:09:04,966 --> 00:09:05,733
the first time

254
00:09:05,733 --> 00:09:07,533
or we can assign it to a variable

255
00:09:07,666 --> 00:09:09,966
and then pass that function as an argument

256
00:09:10,666 --> 00:09:12,300
so let's peek at a few more

257
00:09:12,300 --> 00:09:15,366
en functions that take a function as an argument

258
00:09:15,866 --> 00:09:18,066
sure one of the familiar wants to be em each

259
00:09:18,700 --> 00:09:20,133
it takes a list and a function

260
00:09:20,133 --> 00:09:21,600
and then it calls that function

261
00:09:21,600 --> 00:09:23,433
for each of the elements in the list

262
00:09:24,100 --> 00:09:25,533
there's also emu find

263
00:09:26,400 --> 00:09:28,000
it takes a list in a function

264
00:09:28,500 --> 00:09:30,533
that returns a truth value

265
00:09:30,533 --> 00:09:32,666
or you might consider this a predicate function

266
00:09:32,966 --> 00:09:35,000
and the first item in the list for which

267
00:09:35,000 --> 00:09:37,000
that function returns a truth value

268
00:09:37,133 --> 00:09:38,033
well it's returned

269
00:09:38,633 --> 00:09:40,533
there's also enzyme filter

270
00:09:41,566 --> 00:09:43,633
in this case it runs the function

271
00:09:43,900 --> 00:09:45,666
on each of the elements to figure out which

272
00:09:45,666 --> 00:09:47,966
ones to keep so it filtered 1 2 3

273
00:09:48,200 --> 00:09:51,100
it was looking for all the evens and it returned two

274
00:09:51,900 --> 00:09:54,300
and then finally there's emu reduce

275
00:09:55,100 --> 00:09:56,166
and this one's kind of interesting

276
00:09:56,166 --> 00:09:57,433
because it takes a list

277
00:09:57,433 --> 00:09:59,433
and then it takes an initial value

278
00:09:59,866 --> 00:10:01,366
and then the third argument here

279
00:10:01,366 --> 00:10:02,800
is an anonymous function

280
00:10:02,866 --> 00:10:05,700
but notice this anonymous function takes two arguments

281
00:10:05,733 --> 00:10:07,000
x and an accumulator

282
00:10:07,166 --> 00:10:09,433
and you've probably used reduced in other languages

283
00:10:09,500 --> 00:10:12,633
what it does is reduces this list down to a value

284
00:10:12,633 --> 00:10:15,333
in this case it's six and it's doing that by

285
00:10:15,533 --> 00:10:17,333
adding each element

286
00:10:17,333 --> 00:10:20,133
to this accumulator each time through this loop

287
00:10:20,500 --> 00:10:23,233
so this example just sums the list of numbers

