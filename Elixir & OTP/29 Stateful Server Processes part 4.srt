1
00:00:00,433 --> 00:00:03,466
remember way back at the beginning of this section

2
00:00:03,466 --> 00:00:05,633
we introduced you to a pledge controller

3
00:00:05,866 --> 00:00:07,033
well it should now work

4
00:00:07,233 --> 00:00:08,966
because we've implemented create

5
00:00:09,033 --> 00:00:11,433
pledge and recent pledges

6
00:00:12,066 --> 00:00:13,300
so I've restarted it

7
00:00:13,300 --> 00:00:15,500
just to get a totally clean slate here

8
00:00:15,500 --> 00:00:16,633
and we're going to start by

9
00:00:16,833 --> 00:00:18,566
firing up our pledge server

10
00:00:19,966 --> 00:00:21,566
we'll use our handy start function

11
00:00:22,266 --> 00:00:24,166
all right and that gets spawned into a process

12
00:00:24,166 --> 00:00:25,733
it's processed one sixty five

13
00:00:26,033 --> 00:00:28,500
and then we need to start up our http server

14
00:00:30,633 --> 00:00:32,700
I'll start on port 4000 as usual

15
00:00:32,700 --> 00:00:34,066
now when we call start here

16
00:00:34,100 --> 00:00:35,766
this doesn't spawn a process

17
00:00:35,766 --> 00:00:39,266
remember it just spawns processes for each request

18
00:00:39,566 --> 00:00:41,700
so this is going to tie up sex but that's okay

19
00:00:42,533 --> 00:00:44,300
now over in a separate terminal tab

20
00:00:44,300 --> 00:00:46,500
we'll use curl to send some requests

21
00:00:47,133 --> 00:00:48,600
so the first request we're going to send to

22
00:00:48,600 --> 00:00:49,400
slash pledges

23
00:00:49,400 --> 00:00:50,433
it's going to be a git request

24
00:00:50,433 --> 00:00:52,500
so this is going to return our recent pledges

25
00:00:52,533 --> 00:00:54,200
and right now it's just an empty list

26
00:00:54,800 --> 00:00:56,300
all right so let's create some pledges

27
00:00:56,300 --> 00:00:57,400
I'm going to use curl again

28
00:00:58,400 --> 00:01:00,233
I'm going to use the x post option

29
00:01:00,400 --> 00:01:03,466
to post this data as a post request

30
00:01:03,900 --> 00:01:05,133
to slash pledges

31
00:01:05,133 --> 00:01:07,000
and that's going to get handled by the crate action

32
00:01:07,000 --> 00:01:08,233
of our pledge controller

33
00:01:08,800 --> 00:01:11,066
solar is going to pledge $100

34
00:01:11,366 --> 00:01:14,300
and then we'll have mo pledged $200

35
00:01:16,133 --> 00:01:17,900
curly's gonna pledge 300

36
00:01:20,233 --> 00:01:23,733
daisy once in on the action she's gonna give us 400

37
00:01:25,333 --> 00:01:27,800
but not to be outdone as grace and

38
00:01:27,800 --> 00:01:29,033
she's giving us five

39
00:01:29,033 --> 00:01:31,833
and we might just get ourselves an alligator or two

40
00:01:32,600 --> 00:01:34,766
cool now let's have a look at our recent pledges

41
00:01:35,300 --> 00:01:37,366
and we've got our three most recent pledges

42
00:01:38,666 --> 00:01:40,400
looking back at our pledge server module

43
00:01:40,400 --> 00:01:41,433
we now have five

44
00:01:41,433 --> 00:01:43,033
functions in this one module

45
00:01:43,033 --> 00:01:45,366
and it's important to note that these functions run in

46
00:01:45,366 --> 00:01:46,500
different processes

47
00:01:46,633 --> 00:01:48,766
this start function is called

48
00:01:48,766 --> 00:01:51,466
by the client to spawn the server process

49
00:01:51,833 --> 00:01:52,766
then this create

50
00:01:52,766 --> 00:01:55,433
pledge and recent pledges functions down here are

51
00:01:55,466 --> 00:01:56,833
also called by the client

52
00:01:56,866 --> 00:01:59,033
and they run in the client process

53
00:01:59,200 --> 00:02:00,433
so let's actually grab those

54
00:02:00,433 --> 00:02:02,766
and we'll move all the client functions together

55
00:02:02,966 --> 00:02:05,733
I'll put these up under start just like that

56
00:02:06,000 --> 00:02:07,800
and then let's add a comment up here

57
00:02:08,066 --> 00:02:11,000
all of these are client interface functions

58
00:02:11,900 --> 00:02:14,233
now this listen loop down here is different

59
00:02:14,666 --> 00:02:16,200
it's called by spawn

60
00:02:16,200 --> 00:02:19,333
which means it runs in this spawn server process

61
00:02:19,500 --> 00:02:21,000
so let's add a comment up here

62
00:02:21,066 --> 00:02:23,133
everything below here is run in the server

63
00:02:23,566 --> 00:02:24,000
at first

64
00:02:24,000 --> 00:02:26,966
it might seem strange that a single module can have

65
00:02:27,000 --> 00:02:29,866
different functions running in different processes

66
00:02:30,066 --> 00:02:30,633
and in really

67
00:02:30,633 --> 00:02:33,300
complex cases you might want to separate

68
00:02:33,333 --> 00:02:35,266
your client and server functions

69
00:02:35,266 --> 00:02:36,700
into two separate modules

70
00:02:37,333 --> 00:02:39,766
but it's actually quite common and acceptable to have

71
00:02:39,766 --> 00:02:42,166
both types of functions in the same module

72
00:02:42,466 --> 00:02:43,700
because after all

73
00:02:44,000 --> 00:02:46,466
modules are just buckets for functions

74
00:02:47,066 --> 00:02:48,400
to see what we would have to do

75
00:02:48,400 --> 00:02:50,700
in the client and the server to implement a new

76
00:02:50,700 --> 00:02:52,733
message let's suppose we want to get the

77
00:02:52,733 --> 00:02:54,833
total amount of the recent pledges

78
00:02:55,200 --> 00:02:56,300
we could do that by having

79
00:02:56,300 --> 00:02:57,200
the client get the

80
00:02:57,200 --> 00:02:58,200
recent pledges

81
00:02:58,200 --> 00:03:00,566
and then total them up in the client process

82
00:03:00,700 --> 00:03:02,733
but the server process can do more

83
00:03:02,733 --> 00:03:04,166
than simply store state

84
00:03:04,533 --> 00:03:05,900
it can actually do work

85
00:03:06,500 --> 00:03:08,366
that's right and just to demonstrate that

86
00:03:08,366 --> 00:03:10,000
we'll have the server process

87
00:03:10,000 --> 00:03:11,366
do that computation

88
00:03:11,766 --> 00:03:12,933
so down at the bottom here

89
00:03:12,933 --> 00:03:14,766
we'll uncombed this code again

90
00:03:14,766 --> 00:03:15,833
because we want to run it

91
00:03:16,166 --> 00:03:18,566
we're going to add a line down at the bottom

92
00:03:18,766 --> 00:03:20,733
we want our client interface to look like this

93
00:03:22,200 --> 00:03:25,566
p server we want to call a function total pledged

94
00:03:26,800 --> 00:03:28,100
and that should return the total

95
00:03:28,100 --> 00:03:29,933
and then we use inspect just to inspect it

96
00:03:30,300 --> 00:03:31,100
so to make that work

97
00:03:31,100 --> 00:03:33,566
we need to define this client interface function

98
00:03:33,566 --> 00:03:36,133
we'll do that up here under client interface

99
00:03:36,166 --> 00:03:38,500
I'm just going to copy this one to give us a head start

100
00:03:41,300 --> 00:03:43,033
so this can be called total pledged

101
00:03:43,800 --> 00:03:45,166
it's going to send to the server

102
00:03:45,566 --> 00:03:46,700
it needs a reply back

103
00:03:46,700 --> 00:03:48,500
so it includes self in the message

104
00:03:48,766 --> 00:03:49,566
and then the

105
00:03:49,566 --> 00:03:52,966
atom or the message here is going to be total pledged

106
00:03:53,200 --> 00:03:54,733
it'll mimic the function name

107
00:03:54,733 --> 00:03:57,166
that doesn't have to be true that the function name

108
00:03:57,333 --> 00:03:59,766
is the same as the message but it's common to do that

109
00:04:00,266 --> 00:04:02,400
and then the response is going to send back the total

110
00:04:02,400 --> 00:04:04,100
so this is going to be the total

111
00:04:04,133 --> 00:04:04,600
and we just

112
00:04:04,600 --> 00:04:06,766
extract that and return it from the function

113
00:04:07,266 --> 00:04:09,766
so similar to the other client interface functions

114
00:04:09,766 --> 00:04:11,333
this function is synchronous

115
00:04:11,333 --> 00:04:13,233
it expects a reply from the server

116
00:04:13,533 --> 00:04:15,100
then we need to handle the message

117
00:04:15,100 --> 00:04:16,566
in the server process

118
00:04:16,566 --> 00:04:18,366
we need to add a claws down here

119
00:04:18,933 --> 00:04:20,700
the pattern of the message is sender

120
00:04:21,333 --> 00:04:23,533
and the message is total pledged

121
00:04:25,100 --> 00:04:26,566
and we know we're going to have to send

122
00:04:26,566 --> 00:04:27,766
back to the sender

123
00:04:28,500 --> 00:04:29,766
a message that looks like this

124
00:04:29,766 --> 00:04:32,333
response and whatever total we compute

125
00:04:32,533 --> 00:04:34,166
and then we're going to have to recurs

126
00:04:35,466 --> 00:04:37,966
listen loop passing in the existing state

127
00:04:37,966 --> 00:04:39,366
because we're not going to change the state

128
00:04:39,833 --> 00:04:41,566
so what's the work the server is going to do

129
00:04:41,566 --> 00:04:43,500
well I just need to compute this total

130
00:04:44,233 --> 00:04:45,533
now there are a couple different ways to do this

131
00:04:45,533 --> 00:04:47,366
you could use reduce if you wanted to

132
00:04:47,366 --> 00:04:48,433
but I'm going to use map

133
00:04:49,433 --> 00:04:50,933
so I'm going to take our state

134
00:04:51,200 --> 00:04:53,333
and remember our state is a list of tuples

135
00:04:53,366 --> 00:04:54,666
where the first thing is the name

136
00:04:54,666 --> 00:04:55,933
and the second thing

137
00:04:56,233 --> 00:04:57,800
is the amount

138
00:04:58,066 --> 00:05:00,400
and there's a function that elixir called lm

139
00:05:00,500 --> 00:05:01,800
and it takes a topple

140
00:05:01,866 --> 00:05:03,366
I'll just call that t for a second

141
00:05:03,700 --> 00:05:06,266
and then it takes the index that you want to get

142
00:05:06,266 --> 00:05:07,633
and there's zero based index

143
00:05:07,633 --> 00:05:09,066
so this one would get the name

144
00:05:09,800 --> 00:05:11,366
this one would get the amount

145
00:05:11,600 --> 00:05:12,833
but to use that with map

146
00:05:12,866 --> 00:05:14,133
we need to capture the function

147
00:05:14,133 --> 00:05:15,700
so we used to capture operator

148
00:05:15,766 --> 00:05:16,266
and we wanted

149
00:05:16,266 --> 00:05:18,833
to pass us the topple so this is going to be

150
00:05:19,100 --> 00:05:20,066
ampersand one

151
00:05:20,566 --> 00:05:22,600
maps going to call this function

152
00:05:22,766 --> 00:05:24,766
with every element in the list and

153
00:05:25,166 --> 00:05:26,400
every element is a tuple

154
00:05:26,466 --> 00:05:28,566
so we pass the tuple in as the first argument

155
00:05:28,633 --> 00:05:31,300
and then we want the amount so we pass in one there

156
00:05:31,800 --> 00:05:34,033
so that's going to give us a list of

157
00:05:34,433 --> 00:05:37,966
all the amounts that then we can pipe into e nous

158
00:05:40,000 --> 00:05:42,500
so this isn't very hard work for the server to do

159
00:05:42,700 --> 00:05:44,833
but it's an example of work

160
00:05:45,200 --> 00:05:47,400
the server process is now storing state

161
00:05:47,700 --> 00:05:50,066
and performing computations on that state

162
00:05:50,166 --> 00:05:51,066
we save that away

163
00:05:51,533 --> 00:05:54,300
well sure enough we get a total and it's 120

164
00:05:54,833 --> 00:05:57,233
so we have several patterns in the receive loop

165
00:05:57,233 --> 00:05:59,900
but what happens if our server receives a message

166
00:05:59,933 --> 00:06:02,100
that doesn't match any of these patterns

167
00:06:02,333 --> 00:06:04,833
we have client interface functions that send

168
00:06:04,833 --> 00:06:06,433
expected messages

169
00:06:06,566 --> 00:06:09,233
but someone could send us an unexpected message

170
00:06:09,833 --> 00:06:12,466
yeah to demonstrate that down at the bottom here

171
00:06:13,533 --> 00:06:15,433
well we could just send to that pit

172
00:06:15,433 --> 00:06:17,033
because start returns to the pit

173
00:06:17,033 --> 00:06:18,800
and we'll just send it the message

174
00:06:18,800 --> 00:06:19,866
oh it's a two pole

175
00:06:19,933 --> 00:06:22,066
first element stop and the second one is

176
00:06:22,300 --> 00:06:23,133
hammer time

177
00:06:23,866 --> 00:06:24,733
then at the end

178
00:06:25,400 --> 00:06:30,266
we'll use io and we'll inspect the processes messages

179
00:06:30,900 --> 00:06:33,266
so this would be the pid messages just like that

180
00:06:33,600 --> 00:06:35,300
if we save that away and run it

181
00:06:35,600 --> 00:06:36,600
while we see at the end

182
00:06:36,600 --> 00:06:39,000
the messages include stop hammer time

183
00:06:39,400 --> 00:06:40,066
so because none

184
00:06:40,066 --> 00:06:41,500
of the patterns matched

185
00:06:41,500 --> 00:06:43,100
then the unexpected message just

186
00:06:43,100 --> 00:06:45,200
hangs around in the process as mailbox

187
00:06:45,500 --> 00:06:48,000
so to avoid cluttering the mailbox like this

188
00:06:48,100 --> 00:06:50,033
which can ultimately impact performance

189
00:06:50,166 --> 00:06:52,800
it's a good idea to add a pattern at the end

190
00:06:52,800 --> 00:06:54,733
that will match all messages

191
00:06:55,233 --> 00:06:56,666
we do that up in the received block

192
00:06:56,666 --> 00:06:58,866
and it's going to be the last pattern here

193
00:06:59,166 --> 00:07:01,166
and we'll just use unexpected

194
00:07:01,300 --> 00:07:02,466
that's a variable

195
00:07:02,800 --> 00:07:05,500
so that's going to match any message that falls through

196
00:07:06,000 --> 00:07:07,366
and then we'll just print out

197
00:07:08,633 --> 00:07:10,000
unexpected message

198
00:07:12,466 --> 00:07:15,766
and then we'll call inspect on that unexpected message

199
00:07:16,266 --> 00:07:18,466
so we're basically just logging the unexpected message

200
00:07:18,466 --> 00:07:19,433
and then we have to remember

201
00:07:19,700 --> 00:07:21,133
to call listen loop at the end

202
00:07:22,033 --> 00:07:25,000
so this is guaranteed to match all unexpected messages

203
00:07:25,233 --> 00:07:26,966
because it's the last claws

204
00:07:27,033 --> 00:07:28,733
and because we just use the variable here

205
00:07:28,866 --> 00:07:31,166
it's just going to soak up any message pattern

206
00:07:31,433 --> 00:07:32,900
now if we save that away and run it

207
00:07:33,233 --> 00:07:36,200
well appear we see unexpected message stop hammer time

208
00:07:36,466 --> 00:07:36,766
but then

209
00:07:36,766 --> 00:07:38,666
when we peek in the mailbox a little bit later on

210
00:07:38,766 --> 00:07:39,933
there are no messages

211
00:07:40,700 --> 00:07:42,800
so here's something important to keep in mind

212
00:07:42,900 --> 00:07:45,000
imagine our web server gets five

213
00:07:45,033 --> 00:07:47,333
concurrent requests to create a pledge

214
00:07:47,600 --> 00:07:49,333
this results in five create

215
00:07:49,333 --> 00:07:50,466
pledge messages

216
00:07:50,466 --> 00:07:53,266
being sent to our single pledge server process

217
00:07:53,666 --> 00:07:55,233
remember though that receive

218
00:07:55,500 --> 00:07:57,866
always handles messages one at a time

219
00:07:58,466 --> 00:07:59,733
so although each request

220
00:07:59,733 --> 00:08:02,433
runs concurrently and likely in parallel

221
00:08:02,600 --> 00:08:04,000
message handling is

222
00:08:04,066 --> 00:08:06,866
always sterilized in the server process and

223
00:08:06,866 --> 00:08:09,266
as such server processes are

224
00:08:09,266 --> 00:08:11,933
synchronization points in an application

225
00:08:12,400 --> 00:08:14,766
now initially this might seem sub optimal

226
00:08:14,933 --> 00:08:16,166
but it's exactly how

227
00:08:16,166 --> 00:08:18,433
we want the server state to be managed

228
00:08:18,533 --> 00:08:21,866
can you imagine having multiple concurrent processes

229
00:08:21,866 --> 00:08:24,700
all trying to update the cash at exactly the same time

230
00:08:25,033 --> 00:08:26,833
it would be a free for all

231
00:08:27,133 --> 00:08:29,566
and the cash would likely become corrupted

232
00:08:30,000 --> 00:08:31,500
so while it appears that the server

233
00:08:31,500 --> 00:08:33,266
process is simply storing state

234
00:08:33,400 --> 00:08:35,133
it's actually doing more than that

235
00:08:35,333 --> 00:08:37,033
by sterilizing access

236
00:08:37,033 --> 00:08:39,500
it's preserving the integrity of that state

237
00:08:39,833 --> 00:08:43,233
while underload from multiple concurrent processes

238
00:08:43,633 --> 00:08:45,766
so now we know how to store a simple state

239
00:08:45,766 --> 00:08:47,533
in a server process that can

240
00:08:47,600 --> 00:08:48,733
also do other work

241
00:08:49,133 --> 00:08:49,966
in the next section

242
00:08:49,966 --> 00:08:52,833
we'll look at how to make the server code more generic

243
00:08:52,833 --> 00:08:54,900
and we're on our way to a gen server

