1
00:00:00,400 --> 00:00:01,800
we currently have three

2
00:00:01,900 --> 00:00:03,066
server processes

3
00:00:03,066 --> 00:00:05,966
that should run continuously and never miss a beat

4
00:00:06,066 --> 00:00:08,366
but things don't always go according to plan

5
00:00:08,800 --> 00:00:10,200
yeah a process can crash

6
00:00:10,200 --> 00:00:12,233
and when it does we need to take action

7
00:00:12,333 --> 00:00:14,333
so our application doesn't miss a beat

8
00:00:14,600 --> 00:00:16,466
now designing for this sort of fault tolerance

9
00:00:16,466 --> 00:00:17,900
sounds like a tall order

10
00:00:18,000 --> 00:00:21,133
but it's baked into the erlangvm and the otp libraries

11
00:00:21,966 --> 00:00:25,666
here are our three server processes http server

12
00:00:25,666 --> 00:00:27,633
pledge server and sensor server

13
00:00:27,966 --> 00:00:31,200
how can we make these processes resilient to failures

14
00:00:31,433 --> 00:00:33,433
well we want to put in place something

15
00:00:33,433 --> 00:00:35,266
that will start each process

16
00:00:35,266 --> 00:00:37,833
continuously monitor that process

17
00:00:37,866 --> 00:00:40,633
and then if it detects that the process crashed

18
00:00:40,766 --> 00:00:42,400
start a new process in its place

19
00:00:42,933 --> 00:00:44,300
so how are we going to do that

20
00:00:44,666 --> 00:00:47,366
well in the case of pledge server and sensor server

21
00:00:47,466 --> 00:00:50,400
these processes are gen server processes

22
00:00:50,433 --> 00:00:53,166
and otp includes a supervisor behavior

23
00:00:53,200 --> 00:00:55,433
that we'll use in the next module to start

24
00:00:55,533 --> 00:00:58,700
monitor and start new processes as necessary

25
00:00:58,966 --> 00:01:02,900
but the htp server process isn't a gen server process

26
00:01:02,900 --> 00:01:04,933
it's a regular elixir process that

27
00:01:04,933 --> 00:01:07,300
doesn't follow the otp conventions

28
00:01:07,366 --> 00:01:07,833
and as

29
00:01:07,833 --> 00:01:10,833
such we can't use the built in supervisor behavior

30
00:01:11,066 --> 00:01:14,233
instead we'll write a simple gen server process because

31
00:01:14,266 --> 00:01:16,633
as we'll see we want it to be a long

32
00:01:16,633 --> 00:01:20,233
running process that handles messages and store state

33
00:01:20,533 --> 00:01:22,200
and we'll name a kickstarter

34
00:01:22,200 --> 00:01:24,833
think of kickstarting a motorcycle instead of the

35
00:01:24,833 --> 00:01:26,566
popular funding platform

36
00:01:26,766 --> 00:01:29,266
this process will start the http server

37
00:01:29,266 --> 00:01:31,866
process and then use something called a link

38
00:01:31,866 --> 00:01:34,133
to detect when that process crashes

39
00:01:34,166 --> 00:01:35,966
so it can start a new process

40
00:01:36,066 --> 00:01:39,266
and learning about linking processes is fundamental to

41
00:01:39,300 --> 00:01:42,266
understanding how the otp supervisor behavior works

42
00:01:42,266 --> 00:01:43,066
under the hood

43
00:01:43,766 --> 00:01:46,266
all right so let's create the kickstarter module

44
00:01:48,300 --> 00:01:49,733
kickstarter dx

45
00:01:52,466 --> 00:01:54,266
this could be serve kickstarter

46
00:01:54,700 --> 00:01:56,200
and then we want this to be a gen server

47
00:01:56,200 --> 00:01:58,233
so we're going to say use gen server

48
00:01:58,700 --> 00:02:00,466
and then just like our other gen servers

49
00:02:00,466 --> 00:02:02,466
we'll write a start wrapper function

50
00:02:03,433 --> 00:02:05,566
and we'll just start off by saying ioputas

51
00:02:06,200 --> 00:02:07,300
starting the kickstarter

52
00:02:10,066 --> 00:02:12,533
and then it needs to call gen server start

53
00:02:13,400 --> 00:02:15,866
to actually start up the gen server process

54
00:02:16,200 --> 00:02:17,366
and then this module

55
00:02:17,366 --> 00:02:19,600
kickstarter is going to be the callback module

56
00:02:19,733 --> 00:02:21,700
so we'll set that as the callback module

57
00:02:21,766 --> 00:02:23,066
and then we don't have any state

58
00:02:23,100 --> 00:02:25,633
so we'll just use the atom ok for the state

59
00:02:25,966 --> 00:02:28,400
and then we also want to register this process

60
00:02:28,666 --> 00:02:30,333
under a name and the name is

61
00:02:30,333 --> 00:02:31,900
actually just going to be the name of the module

62
00:02:31,900 --> 00:02:32,933
so we'll use this again

63
00:02:33,400 --> 00:02:35,066
so the name of the process is just going to be

64
00:02:35,133 --> 00:02:36,400
survey kickstarter

65
00:02:36,966 --> 00:02:38,566
when the kickstarter process starts

66
00:02:38,566 --> 00:02:42,300
we also want to start an http server process

67
00:02:42,333 --> 00:02:44,533
we'll refer to this as the web server process

68
00:02:44,533 --> 00:02:47,933
from now on we'll do that in the nit callback function

69
00:02:48,566 --> 00:02:51,266
and because we use the adam ok in genserver start

70
00:02:51,566 --> 00:02:54,200
well it needs to take ok right there too and we

71
00:02:54,200 --> 00:02:54,333
know

72
00:02:54,333 --> 00:02:56,833
this is going to be automatically invoked by genserver

73
00:02:56,833 --> 00:02:59,066
start and because we pass ok right here

74
00:02:59,300 --> 00:02:59,466
well

75
00:02:59,466 --> 00:03:02,033
that's why we need ok here so that a pattern matches

76
00:03:02,033 --> 00:03:03,500
and it runs this function

77
00:03:03,833 --> 00:03:04,933
then we'll just print out

78
00:03:05,733 --> 00:03:07,833
starting the hdp server

79
00:03:09,000 --> 00:03:10,900
and then to start it up we're going to use spawn

80
00:03:11,600 --> 00:03:13,433
serve hdp server

81
00:03:13,633 --> 00:03:14,733
the function is start

82
00:03:14,833 --> 00:03:17,433
and then we want to pass it the port 4000

83
00:03:17,433 --> 00:03:19,033
just like we've done many times

84
00:03:19,100 --> 00:03:20,800
and then we'll capture the server pid

85
00:03:21,100 --> 00:03:21,900
on the other side

86
00:03:22,900 --> 00:03:25,533
oops this actually needs to be 4000 instead of 400

87
00:03:25,866 --> 00:03:26,700
all right and let's

88
00:03:26,700 --> 00:03:29,166
also register the web server process under an alia

89
00:03:29,200 --> 00:03:31,300
so it's easy to demonstrate crashing it

90
00:03:31,300 --> 00:03:32,966
we'll just say process register

91
00:03:34,633 --> 00:03:35,533
the server pid

92
00:03:36,266 --> 00:03:38,800
and we'll just name it http under score server

93
00:03:39,466 --> 00:03:41,200
then we need to make sure to return a tuple

94
00:03:41,233 --> 00:03:42,000
with the state

95
00:03:42,033 --> 00:03:43,133
being the server pid

96
00:03:43,133 --> 00:03:44,166
so it'll be okay

97
00:03:44,166 --> 00:03:45,566
and then the state is just

98
00:03:45,900 --> 00:03:46,733
that server pin

99
00:03:47,266 --> 00:03:49,066
so let's take this away and give it a quick whirl in I

100
00:03:49,066 --> 00:03:49,866
yex

101
00:03:52,366 --> 00:03:55,600
so to start the kickstarter we use survey kickstarter

102
00:03:57,166 --> 00:03:59,033
dot start that's our wrapper function

103
00:03:59,133 --> 00:04:02,033
and this is going to return a two pull with ok

104
00:04:02,166 --> 00:04:04,166
and the pit I'm going to call it the kick pid

105
00:04:05,666 --> 00:04:06,033
remember

106
00:04:06,033 --> 00:04:08,200
start is calling gen server start and gen server start

107
00:04:08,266 --> 00:04:09,700
always returns a tuple

108
00:04:09,766 --> 00:04:10,966
ok and then some pit

109
00:04:10,966 --> 00:04:12,833
so we're pattern matching that on the left hand side

110
00:04:13,766 --> 00:04:16,600
cool we see that both the kickstarter process

111
00:04:16,600 --> 00:04:18,966
and the web server process got started

112
00:04:19,333 --> 00:04:22,000
now what happens if the web server process crashes

113
00:04:22,000 --> 00:04:22,800
for some reason

114
00:04:23,166 --> 00:04:24,533
we could set it up to crash by

115
00:04:24,533 --> 00:04:26,266
raising an exception in the code

116
00:04:26,266 --> 00:04:27,933
but rather than changing the code

117
00:04:28,100 --> 00:04:30,900
we can cause the process to crash by sending it an

118
00:04:30,900 --> 00:04:31,833
exit signal

119
00:04:32,066 --> 00:04:34,666
so first we need to find that web server process

120
00:04:34,733 --> 00:04:36,066
we want to get a hold of the pid

121
00:04:36,800 --> 00:04:40,400
because we registered an alias we can use process

122
00:04:40,400 --> 00:04:41,700
there's a where is function

123
00:04:41,700 --> 00:04:43,233
and then we pass it the name

124
00:04:43,233 --> 00:04:44,000
of the process

125
00:04:44,000 --> 00:04:44,833
we registered

126
00:04:44,900 --> 00:04:46,000
http server

127
00:04:46,600 --> 00:04:48,900
there we go we've got the pids stored in server pid

128
00:04:49,233 --> 00:04:51,600
and then to crash it we can use the process module

129
00:04:51,600 --> 00:04:53,900
again there's a function called exit

130
00:04:53,900 --> 00:04:55,200
we give it the server pid

131
00:04:55,666 --> 00:04:56,800
and then we give it the reason

132
00:04:57,033 --> 00:04:57,800
that it should exit

133
00:04:57,800 --> 00:04:59,633
and I'm just going to use the atom caboom

134
00:05:00,433 --> 00:05:02,166
all right now let's see if that's still alive

135
00:05:04,733 --> 00:05:07,033
nope the web server isn't alive anymore

136
00:05:07,466 --> 00:05:09,366
but what about the kickstarter process

137
00:05:09,600 --> 00:05:11,300
if we pass in kickpid here

138
00:05:12,066 --> 00:05:13,200
well it returns true

139
00:05:13,200 --> 00:05:15,333
so the kickstarter process is still alive

140
00:05:15,666 --> 00:05:17,166
the reverse is also true

141
00:05:17,166 --> 00:05:19,600
if we were to crash the kickstarter process

142
00:05:19,600 --> 00:05:22,133
it wouldn't affect the web server process

143
00:05:22,233 --> 00:05:25,633
who by default both processes run in isolation

144
00:05:25,866 --> 00:05:28,833
but we need a way for kickstarter to detect

145
00:05:28,833 --> 00:05:31,133
when the web server process crashes

146
00:05:31,833 --> 00:05:34,600
okay so how is one process going to monitor the other

147
00:05:34,900 --> 00:05:36,633
well we can link them together

148
00:05:36,900 --> 00:05:38,233
we're in the nit function here

149
00:05:38,233 --> 00:05:41,033
and we've spawned the hdp server process

150
00:05:41,066 --> 00:05:44,233
then right after that we can say process link

151
00:05:45,000 --> 00:05:45,800
server pit

152
00:05:46,433 --> 00:05:48,766
and because we're calling process link

153
00:05:48,766 --> 00:05:50,933
from within the kickstarter process

154
00:05:51,233 --> 00:05:52,866
because it's getting initialized here

155
00:05:53,166 --> 00:05:55,600
then that kickstarter process is now linked

156
00:05:55,600 --> 00:05:57,133
to the web server process

157
00:05:57,133 --> 00:05:59,866
that's the process corresponding to server pid

158
00:06:00,200 --> 00:06:02,900
let's give this another world in a new iex session

159
00:06:02,900 --> 00:06:04,733
that way we don't have to worry about cleaning up

160
00:06:04,733 --> 00:06:06,100
registered processes

161
00:06:06,600 --> 00:06:08,933
so first we need to fire up the kickstarter process

162
00:06:09,500 --> 00:06:12,066
then we need to find our http server process

163
00:06:12,666 --> 00:06:14,033
and when we started up the kickstarter

164
00:06:14,033 --> 00:06:15,433
the nit function was called

165
00:06:15,533 --> 00:06:17,733
so now these two processes should be linked

166
00:06:17,733 --> 00:06:20,100
we can find out by using the process module

167
00:06:20,200 --> 00:06:23,066
the info function will give it the kickpid

168
00:06:23,900 --> 00:06:25,566
and then we'll ask it what are your links

169
00:06:26,766 --> 00:06:29,366
well it's linked to process one sixty six

170
00:06:29,366 --> 00:06:31,466
which is our hdp server process

171
00:06:31,766 --> 00:06:32,933
so what about the reverse

172
00:06:32,933 --> 00:06:34,866
what is the server process link to

173
00:06:37,666 --> 00:06:39,800
well it's linked to pid one sixty five

174
00:06:40,033 --> 00:06:41,533
which is our kickstarter process

175
00:06:41,533 --> 00:06:42,966
we see when it got started up there

176
00:06:43,100 --> 00:06:44,933
that's the pid of it one sixty five

177
00:06:45,566 --> 00:06:47,300
now you also see that it's linked to a port

178
00:06:47,533 --> 00:06:48,800
a port is just a way

179
00:06:48,900 --> 00:06:51,566
for elixir to communicate with external programs

180
00:06:51,566 --> 00:06:53,766
doesn't have anything to do with linking of processes

181
00:06:53,766 --> 00:06:57,233
here the key thing is these two processors are linked

182
00:06:57,233 --> 00:06:58,200
by directionally

183
00:06:58,366 --> 00:07:01,833
so the kickstarter pid references the hdp server pid

184
00:07:02,133 --> 00:07:03,633
and the hdp server pid

185
00:07:03,666 --> 00:07:06,233
is linked to the kickstarter process

186
00:07:06,666 --> 00:07:08,466
so now let's crash the web server process

187
00:07:08,466 --> 00:07:09,533
just like we did before

188
00:07:09,533 --> 00:07:11,800
by sending it the exit signal caboom

189
00:07:12,666 --> 00:07:16,233
so it dies but what happens to our kickstarter process

190
00:07:16,866 --> 00:07:20,166
ah well this time it also crashed

191
00:07:20,500 --> 00:07:22,400
so here's what happened behind the scenes

192
00:07:22,466 --> 00:07:26,800
we sent an exit signal to the hdp server process

193
00:07:27,066 --> 00:07:28,700
that caused it to terminate

194
00:07:28,900 --> 00:07:30,066
it then notified the

195
00:07:30,066 --> 00:07:32,766
linked kickstarter process by sending it the same

196
00:07:32,900 --> 00:07:34,133
exit signal and

197
00:07:34,133 --> 00:07:36,966
because the exit signal indicates the process exited

198
00:07:36,966 --> 00:07:37,966
abnormally

199
00:07:38,133 --> 00:07:40,766
then the linked kickstarter process crashed as well

200
00:07:41,333 --> 00:07:44,100
so when we link two processes their fates are tied

201
00:07:44,100 --> 00:07:46,866
together when one crashes the other one crashes

202
00:07:47,100 --> 00:07:49,333
but that's not exactly what we want

203
00:07:49,733 --> 00:07:52,600
we don't want the kickstarter process to crash

204
00:07:52,600 --> 00:07:54,733
if the web server process crashes

205
00:07:54,933 --> 00:07:57,066
the kickstarter needs to continue running

206
00:07:57,066 --> 00:07:59,266
so it can restart the web server

207
00:07:59,366 --> 00:08:02,400
which really means starting a new web server process

208
00:08:02,600 --> 00:08:05,266
there's no way to actually restart a dead process

209
00:08:05,266 --> 00:08:07,466
we just want to start a new process

210
00:08:08,033 --> 00:08:08,566
to do that

211
00:08:08,566 --> 00:08:11,733
the kickstarter process needs to trap exit signals

212
00:08:11,800 --> 00:08:14,233
and we'll do it in the first step of the nit function

213
00:08:14,300 --> 00:08:15,500
we use process

214
00:08:15,566 --> 00:08:17,000
there's a function called flag

215
00:08:17,633 --> 00:08:19,600
the flag is trap exit

216
00:08:19,833 --> 00:08:21,466
and then we just want to pass in true

217
00:08:21,933 --> 00:08:23,833
now any exit signals that get

218
00:08:23,833 --> 00:08:26,933
propagated from the linked web server process won't

219
00:08:26,933 --> 00:08:29,066
cause the kickstarter process to crash

220
00:08:29,566 --> 00:08:33,000
so let's see what our trap catches in a new iex session

221
00:08:34,600 --> 00:08:36,266
fire up the kickstarter process

222
00:08:36,866 --> 00:08:38,500
find the web server process

223
00:08:39,833 --> 00:08:42,100
then we need to caboom the web server process

224
00:08:43,033 --> 00:08:45,166
ooh this time we get an error message

225
00:08:45,166 --> 00:08:46,800
now we'll come back to that in a minute

226
00:08:47,133 --> 00:08:49,300
but what happened to our kickstarter process

227
00:08:50,400 --> 00:08:51,566
well it's still alive

228
00:08:52,100 --> 00:08:54,233
so even though both processes are linked

229
00:08:54,233 --> 00:08:56,500
the kickstarter process didn't crash

230
00:08:56,600 --> 00:08:58,266
that's exactly what we wanted

231
00:08:58,866 --> 00:09:01,500
now back to the error message and it's pure gold

232
00:09:01,666 --> 00:09:04,566
it's saying that the kickstarter process received an

233
00:09:04,566 --> 00:09:06,100
unexpected message

234
00:09:06,433 --> 00:09:07,600
and here's the message

235
00:09:08,000 --> 00:09:10,333
so kickstarter trapped the exit signal

236
00:09:10,400 --> 00:09:12,666
sent by the web server when it crashed

237
00:09:12,733 --> 00:09:15,333
and converted the exit signal to a message

238
00:09:15,700 --> 00:09:17,066
we see the atom exit

239
00:09:17,066 --> 00:09:19,033
and then the second element here is the pid

240
00:09:19,100 --> 00:09:22,133
this is the process that crashed one sixty six

241
00:09:22,133 --> 00:09:23,833
which is our web server process

242
00:09:24,000 --> 00:09:25,133
and then the third element

243
00:09:25,133 --> 00:09:26,500
is just the reason it crashed

244
00:09:26,500 --> 00:09:28,233
well it's that atom caboom

245
00:09:28,600 --> 00:09:30,366
and because this is just a plain message

246
00:09:30,366 --> 00:09:32,266
it's not a call or a cast

247
00:09:32,266 --> 00:09:34,533
then gen server expects it to be handled

248
00:09:34,533 --> 00:09:36,300
in a handle info callback

249
00:09:36,433 --> 00:09:39,833
which is why we see received unexpected message in

250
00:09:40,000 --> 00:09:43,466
handle info it's trying to invoke handle info

251
00:09:43,633 --> 00:09:46,300
with a message that matches this pattern

252
00:09:47,300 --> 00:09:49,800
so in our kickstarter module we just need a handle info

253
00:09:49,833 --> 00:09:51,866
callback that matches this message

254
00:09:51,933 --> 00:09:53,500
and restarts the web server

255
00:09:55,466 --> 00:09:56,266
handle info

256
00:09:57,733 --> 00:09:58,000
and then

257
00:09:58,000 --> 00:10:00,166
I copied the message that was in ix so I can just

258
00:10:00,166 --> 00:10:01,233
paste it in right here

259
00:10:01,633 --> 00:10:02,733
and then I'll just change it

260
00:10:02,733 --> 00:10:03,833
so this is going to be

261
00:10:03,833 --> 00:10:06,000
the pid of the terminated process

262
00:10:06,133 --> 00:10:06,666
we don't need that

263
00:10:06,666 --> 00:10:07,700
so I'm going to use an underscore

264
00:10:07,700 --> 00:10:08,766
so we don't get a warning

265
00:10:08,866 --> 00:10:10,500
and this is going to be the reason

266
00:10:11,033 --> 00:10:12,633
and then because of this handle info

267
00:10:12,800 --> 00:10:14,933
the second argument is always going to be the state

268
00:10:14,933 --> 00:10:15,933
and we're not going to use it either

269
00:10:15,933 --> 00:10:17,600
so I'm going to use underscore state there

270
00:10:18,333 --> 00:10:20,000
and then we'll start by just printing off

271
00:10:21,200 --> 00:10:23,066
http server exited

272
00:10:23,433 --> 00:10:26,700
and then in printheses will just inspect the reason

273
00:10:28,400 --> 00:10:31,066
you likely want to permanently log this air

274
00:10:31,066 --> 00:10:33,500
so you have forensics to help diagnose the problem

275
00:10:33,966 --> 00:10:35,566
we're just going to print it out for now

276
00:10:36,133 --> 00:10:37,866
so regardless of the exit reason

277
00:10:38,100 --> 00:10:41,033
we want to start a new hdp server process

278
00:10:41,133 --> 00:10:43,133
so we'll just copy these lines from a knit

279
00:10:43,133 --> 00:10:45,100
right now we'll clean this up a little bit later

280
00:10:45,800 --> 00:10:48,300
we'll just come down here and I'll just paste those in

281
00:10:48,766 --> 00:10:50,466
and then we just need to make sure to return

282
00:10:50,466 --> 00:10:52,066
the expected tuple

283
00:10:52,500 --> 00:10:54,700
and since this is handle info it needs to be

284
00:10:55,466 --> 00:10:56,266
no reply

285
00:10:56,966 --> 00:10:59,266
and then the state which is just going to be the

286
00:10:59,266 --> 00:11:00,333
new server pit

287
00:11:00,766 --> 00:11:01,333
because remember

288
00:11:01,366 --> 00:11:04,333
we started a new hdb server process right there

289
00:11:04,466 --> 00:11:05,866
assigned it to server pid

290
00:11:06,000 --> 00:11:08,433
so the new state is going to be that server pit

291
00:11:10,200 --> 00:11:11,333
we'll try this in a new

292
00:11:11,333 --> 00:11:13,666
iex session and we should be home free

293
00:11:14,700 --> 00:11:15,933
start up the kickstarter

294
00:11:16,800 --> 00:11:18,300
find our hdp server

295
00:11:18,900 --> 00:11:21,000
caboom it and perfect

296
00:11:21,000 --> 00:11:24,233
we see that we started a new web server process

297
00:11:24,700 --> 00:11:27,800
and now if we go find that new web server process

298
00:11:27,900 --> 00:11:29,233
and we caboom it again

299
00:11:29,433 --> 00:11:30,400
well actually not again

300
00:11:30,400 --> 00:11:32,166
this is a different process entirely

301
00:11:34,366 --> 00:11:36,700
well we see we're getting a new pid every time

302
00:11:36,866 --> 00:11:38,533
this is pid one seventy three

303
00:11:38,966 --> 00:11:42,133
before it once once 70 and before that

304
00:11:42,166 --> 00:11:44,366
let's see it was one sixty six

305
00:11:44,733 --> 00:11:46,000
that's just what we want

306
00:11:46,300 --> 00:11:48,333
so every time our web server dies

307
00:11:48,466 --> 00:11:50,633
kickstarter starts a new process

308
00:11:51,200 --> 00:11:53,733
now if we look back at our code we have four

309
00:11:53,800 --> 00:11:55,266
lines duplicated here

310
00:11:55,533 --> 00:11:56,766
which is an ideal

311
00:11:57,033 --> 00:12:00,466
so let's refactor these into a start server function

312
00:12:00,800 --> 00:12:02,833
I'll just copy these out and then down below

313
00:12:02,833 --> 00:12:04,600
here we'll define that new function

314
00:12:05,600 --> 00:12:08,033
start server and I'll just paste those in

315
00:12:08,500 --> 00:12:10,133
and then we just need to remember to return

316
00:12:10,300 --> 00:12:12,533
the server pid as the last line there

317
00:12:13,033 --> 00:12:14,833
and you could make this a private function if you want

318
00:12:14,833 --> 00:12:16,066
just use defp

319
00:12:16,400 --> 00:12:18,833
and then we just need to use that function up here

320
00:12:18,933 --> 00:12:21,700
so in a knit we can remove all this

321
00:12:22,533 --> 00:12:24,100
and just call start server

322
00:12:25,533 --> 00:12:28,600
I'll copy that in the same way we can do that right

323
00:12:29,233 --> 00:12:30,033
here

324
00:12:30,533 --> 00:12:32,500
no one actually we can remove this pudex too

325
00:12:33,500 --> 00:12:35,433
so now these two functions are nice and tidy

326
00:12:36,000 --> 00:12:36,566
now you notice

327
00:12:36,566 --> 00:12:38,133
down here we're calling spawn

328
00:12:38,133 --> 00:12:40,500
and then we're turning around immediately and calling

329
00:12:40,500 --> 00:12:41,666
link now

330
00:12:41,666 --> 00:12:43,266
you often want a spawner process and

331
00:12:43,266 --> 00:12:44,633
link it to the calling process

332
00:12:44,633 --> 00:12:45,966
so there's a shortcut for this

333
00:12:46,200 --> 00:12:47,466
rather than calling spawn

334
00:12:47,466 --> 00:12:49,733
and then link as two separate steps

335
00:12:49,800 --> 00:12:52,366
you can instead call the spawn link function

336
00:12:52,533 --> 00:12:53,866
so you just say spawn

337
00:12:54,466 --> 00:12:57,266
link like that and then you can get rid of that line

338
00:12:58,133 --> 00:12:59,433
this has the same effect

339
00:12:59,433 --> 00:13:01,033
but it's more convenient and

340
00:13:01,100 --> 00:13:02,400
also more robust

341
00:13:02,433 --> 00:13:06,133
as the spawn and link happen in one atomic operation

342
00:13:06,233 --> 00:13:08,466
to avoid any potential race conditions

343
00:13:08,900 --> 00:13:10,466
okay now for a quick sanity check

344
00:13:13,033 --> 00:13:14,266
we start our kickstarter

345
00:13:14,933 --> 00:13:16,300
get our http server

346
00:13:17,066 --> 00:13:18,400
crash at one last time

347
00:13:18,966 --> 00:13:20,766
oh and it looks like it gets restarted

348
00:13:20,766 --> 00:13:22,566
so our refactoring didn't break anything

349
00:13:23,066 --> 00:13:25,500
so now if our web server process crashes

350
00:13:25,533 --> 00:13:27,100
we automatically give it a kick

351
00:13:27,100 --> 00:13:29,900
so hopefully we don't miss any requests to our site

352
00:13:30,133 --> 00:13:30,866
next up

353
00:13:30,866 --> 00:13:33,633
we'll do the same for our pledge and sensor servers

