1
00:00:00,266 --> 00:00:01,766
so coming back to our app

2
00:00:01,966 --> 00:00:04,266
we want to respond with each

3
00:00:04,366 --> 00:00:07,966
bare name and type in an html list item

4
00:00:08,300 --> 00:00:11,566
yeah and to do that we'll need to map these bare struck

5
00:00:11,933 --> 00:00:13,600
into these list items

6
00:00:14,400 --> 00:00:15,533
so we know what we need to do

7
00:00:15,533 --> 00:00:16,866
so we can get rid of our to do there

8
00:00:16,933 --> 00:00:18,766
and I'm going to set up a pipeline here

9
00:00:19,500 --> 00:00:21,000
we'll take our list of bears

10
00:00:21,933 --> 00:00:23,900
and then we're going to pipe it into em

11
00:00:24,566 --> 00:00:25,166
map remember

12
00:00:25,166 --> 00:00:27,533
the first argument to map is that list

13
00:00:27,533 --> 00:00:28,800
so that's going to be piped in

14
00:00:28,800 --> 00:00:29,600
from the left

15
00:00:30,000 --> 00:00:31,966
then the second argument is a functions

16
00:00:31,966 --> 00:00:33,600
we're going to use an anonymous function here

17
00:00:33,966 --> 00:00:36,000
it's going to have an argument which we'll call b

18
00:00:36,000 --> 00:00:37,233
that represents the bear

19
00:00:37,800 --> 00:00:38,900
and then the body of the function

20
00:00:38,900 --> 00:00:40,500
we're just going to concatenate some strings

21
00:00:40,500 --> 00:00:41,433
we're going to have an li

22
00:00:42,033 --> 00:00:43,533
and then interpolate into that

23
00:00:44,000 --> 00:00:44,800
the bear's name

24
00:00:45,600 --> 00:00:49,100
put a dash and then we'll interpolate the bears type

25
00:00:49,366 --> 00:00:50,733
and then we'll just close off the li

26
00:00:51,133 --> 00:00:53,266
and then I often forget this but you need to end

27
00:00:53,333 --> 00:00:54,633
that anonymous function

28
00:00:55,100 --> 00:00:57,866
so that's going to give us a list of strings

29
00:00:57,866 --> 00:00:58,866
these allies

30
00:00:59,233 --> 00:01:02,066
but we want them in one big string at the end

31
00:01:02,100 --> 00:01:03,000
so I'm going to use

32
00:01:03,700 --> 00:01:04,500
em

33
00:01:05,200 --> 00:01:08,766
join and that's going to join the list of items

34
00:01:08,766 --> 00:01:10,466
these things here which are strings

35
00:01:10,800 --> 00:01:11,866
into a string itself

36
00:01:11,866 --> 00:01:13,466
it's just going to be one long string

37
00:01:13,566 --> 00:01:14,666
with all the allies inside

38
00:01:14,666 --> 00:01:17,566
of it so given that this returns a string of items

39
00:01:17,566 --> 00:01:18,733
I'm going to change this from

40
00:01:18,733 --> 00:01:20,666
bears because these aren't bear struck anymore

41
00:01:20,833 --> 00:01:22,033
to just items

42
00:01:22,533 --> 00:01:25,266
and then down here instead of having these hard coated

43
00:01:25,400 --> 00:01:27,433
we'll interpolate the items in there

44
00:01:28,033 --> 00:01:29,100
so I have an idea

45
00:01:29,400 --> 00:01:31,933
let's just show all the grizzly bears

46
00:01:31,933 --> 00:01:33,066
and we know how to do that

47
00:01:33,066 --> 00:01:34,666
we can use the filter function

48
00:01:35,000 --> 00:01:37,433
yeah we'll just add a step to the pipeline right here

49
00:01:37,433 --> 00:01:39,466
after we get the list of bears

50
00:01:39,566 --> 00:01:41,200
we'll call enzyme filter

51
00:01:42,133 --> 00:01:43,233
the function is going to take

52
00:01:43,233 --> 00:01:44,966
an argument which is going to be a bear again

53
00:01:45,333 --> 00:01:46,800
and then the body of the function

54
00:01:46,933 --> 00:01:49,833
we say b type equals grizzly

55
00:01:50,000 --> 00:01:51,100
that will return true or false

56
00:01:51,100 --> 00:01:52,900
depending on if the type is grizzly or not

57
00:01:53,066 --> 00:01:55,000
which is exactly what filter wants

58
00:01:55,266 --> 00:01:56,433
and if it returns true

59
00:01:56,433 --> 00:01:58,500
then that bear is going to be in the list

60
00:01:58,966 --> 00:02:01,233
and then for the final touch let's use

61
00:02:01,400 --> 00:02:04,066
sort to put the names in alphabetical order

62
00:02:04,366 --> 00:02:06,166
well we'll do that right after filter

63
00:02:06,566 --> 00:02:08,466
so just add another step to our pipeline

64
00:02:10,533 --> 00:02:13,266
now the function we give sort takes two arguments

65
00:02:13,266 --> 00:02:15,033
I'm going to call in b one and b two

66
00:02:15,566 --> 00:02:18,000
and then the body we can just say b one name

67
00:02:18,366 --> 00:02:21,033
less center equal to b two name

68
00:02:21,933 --> 00:02:24,100
and this will return a list with the bears

69
00:02:24,100 --> 00:02:25,133
sorted by their name

70
00:02:25,233 --> 00:02:26,800
in ascending alphabetical order

71
00:02:27,300 --> 00:02:28,100
save that away

72
00:02:28,766 --> 00:02:29,866
give it a recompile

73
00:02:30,633 --> 00:02:33,300
now need to reload survey handler

74
00:02:33,933 --> 00:02:36,300
and here's the generated ul right here

75
00:02:36,333 --> 00:02:37,966
we notice we have brutus first

76
00:02:38,233 --> 00:02:40,700
keen 2nd and scarface is last

77
00:02:40,700 --> 00:02:42,366
so we've got those in the right order

78
00:02:42,533 --> 00:02:44,300
and we're generating the ul with

79
00:02:44,433 --> 00:02:45,833
the allies we expected

80
00:02:46,433 --> 00:02:49,100
so we have our index action responding with html

81
00:02:49,266 --> 00:02:49,833
while we're at it

82
00:02:49,866 --> 00:02:51,266
let's go ahead and change this show

83
00:02:51,533 --> 00:02:54,400
to respond here with an h one with the bear's name

84
00:02:54,900 --> 00:02:58,733
so what we'll do is we'll delegate over to wild things

85
00:02:58,800 --> 00:02:59,600
that's our module

86
00:02:59,600 --> 00:03:02,033
and let's assume we have a function called get bear

87
00:03:02,200 --> 00:03:03,866
and we can pass in an id

88
00:03:04,033 --> 00:03:06,133
and it'll return the bear with that id

89
00:03:06,533 --> 00:03:08,200
then in the response body

90
00:03:08,633 --> 00:03:11,133
change this around this will be an h one

91
00:03:12,266 --> 00:03:14,266
and we'll say bear and we'll interpolate

92
00:03:14,800 --> 00:03:16,866
bear id put a colon

93
00:03:17,433 --> 00:03:18,233
bear dot name

94
00:03:19,566 --> 00:03:21,466
then we just need to define this function over

95
00:03:21,466 --> 00:03:22,266
and while things

96
00:03:22,933 --> 00:03:25,100
I'll just put it down below list bears here

97
00:03:25,100 --> 00:03:26,633
give myself a little bit of space

98
00:03:27,933 --> 00:03:29,366
it's going to be called get there

99
00:03:29,733 --> 00:03:30,933
and it takes an id

100
00:03:31,300 --> 00:03:33,533
and inside of there we can use e noun find

101
00:03:33,733 --> 00:03:35,966
we saw that in six a little while ago

102
00:03:36,500 --> 00:03:36,933
and we'll just

103
00:03:36,933 --> 00:03:39,033
pass it the list of bears that are returned by

104
00:03:39,033 --> 00:03:40,533
the list bears function

105
00:03:40,766 --> 00:03:42,133
and then we'll give it a function

106
00:03:42,133 --> 00:03:45,133
that selects the bear from that list with the given id

107
00:03:45,133 --> 00:03:46,566
so it'll be function

108
00:03:46,900 --> 00:03:47,700
taking a bear

109
00:03:48,033 --> 00:03:49,266
if the bear's id

110
00:03:50,200 --> 00:03:52,566
equals the pasta id then we want

111
00:03:52,566 --> 00:03:53,366
to select that

112
00:03:53,400 --> 00:03:54,433
so this is going to return

113
00:03:54,433 --> 00:03:56,300
the bear that has the matching id

114
00:03:56,800 --> 00:03:58,533
but the double equal sign

115
00:03:58,533 --> 00:04:02,133
assumes that the id argument is an integer

116
00:04:02,533 --> 00:04:05,300
this means that any value other than an integer

117
00:04:05,366 --> 00:04:07,366
won't match that's a great point

118
00:04:07,366 --> 00:04:10,066
if we pass in the id is a string for example

119
00:04:10,100 --> 00:04:11,666
then this comparison isn't going to work

120
00:04:11,966 --> 00:04:13,333
and there's a new way to fix this

121
00:04:13,333 --> 00:04:15,700
we can use something called a guard claws

122
00:04:15,833 --> 00:04:18,600
to enforce this functions expectation

123
00:04:18,733 --> 00:04:21,333
that the id parameter is an integer

124
00:04:21,666 --> 00:04:24,100
we do that up here on the function head we say when

125
00:04:24,600 --> 00:04:26,533
and then there's a function in the elixir called is

126
00:04:26,533 --> 00:04:29,800
integer and we pass in that id just like that

127
00:04:30,200 --> 00:04:33,233
so now this function clause will only match

128
00:04:33,333 --> 00:04:35,400
if that id is an integer

129
00:04:35,666 --> 00:04:36,800
so if we save this away

130
00:04:37,566 --> 00:04:38,800
then we recompile

131
00:04:40,233 --> 00:04:41,400
reload our handler

132
00:04:41,666 --> 00:04:44,933
we see we get this no function claws matching

133
00:04:44,933 --> 00:04:45,966
get bare one

134
00:04:46,266 --> 00:04:49,233
but notice we're calling get bare with a string

135
00:04:49,333 --> 00:04:51,500
notice the double quotes there of one

136
00:04:51,800 --> 00:04:54,633
and there's no function claws that matches that

137
00:04:55,100 --> 00:04:56,500
so our guard is working

138
00:04:57,000 --> 00:04:59,200
so why is dewberry getting called with a string

139
00:04:59,366 --> 00:05:01,166
well back over in our controller

140
00:05:01,400 --> 00:05:02,233
if we look here

141
00:05:02,500 --> 00:05:04,366
we're just pattern matching an id

142
00:05:04,466 --> 00:05:05,833
and then passing that in

143
00:05:06,166 --> 00:05:08,200
and if we look back over and handler

144
00:05:08,300 --> 00:05:09,866
where we're picking up that id

145
00:05:10,466 --> 00:05:11,266
right here

146
00:05:12,066 --> 00:05:12,533
well we're just

147
00:05:12,533 --> 00:05:14,933
pattern matching using that concatenation operator

148
00:05:14,966 --> 00:05:16,400
and getting id which will be

149
00:05:16,400 --> 00:05:18,333
a string that gets put in the map

150
00:05:18,666 --> 00:05:21,533
and that makes sense because the url is just a string

151
00:05:21,533 --> 00:05:23,300
and we're just pulling the id off of it

152
00:05:23,700 --> 00:05:24,266
so we could

153
00:05:24,266 --> 00:05:26,366
convert the id to an integer right here in the show

154
00:05:26,366 --> 00:05:27,166
action

155
00:05:27,200 --> 00:05:29,666
but then we'd have to do that everywhere we have an id

156
00:05:29,666 --> 00:05:31,800
so instead let's arrange things

157
00:05:32,133 --> 00:05:33,766
so that the get bare function

158
00:05:33,966 --> 00:05:37,566
can handle ids that are either integers or strings

159
00:05:37,766 --> 00:05:39,566
and to do that we'll come back over here

160
00:05:40,233 --> 00:05:41,500
we'll scroll down a little bit

161
00:05:41,966 --> 00:05:42,866
and we'll define

162
00:05:42,933 --> 00:05:45,200
another function clause called get bear

163
00:05:46,500 --> 00:05:47,600
it'll take an id

164
00:05:47,833 --> 00:05:48,566
and then we want this

165
00:05:48,566 --> 00:05:50,800
function clause to match when id is a string

166
00:05:50,800 --> 00:05:51,633
so we say when

167
00:05:52,000 --> 00:05:54,933
is binary remember strings or binaries in elixir

168
00:05:55,133 --> 00:05:56,833
so when the id is binary

169
00:05:56,933 --> 00:05:58,600
what we want to do is take that id

170
00:05:59,766 --> 00:06:02,466
we'll convert it to an integer using string to integer

171
00:06:03,133 --> 00:06:04,933
and then we'll pipe that integer

172
00:06:05,666 --> 00:06:06,466
into

173
00:06:06,766 --> 00:06:08,900
this get bare function right here

174
00:06:09,700 --> 00:06:11,066
now if we save this way it should work

175
00:06:12,700 --> 00:06:16,300
recon reload and sure enough now it works

176
00:06:17,100 --> 00:06:19,900
so this clause is called when id is an integer

177
00:06:20,133 --> 00:06:22,966
and this clause is called when id is a string

178
00:06:23,600 --> 00:06:24,800
now we have something working

179
00:06:24,800 --> 00:06:26,333
but I want to clean up some code back

180
00:06:26,333 --> 00:06:27,333
over in the controller

181
00:06:27,600 --> 00:06:31,133
right in this pipeline here are filter sort and map

182
00:06:31,166 --> 00:06:32,966
then we have these anonymous functions

183
00:06:32,966 --> 00:06:34,933
it's just really difficult to read and

184
00:06:35,233 --> 00:06:36,233
understand what's going on as

185
00:06:36,233 --> 00:06:38,066
you just kind of scan that code

186
00:06:38,166 --> 00:06:40,033
so let's do a quick bit of refactoring

187
00:06:40,033 --> 00:06:41,466
to make it more descriptive

188
00:06:41,500 --> 00:06:42,666
make it more readable

189
00:06:43,033 --> 00:06:44,366
well here's a place to start

190
00:06:44,633 --> 00:06:47,800
this code right here is simply creating a bare

191
00:06:47,866 --> 00:06:51,266
line item so let's make a function that does that

192
00:06:51,266 --> 00:06:52,466
and name the function

193
00:06:52,666 --> 00:06:54,766
bare item that's a good idea

194
00:06:54,766 --> 00:06:57,400
now you could put that function in a new module

195
00:06:57,500 --> 00:06:59,866
that just has view helper functions for example

196
00:06:59,933 --> 00:07:01,533
but we're just going to put it in bare controller

197
00:07:01,533 --> 00:07:02,700
so I'll copy it out here

198
00:07:02,866 --> 00:07:04,100
I'm going to put it right up here

199
00:07:04,900 --> 00:07:06,433
it's going to be a private function

200
00:07:06,866 --> 00:07:07,833
called bear item

201
00:07:08,500 --> 00:07:09,700
it's going to take in a bear

202
00:07:10,133 --> 00:07:11,433
and then I'm just going to paste in

203
00:07:11,633 --> 00:07:14,400
that concatenated string that generates our list item

204
00:07:15,066 --> 00:07:16,400
so now back down in map

205
00:07:17,566 --> 00:07:18,933
instead of doing this right here

206
00:07:19,000 --> 00:07:20,033
we'll just take this out

207
00:07:20,500 --> 00:07:24,100
and we can call bear item passing in b that's the bear

208
00:07:24,533 --> 00:07:26,000
oh and I got to remember up here

209
00:07:26,533 --> 00:07:28,133
because we called the argument bear

210
00:07:28,300 --> 00:07:29,466
that's going to be bear as well

211
00:07:30,233 --> 00:07:35,233
next let's put this code in a function named is grizzly

212
00:07:35,600 --> 00:07:36,966
yeah and since this doesn't have

213
00:07:36,966 --> 00:07:38,800
anything to do with generating html and

214
00:07:38,800 --> 00:07:40,466
really nothing to do with the web at all

215
00:07:40,633 --> 00:07:43,033
I'm going to put this inside of our bare module

216
00:07:43,233 --> 00:07:44,833
so I'll just cut this one out this time

217
00:07:46,000 --> 00:07:46,800
over and there

218
00:07:47,600 --> 00:07:50,433
we know that we can add functions into a module that

219
00:07:50,433 --> 00:07:51,333
has a structure

220
00:07:52,000 --> 00:07:53,800
so this one's going to be called is grizzly

221
00:07:55,200 --> 00:07:56,000
give it a bear

222
00:07:56,433 --> 00:07:57,900
I gotta change that over

223
00:07:58,000 --> 00:07:58,733
so it's just a small

224
00:07:58,733 --> 00:08:00,833
predicate function that returns truer false

225
00:08:01,400 --> 00:08:04,266
then back over in our controller we can call bear

226
00:08:04,733 --> 00:08:05,600
is grizzly

227
00:08:06,700 --> 00:08:08,400
passing in b and since

228
00:08:08,400 --> 00:08:09,933
this function lives outside of the module

229
00:08:09,933 --> 00:08:11,833
we need to prefix it with the module name

230
00:08:12,133 --> 00:08:13,400
and I'm also going to alias it

231
00:08:13,400 --> 00:08:15,133
so I can refer to it just as bare

232
00:08:16,833 --> 00:08:18,100
and since we're on a roll

233
00:08:18,366 --> 00:08:21,666
let's put this ordering code into a function as well

234
00:08:22,100 --> 00:08:23,166
okay I'll take that out of there

235
00:08:23,633 --> 00:08:25,366
and that feels like it should be in the bare module

236
00:08:25,366 --> 00:08:26,166
as well

237
00:08:28,200 --> 00:08:31,533
we'll call that function order ascending by name

238
00:08:32,533 --> 00:08:34,300
takes two bears you want to be two

239
00:08:34,833 --> 00:08:36,433
and then it just does the comparison

240
00:08:37,800 --> 00:08:39,200
then here we can call bear

241
00:08:39,866 --> 00:08:41,033
order sending by name

242
00:08:42,433 --> 00:08:43,866
passing in b one and b two

243
00:08:44,233 --> 00:08:47,166
yeah that certainly is more readable does it work

244
00:08:50,600 --> 00:08:51,666
indeed it does

245
00:08:53,133 --> 00:08:53,700
it's really

246
00:08:53,733 --> 00:08:56,266
common to have anonymous functions like this that take

247
00:08:56,266 --> 00:08:58,900
one or two arguments and then pass them through

248
00:08:58,933 --> 00:09:00,433
to named functions

249
00:09:00,700 --> 00:09:02,666
yeah you notice those anonymous functions

250
00:09:02,666 --> 00:09:04,133
just turn around and call

251
00:09:04,266 --> 00:09:05,666
the named functions with

252
00:09:05,666 --> 00:09:07,300
whatever argument was given them

253
00:09:07,300 --> 00:09:08,366
so this takes a bee

254
00:09:08,500 --> 00:09:10,900
just turns around and calls its grizzly with a bee

255
00:09:11,100 --> 00:09:12,766
and you end up doing this all the time

256
00:09:12,800 --> 00:09:15,366
so no surprise elixir provides a shortcut

257
00:09:15,866 --> 00:09:17,000
over an ex let's say I have

258
00:09:17,033 --> 00:09:20,300
this list of phrases lions tigers bears ult

259
00:09:20,900 --> 00:09:21,800
and what we want to do is

260
00:09:21,833 --> 00:09:23,600
map them to their shortage version

261
00:09:23,633 --> 00:09:25,166
so we can use emu map

262
00:09:25,666 --> 00:09:26,766
give it the phrases

263
00:09:27,166 --> 00:09:29,766
and we'll have a function that takes each phrase

264
00:09:30,333 --> 00:09:32,966
then calls the string module's upraise function

265
00:09:33,433 --> 00:09:34,500
passing that string

266
00:09:35,200 --> 00:09:38,033
and we get all the phrases shouted out in uppercase

267
00:09:38,333 --> 00:09:40,033
so this is the same situation right

268
00:09:40,100 --> 00:09:41,066
we have a function

269
00:09:41,200 --> 00:09:41,766
that takes

270
00:09:41,766 --> 00:09:44,066
x and it just turns around and calls a name function

271
00:09:44,200 --> 00:09:47,033
passing it x now for the shortcut

272
00:09:47,766 --> 00:09:49,700
we can use the capture operator

273
00:09:49,700 --> 00:09:51,433
it looks like this it's an ampersand

274
00:09:52,300 --> 00:09:54,133
and then we can drop the end here

275
00:09:54,500 --> 00:09:55,366
and instead of

276
00:09:55,433 --> 00:09:56,266
x because there's

277
00:09:56,300 --> 00:09:58,666
no x because there's no anonymous function anymore

278
00:09:58,800 --> 00:10:00,433
we can use ampersand one

279
00:10:00,633 --> 00:10:03,766
which will be a placeholder for the first argument

280
00:10:03,900 --> 00:10:05,033
and if we had two arguments

281
00:10:05,033 --> 00:10:06,466
then you would use ampersand two

282
00:10:06,466 --> 00:10:08,433
and so on so if we do this

283
00:10:08,866 --> 00:10:10,466
what we get back to the same result

284
00:10:10,633 --> 00:10:11,433
so this

285
00:10:11,566 --> 00:10:14,766
is exactly the same as doing this it's just a shortcut

286
00:10:15,133 --> 00:10:16,566
you can think of the ampersand

287
00:10:16,566 --> 00:10:18,866
as wrapping the named function

288
00:10:18,866 --> 00:10:20,633
in an anonymous function

289
00:10:20,800 --> 00:10:23,033
this same as we had on this previous line

290
00:10:23,366 --> 00:10:25,833
arguments passed to the anonymous function

291
00:10:25,866 --> 00:10:28,166
are passed on to the named function

292
00:10:28,966 --> 00:10:31,933
so now we know how to make our code a bit more succinct

293
00:10:32,333 --> 00:10:34,700
yeah starting with filter here we'll just drop this out

294
00:10:34,933 --> 00:10:36,933
use the capture operator the ampersand

295
00:10:38,300 --> 00:10:39,166
there's one argument

296
00:10:39,166 --> 00:10:40,433
so we use ampersand one

297
00:10:40,800 --> 00:10:41,833
and then drop the end

298
00:10:42,633 --> 00:10:43,633
we'll skip down here

299
00:10:45,166 --> 00:10:47,700
drop this we can capture that function

300
00:10:48,233 --> 00:10:49,233
ampersand one

301
00:10:50,200 --> 00:10:51,833
all right and then this one's a little interesting

302
00:10:51,833 --> 00:10:53,933
because it takes b one and b 2 2 arguments

303
00:10:53,933 --> 00:10:54,733
but no problem

304
00:10:56,266 --> 00:10:57,966
this just turns into imp one

305
00:10:58,700 --> 00:10:59,866
and this is imp two

306
00:11:01,133 --> 00:11:02,133
so this is pretty cool

307
00:11:03,100 --> 00:11:04,800
and better yet it still works

308
00:11:05,433 --> 00:11:07,033
but wait as they say

309
00:11:07,233 --> 00:11:08,633
there's more yeah

310
00:11:08,633 --> 00:11:10,233
there's one more tiny shortcut here

311
00:11:10,233 --> 00:11:12,833
instead of passing in ampersand one like that

312
00:11:12,933 --> 00:11:15,466
we can use the name of the function is grizzly

313
00:11:15,500 --> 00:11:17,933
and the arty that function which is one

314
00:11:19,300 --> 00:11:20,566
this has an er two

315
00:11:20,966 --> 00:11:23,500
so there will be slash two and this has an er one

316
00:11:24,100 --> 00:11:25,466
and that'll work just the same

317
00:11:26,233 --> 00:11:30,033
now this shorthand syntax is tasty and succinct but it

318
00:11:30,033 --> 00:11:31,300
also becomes cryptic

319
00:11:31,400 --> 00:11:32,666
if it's overused

320
00:11:32,800 --> 00:11:34,900
I didn't only use it in cases where you have

321
00:11:34,900 --> 00:11:36,466
one or two arguments

322
00:11:36,500 --> 00:11:39,033
and it doesn't obscure the intent of the code

323
00:11:39,300 --> 00:11:41,633
so I'd use the shorthand syntax here as we did

324
00:11:41,933 --> 00:11:43,533
because I still think it's quite readable

325
00:11:43,733 --> 00:11:44,333
and remember

326
00:11:44,333 --> 00:11:47,033
clear code is always better than clever code

