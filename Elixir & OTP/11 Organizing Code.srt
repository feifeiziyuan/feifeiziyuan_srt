1
00:00:00,600 --> 00:00:02,700
we currently have all of our functions to find

2
00:00:02,700 --> 00:00:03,900
in a single module

3
00:00:03,900 --> 00:00:04,200
and

4
00:00:04,200 --> 00:00:06,600
we've been fairly disciplined about grouping together

5
00:00:06,600 --> 00:00:08,533
functions that have similar concerns

6
00:00:08,700 --> 00:00:10,066
but we know from experience

7
00:00:10,300 --> 00:00:11,033
that having them all

8
00:00:11,033 --> 00:00:14,133
in one module is going to become a bit unruly

9
00:00:14,366 --> 00:00:17,400
yeah it's getting a bit wild already in this one module

10
00:00:17,400 --> 00:00:19,633
but we generally start with everything in one module

11
00:00:19,633 --> 00:00:22,233
and then once we see clusters of similar functions

12
00:00:22,300 --> 00:00:22,466
well

13
00:00:22,466 --> 00:00:25,266
then we'll organize those in a properly named module

14
00:00:25,333 --> 00:00:27,033
so let's do some function wrangling

15
00:00:27,866 --> 00:00:28,600
in our pipeline

16
00:00:28,600 --> 00:00:30,333
we have some functions that we plug in

17
00:00:30,333 --> 00:00:32,600
to map certain requests and responses and then

18
00:00:32,600 --> 00:00:34,900
modify the conversation in various ways

19
00:00:35,066 --> 00:00:39,366
so for example we have rewrite path log and then track

20
00:00:39,900 --> 00:00:41,333
we want to put those in a new module

21
00:00:41,366 --> 00:00:43,533
so I'm just going to cut out the definitions of those

22
00:00:43,566 --> 00:00:44,466
functions right here

23
00:00:45,000 --> 00:00:47,333
and then at the top I'm going to define a new module

24
00:00:47,866 --> 00:00:48,466
naming is

25
00:00:48,466 --> 00:00:50,800
always the hardest part of creating a new module

26
00:00:51,066 --> 00:00:52,933
let's just call this plugins

27
00:00:53,233 --> 00:00:55,400
it's going to be service plugins

28
00:00:55,700 --> 00:00:58,266
and a single elixir file can define multiple module

29
00:00:58,266 --> 00:00:59,900
so we're just going to put these modules in the same

30
00:00:59,900 --> 00:01:03,766
file now don't let this dot character throw you here

31
00:01:03,800 --> 00:01:06,866
when I first saw this module naming scheme like this

32
00:01:06,866 --> 00:01:10,233
I assumed it implied some hierarchical relationship

33
00:01:10,400 --> 00:01:13,033
between the survey module and the plugins module

34
00:01:13,133 --> 00:01:16,200
but in fact there is no implied relationship

35
00:01:16,233 --> 00:01:17,666
all modules are defined

36
00:01:17,666 --> 00:01:18,600
at the top level

37
00:01:18,833 --> 00:01:21,866
using dots just gives us a simple convenient way

38
00:01:22,000 --> 00:01:23,400
to express a name space

39
00:01:23,966 --> 00:01:26,400
now I've got those functions in my copy paste buffer

40
00:01:26,400 --> 00:01:27,200
so I'm just going to

41
00:01:27,200 --> 00:01:29,100
paste those inside of the module like that

42
00:01:29,666 --> 00:01:30,600
and then we can close

43
00:01:30,600 --> 00:01:31,566
this up in sublime

44
00:01:31,566 --> 00:01:33,100
just to give us a little bit more room

45
00:01:33,433 --> 00:01:35,433
I said that the module acts as a name

46
00:01:35,433 --> 00:01:37,266
space so to call the functions

47
00:01:37,266 --> 00:01:39,166
we need to use the module name

48
00:01:39,166 --> 00:01:42,400
so when we call rewrite path we have to say survey

49
00:01:42,733 --> 00:01:45,033
plugins rewrite path

50
00:01:45,466 --> 00:01:47,633
the same way before calling log

51
00:01:47,733 --> 00:01:49,833
we have to prefix it with the module name

52
00:01:50,500 --> 00:01:52,000
and the same thing for track

53
00:01:52,266 --> 00:01:53,366
if we save this away

54
00:01:54,000 --> 00:01:55,733
and it looks like we haven't broken anything

55
00:01:56,166 --> 00:01:58,833
prefixing the function names with the module names is

56
00:01:58,833 --> 00:02:00,533
explicit however

57
00:02:00,633 --> 00:02:02,433
module names can get fairly long

58
00:02:02,566 --> 00:02:05,400
and it's tedious to type the name of the module before

59
00:02:05,566 --> 00:02:06,533
every function name

60
00:02:06,866 --> 00:02:09,700
thankfully there's a couple options to deal with this

61
00:02:10,133 --> 00:02:12,733
one approach is to import the module

62
00:02:13,100 --> 00:02:15,700
to do that we just go up above the function

63
00:02:15,700 --> 00:02:18,600
at the top level of the module and we say import

64
00:02:19,300 --> 00:02:21,000
survey plugins

65
00:02:21,433 --> 00:02:23,700
and that's going to import those functions

66
00:02:23,766 --> 00:02:25,066
into the current name space

67
00:02:25,066 --> 00:02:26,666
the survey handler name space

68
00:02:26,866 --> 00:02:28,466
so now we can get rid of

69
00:02:28,500 --> 00:02:31,400
this prefix on all these functions here

70
00:02:32,900 --> 00:02:35,100
if we save that away well that should work too

71
00:02:35,533 --> 00:02:39,233
however importing functions this way is a bit cavalier

72
00:02:39,300 --> 00:02:41,533
because it imports all the functions

73
00:02:41,533 --> 00:02:43,433
which can lead to ambiguity

74
00:02:43,666 --> 00:02:45,166
now it's not a big deal in this case

75
00:02:45,166 --> 00:02:47,566
because we're only dealing with a handful of functions

76
00:02:47,666 --> 00:02:50,200
but instead of importing the entire module

77
00:02:50,200 --> 00:02:51,900
we could be more selective and

78
00:02:52,000 --> 00:02:54,066
only import the functions we need

79
00:02:54,333 --> 00:02:57,066
and we do that by using the option only

80
00:02:57,400 --> 00:02:59,300
and then we give it a list and we can say

81
00:02:59,366 --> 00:03:01,000
okay we want the rewrite

82
00:03:01,333 --> 00:03:03,900
path function that takes one argument

83
00:03:04,200 --> 00:03:06,866
we also want the log function that takes one argument

84
00:03:06,933 --> 00:03:09,066
and the track function that takes one argument

85
00:03:09,400 --> 00:03:12,033
and doing it this way just makes it more explicit

86
00:03:12,133 --> 00:03:13,833
where those functions are defined

87
00:03:14,266 --> 00:03:15,533
note here that the number

88
00:03:15,566 --> 00:03:17,100
is the functions airily

89
00:03:17,100 --> 00:03:19,100
or the number of arguments it takes

90
00:03:19,100 --> 00:03:21,800
it's not the number of functions with that name

91
00:03:22,033 --> 00:03:25,166
so this imports all five of our functions

92
00:03:25,466 --> 00:03:26,400
we save that away

93
00:03:27,100 --> 00:03:28,366
well it works just as well

94
00:03:29,166 --> 00:03:31,366
now we started by saying we didn't want all of our

95
00:03:31,366 --> 00:03:33,100
functions in one module

96
00:03:33,100 --> 00:03:34,166
and in the same way

97
00:03:34,233 --> 00:03:36,833
we don't want all of our modules in one file

98
00:03:37,000 --> 00:03:39,033
and it turns out it's super easy to do

99
00:03:39,433 --> 00:03:41,900
so let's cut the plugins module

100
00:03:42,866 --> 00:03:45,200
and we'll put it in a separate file

101
00:03:45,733 --> 00:03:47,700
I'm going to open up the sidebar here

102
00:03:47,733 --> 00:03:50,133
and in our lib survey directory

103
00:03:50,133 --> 00:03:53,533
we'll just create a new file and we'll call it plugins

104
00:03:53,566 --> 00:03:54,366
ex

105
00:03:55,833 --> 00:03:57,633
and then I'll just paste in that module

106
00:03:58,000 --> 00:03:59,966
now if we save that away and I also

107
00:03:59,966 --> 00:04:01,700
save handler ex

108
00:04:02,100 --> 00:04:04,066
and I try to run this in sublime

109
00:04:04,200 --> 00:04:05,600
where we get this air module

110
00:04:05,600 --> 00:04:07,800
service plugins is not loaded and

111
00:04:07,833 --> 00:04:08,700
could not be found

112
00:04:09,133 --> 00:04:09,833
in the same way

113
00:04:09,833 --> 00:04:11,800
if we're over on a command line in our top level

114
00:04:11,800 --> 00:04:12,533
survey directory

115
00:04:12,533 --> 00:04:15,000
and we try to run the elixir command on our handler

116
00:04:15,000 --> 00:04:18,866
ex file well we get this same error it can't find

117
00:04:19,166 --> 00:04:20,333
survey plugins

118
00:04:20,533 --> 00:04:22,766
and that's because in either case it doesn't have

119
00:04:22,766 --> 00:04:24,166
the code path setup

120
00:04:24,166 --> 00:04:25,333
for a mixed project

121
00:04:25,833 --> 00:04:28,700
so at this point we need to run it as a mix application

122
00:04:28,700 --> 00:04:30,600
and to do that we're going to fire up fix

123
00:04:30,600 --> 00:04:31,700
but we're going to do it

124
00:04:31,700 --> 00:04:33,600
in the context of our application

125
00:04:33,833 --> 00:04:37,866
by using sex dash capital s and mix

126
00:04:38,900 --> 00:04:39,633
and then it went ahead

127
00:04:39,633 --> 00:04:42,200
and compiled and loaded all the modules in our project

128
00:04:42,200 --> 00:04:45,333
and then it interpreted any code outside of a module

129
00:04:45,500 --> 00:04:47,866
so we see the same output we used to see

130
00:04:48,166 --> 00:04:49,966
in the sublime build window

131
00:04:50,066 --> 00:04:51,766
it's just printing out the results of

132
00:04:51,766 --> 00:04:53,566
running our request through our handler

133
00:04:54,166 --> 00:04:55,633
and if we want to recompile and

134
00:04:55,666 --> 00:04:57,000
reload the survey module

135
00:04:57,000 --> 00:04:59,166
well we can always use the r helper functions

136
00:04:59,166 --> 00:04:59,966
we just say r

137
00:05:00,466 --> 00:05:01,700
servi handler

138
00:05:03,166 --> 00:05:05,466
so it recompiled the module and reloaded it

139
00:05:05,466 --> 00:05:05,733
and

140
00:05:05,733 --> 00:05:07,966
also interpreted the code that's outside of the module

141
00:05:08,133 --> 00:05:10,633
so this is a way for us to run our handler module

142
00:05:11,433 --> 00:05:12,433
while we're at it

143
00:05:12,466 --> 00:05:15,466
the parse function does a necessarily feel at home

144
00:05:15,466 --> 00:05:17,200
living in the handler module

145
00:05:17,366 --> 00:05:19,300
so let's take the parse function

146
00:05:19,433 --> 00:05:22,466
and we'll create a new parser ex file

147
00:05:25,066 --> 00:05:28,800
and then we'll define a module survey parser

148
00:05:29,933 --> 00:05:32,100
and we'll paste our parse function into it

149
00:05:32,500 --> 00:05:35,500
then back in our handler we need to import that

150
00:05:35,500 --> 00:05:37,166
so up here we need to import it

151
00:05:37,166 --> 00:05:39,000
just like we did with plugins

152
00:05:39,066 --> 00:05:40,100
I'm going to say import

153
00:05:40,866 --> 00:05:42,466
see parser

154
00:05:43,733 --> 00:05:45,433
and it only has one function

155
00:05:45,733 --> 00:05:47,866
it's called parse with an ability of one

156
00:05:48,500 --> 00:05:49,300
now back over nine

157
00:05:49,300 --> 00:05:51,966
ex if we try to recompile our handler module as we did

158
00:05:51,966 --> 00:05:54,766
before while we get this familiar error module

159
00:05:54,766 --> 00:05:57,300
service parser is not loaded and could not be found

160
00:05:57,666 --> 00:05:59,766
because it doesn't know about the parser module

161
00:06:00,300 --> 00:06:03,100
so at this point we can either restart the sex session

162
00:06:03,100 --> 00:06:05,133
or we can recompile the entire application

163
00:06:05,133 --> 00:06:06,166
using recompile

164
00:06:06,166 --> 00:06:07,233
that's a helper function

165
00:06:07,433 --> 00:06:09,233
it doesn't take any arguments but

166
00:06:09,333 --> 00:06:10,666
you need to use parentheses

167
00:06:10,666 --> 00:06:11,966
otherwise you'll get a warning there

168
00:06:12,600 --> 00:06:14,966
and it recompile the application and we get the

169
00:06:14,966 --> 00:06:16,733
familiar output from our handler

170
00:06:17,300 --> 00:06:18,500
coming up we'll define

171
00:06:18,500 --> 00:06:21,500
another module that happens to be an elixir structure

172
00:06:21,500 --> 00:06:24,100
and use another technique to reference modules

173
00:06:24,300 --> 00:06:25,133
the alias

