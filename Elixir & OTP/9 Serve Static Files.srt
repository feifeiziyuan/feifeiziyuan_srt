1
00:00:00,333 --> 00:00:02,200
now the last few sections we focused on

2
00:00:02,200 --> 00:00:02,966
pattern matching

3
00:00:02,966 --> 00:00:04,766
specifically with strings and maps

4
00:00:05,000 --> 00:00:06,266
because pattern matching is a

5
00:00:06,266 --> 00:00:07,900
different way of thinking about programming

6
00:00:07,900 --> 00:00:09,233
and it takes a bit of practice

7
00:00:09,366 --> 00:00:11,566
and you'll use pattern matching all over the place

8
00:00:11,566 --> 00:00:13,433
an elixir even for something

9
00:00:13,466 --> 00:00:16,533
as straightforward and familiar as reading a file

10
00:00:16,666 --> 00:00:18,733
I'm thinking maybe you have a file in mind

11
00:00:19,166 --> 00:00:20,066
as a matter of fact

12
00:00:20,066 --> 00:00:23,533
I've created a top level pages directory with an about

13
00:00:23,866 --> 00:00:25,300
html file in it

14
00:00:25,466 --> 00:00:27,266
now you can make your own file

15
00:00:27,266 --> 00:00:29,700
or you can find this file in the code bundle

16
00:00:30,200 --> 00:00:32,600
and we want to serve this file when we get a request

17
00:00:32,600 --> 00:00:33,966
for slash about

18
00:00:33,966 --> 00:00:36,966
so we already have a request teat up over in hand

19
00:00:37,000 --> 00:00:40,133
ex the request is get slash about

20
00:00:40,366 --> 00:00:41,966
and we've prepared a route function that

21
00:00:41,966 --> 00:00:43,100
matches the request

22
00:00:43,100 --> 00:00:45,266
since there's nothing new to learn here

23
00:00:46,300 --> 00:00:47,333
it just looks like this

24
00:00:47,633 --> 00:00:49,800
we're going to pattern match on the path slash about

25
00:00:49,933 --> 00:00:51,433
and then obviously we want to fill in

26
00:00:51,433 --> 00:00:52,833
the response body

27
00:00:52,833 --> 00:00:54,300
with the contents of the file

28
00:00:54,566 --> 00:00:56,566
for now though if we run it it should work

29
00:00:56,966 --> 00:00:58,066
yep we just get back

30
00:00:58,133 --> 00:00:59,566
contents of file so

31
00:00:59,600 --> 00:01:02,100
we need to serve the file as those contents

32
00:01:02,400 --> 00:01:02,966
so let's hop

33
00:01:02,966 --> 00:01:05,533
over to an ix session to see how to read a file

34
00:01:05,533 --> 00:01:06,500
I'm going to use the h

35
00:01:06,500 --> 00:01:07,200
helper function

36
00:01:07,200 --> 00:01:07,733
and then the

37
00:01:07,733 --> 00:01:09,966
file module contains a bunch of functions for

38
00:01:09,966 --> 00:01:10,966
working with files

39
00:01:11,133 --> 00:01:12,800
we want to read a file so no surprise

40
00:01:12,800 --> 00:01:14,333
the function is called a read

41
00:01:14,833 --> 00:01:17,000
and it says that it returns this

42
00:01:17,100 --> 00:01:20,000
if reading the file was successful or this thing

43
00:01:20,000 --> 00:01:21,700
if reading the file was an error

44
00:01:21,933 --> 00:01:23,866
so what are these things in curly braces

45
00:01:23,900 --> 00:01:25,433
well it's something called a tuple

46
00:01:25,600 --> 00:01:26,900
and a tuple is just an ordered

47
00:01:26,900 --> 00:01:28,900
collection of values in curly braces

48
00:01:28,900 --> 00:01:30,266
most commonly you'll see like

49
00:01:30,266 --> 00:01:31,866
two to four values in these

50
00:01:32,133 --> 00:01:33,666
so in the case of success

51
00:01:33,666 --> 00:01:35,233
the first element of the tuple

52
00:01:35,533 --> 00:01:37,533
is an atom in this case it's okay

53
00:01:37,800 --> 00:01:39,666
and then the second element is a binary

54
00:01:39,666 --> 00:01:41,800
remember strings are binaries in elixir so

55
00:01:41,900 --> 00:01:43,633
this is going to be the contents in the file

56
00:01:44,000 --> 00:01:44,966
and if there's an error

57
00:01:44,966 --> 00:01:47,066
then the first element is the atom error

58
00:01:47,166 --> 00:01:49,133
and then we're going to get a reason variable

59
00:01:49,200 --> 00:01:51,333
and that'll be bound to some result

60
00:01:51,333 --> 00:01:53,733
and if we look down below we see the typical error

61
00:01:53,733 --> 00:01:56,166
reasons would be something like the atom

62
00:01:56,166 --> 00:01:59,566
e and to which indicates that the file does not exist

63
00:02:00,200 --> 00:02:02,200
many built in elixir functions use

64
00:02:02,200 --> 00:02:04,100
this idiom that returns a tuple

65
00:02:04,433 --> 00:02:07,100
so how do we check that reading a file was successful

66
00:02:07,100 --> 00:02:09,000
and if so extract its contents

67
00:02:09,000 --> 00:02:09,966
well you guessed it

68
00:02:10,200 --> 00:02:13,100
by using pattern matching on the return tuple

69
00:02:13,566 --> 00:02:14,733
we're just going to clean this up

70
00:02:14,733 --> 00:02:16,233
so we go back up to the top

71
00:02:16,333 --> 00:02:18,466
so we can use file dot read and

72
00:02:18,600 --> 00:02:22,033
because I started ix in the top level survey directory

73
00:02:22,233 --> 00:02:25,666
then the relative path to our about file is going to be

74
00:02:26,033 --> 00:02:26,833
pages

75
00:02:27,733 --> 00:02:31,533
about html and we know that's going to return a tuple

76
00:02:31,600 --> 00:02:33,366
and we expect this to succeed

77
00:02:33,366 --> 00:02:35,533
so we can match it against the atom

78
00:02:36,000 --> 00:02:38,533
okay and then the contents will get bound

79
00:02:38,633 --> 00:02:40,333
to the contents of that file

80
00:02:40,633 --> 00:02:43,366
and sure enough it's a match if we look at contents

81
00:02:43,600 --> 00:02:45,300
well we've had the contents of our file

82
00:02:45,766 --> 00:02:47,500
well let's see that the file doesn't exist

83
00:02:47,533 --> 00:02:50,866
for example we look foreign about us file

84
00:02:51,166 --> 00:02:51,966
yeah if we try that

85
00:02:51,966 --> 00:02:53,033
then the match fails

86
00:02:53,033 --> 00:02:54,700
because it's actually returning a tuple

87
00:02:54,766 --> 00:02:57,533
with error as the first element and then this

88
00:02:57,766 --> 00:02:59,900
file not exist atom as the second element

89
00:03:00,233 --> 00:03:02,533
so how do we want to handle the case where it fails

90
00:03:02,533 --> 00:03:04,200
well we can write a match for that

91
00:03:04,833 --> 00:03:06,700
yeah we'll just change the match here

92
00:03:07,266 --> 00:03:08,666
this is going to match an error

93
00:03:08,666 --> 00:03:11,133
and then we want to capture the actual error in

94
00:03:11,233 --> 00:03:12,533
a reason variable

95
00:03:12,933 --> 00:03:14,533
and that's a match and if we look at reason

96
00:03:15,033 --> 00:03:15,766
well it's that atom

97
00:03:15,766 --> 00:03:17,366
that tells us that the file doesn't exist

98
00:03:17,966 --> 00:03:19,366
so now back in our route function

99
00:03:19,366 --> 00:03:19,733
we first

100
00:03:19,733 --> 00:03:21,700
need to read the file and we know how to do that

101
00:03:22,200 --> 00:03:25,100
but relative to the directory of the handler

102
00:03:25,166 --> 00:03:28,166
ex file it's two directories up so we're going to use

103
00:03:29,466 --> 00:03:30,666
slash just like that

104
00:03:30,966 --> 00:03:31,966
and then we can use a

105
00:03:31,966 --> 00:03:33,533
case expression to handle the

106
00:03:33,533 --> 00:03:34,966
success and failure scenario

107
00:03:34,966 --> 00:03:37,666
so we say case and then do and end

108
00:03:38,000 --> 00:03:39,200
and then inside of the case

109
00:03:39,200 --> 00:03:41,366
we can match the result of the file

110
00:03:41,400 --> 00:03:44,133
reed expression against multiple patterns

111
00:03:44,500 --> 00:03:46,100
so the first pattern will match will be

112
00:03:46,833 --> 00:03:50,300
okay and then content and we use a little arrow

113
00:03:50,733 --> 00:03:53,466
in that particular case we want to take the

114
00:03:54,266 --> 00:03:57,933
co and v map and update the status to be a 200

115
00:03:58,133 --> 00:03:59,500
and the response body

116
00:03:59,766 --> 00:04:01,666
is going to be whatever that content is

117
00:04:02,166 --> 00:04:03,833
then in the case that there's an error

118
00:04:03,866 --> 00:04:06,333
we'll have the tuple error

119
00:04:06,933 --> 00:04:08,033
and then we'll capture the reason

120
00:04:08,033 --> 00:04:10,000
just like we did in ix

121
00:04:11,233 --> 00:04:13,133
in this case we want to return

122
00:04:13,133 --> 00:04:14,966
a conversation map that has

123
00:04:15,000 --> 00:04:16,966
a status of 500

124
00:04:17,466 --> 00:04:18,933
and the response body

125
00:04:19,100 --> 00:04:20,066
we're just going to say

126
00:04:20,900 --> 00:04:23,733
file air and then will interpolate the reason

127
00:04:24,766 --> 00:04:27,366
so we have a pattern that matches all errors

128
00:04:27,366 --> 00:04:29,133
but let's say we want to return a four

129
00:04:29,133 --> 00:04:30,933
or four with a specific error

130
00:04:30,933 --> 00:04:32,233
if the file isn't found

131
00:04:32,666 --> 00:04:35,733
well we can add that branch above this final branch

132
00:04:35,800 --> 00:04:37,533
so the pattern's going to look like error

133
00:04:37,533 --> 00:04:39,000
but it's going to be a specific error

134
00:04:39,000 --> 00:04:41,366
it's that e and to amp t atom

135
00:04:41,933 --> 00:04:42,400
in that

136
00:04:42,400 --> 00:04:44,800
case we were going to turn a map that looks like this

137
00:04:46,100 --> 00:04:48,100
the status is going to be a four or four

138
00:04:48,333 --> 00:04:50,433
and the body is just going to say

139
00:04:51,700 --> 00:04:52,600
file not found

140
00:04:53,333 --> 00:04:56,133
so just remember that the order here matters

141
00:04:56,166 --> 00:04:59,166
the first pattern that matches is going to win and

142
00:04:59,200 --> 00:05:00,300
that's why we placed

143
00:05:00,366 --> 00:05:02,966
this pattern above this pattern because this is a more

144
00:05:02,966 --> 00:05:05,200
generic form it's just going to capture any reason

145
00:05:05,200 --> 00:05:06,400
in that reason variable

146
00:05:06,500 --> 00:05:09,100
where this is a specific literal match

147
00:05:09,233 --> 00:05:11,300
on that adam e and often

148
00:05:11,566 --> 00:05:13,766
and the result of whichever pattern matches

149
00:05:13,766 --> 00:05:15,233
becomes the result of the

150
00:05:15,233 --> 00:05:16,533
overall case expression

151
00:05:16,866 --> 00:05:18,633
so we don't need this line down here

152
00:05:19,166 --> 00:05:22,133
because our case is going to return the updated map

153
00:05:22,433 --> 00:05:23,400
now if we run it

154
00:05:23,433 --> 00:05:25,533
we see we've got the quote as the

155
00:05:25,566 --> 00:05:27,533
body of that response

156
00:05:28,933 --> 00:05:32,400
now if we change it to about us and then run it

157
00:05:32,900 --> 00:05:34,933
well we should see the file not found there

158
00:05:35,133 --> 00:05:36,733
yep we get a four or four

159
00:05:37,333 --> 00:05:39,733
so now let's change it back to about

160
00:05:39,933 --> 00:05:41,666
and let's run it from the command line

161
00:05:41,966 --> 00:05:43,366
alright I've got it changed

162
00:05:43,666 --> 00:05:44,500
and then at the command line

163
00:05:44,500 --> 00:05:46,000
I'm at the top level of survey directory

164
00:05:46,000 --> 00:05:47,300
so I run elixir

165
00:05:47,733 --> 00:05:49,833
lib survey handler ex

166
00:05:50,466 --> 00:05:52,733
ooh and it says file not found

167
00:05:53,033 --> 00:05:55,000
and that's because we're running at the top level

168
00:05:55,000 --> 00:05:56,233
survey directory

169
00:05:56,333 --> 00:05:59,500
and in our code we're trying to find the about page

170
00:05:59,800 --> 00:06:01,833
relative to this directory

171
00:06:03,233 --> 00:06:04,800
slash pages now

172
00:06:04,800 --> 00:06:07,766
this works in sublime because the current directory is

173
00:06:07,766 --> 00:06:09,266
lib slash survey

174
00:06:09,633 --> 00:06:12,833
so we need to get the absolute path to the about

175
00:06:13,066 --> 00:06:15,633
html file so it can be found

176
00:06:15,633 --> 00:06:17,966
regardless of which directory were in

177
00:06:17,966 --> 00:06:19,033
when the app is run

178
00:06:19,566 --> 00:06:21,466
here's how to get the absolute path

179
00:06:21,466 --> 00:06:22,266
and I'm going to use

180
00:06:22,266 --> 00:06:23,633
temporary variables for a minute

181
00:06:23,633 --> 00:06:25,300
but we'll clean this up with a pipeline

182
00:06:25,300 --> 00:06:26,333
a little bit later

183
00:06:26,533 --> 00:06:29,133
so let's say we have a pages path variable

184
00:06:29,466 --> 00:06:29,966
and then the

185
00:06:29,966 --> 00:06:32,200
path module in elixir has a whole bunch of functions

186
00:06:32,200 --> 00:06:33,200
for dealing with paths

187
00:06:33,200 --> 00:06:35,333
one of those functions is expand

188
00:06:35,600 --> 00:06:38,066
and what we want to do is expand this path

189
00:06:39,600 --> 00:06:43,666
pages relative to the directory in which

190
00:06:43,866 --> 00:06:45,033
this file is defined

191
00:06:45,033 --> 00:06:46,866
and we can get that by using underscore

192
00:06:47,866 --> 00:06:49,000
underscore underscore

193
00:06:49,533 --> 00:06:52,500
so this returns the absolute path of the

194
00:06:52,500 --> 00:06:54,066
directory of the current file

195
00:06:54,066 --> 00:06:55,100
wherein handler

196
00:06:55,200 --> 00:06:58,433
ex so that's going to be the absolute path down to lib

197
00:06:58,500 --> 00:07:03,100
serve and then path expand is going to expand this path

198
00:07:03,133 --> 00:07:05,233
relative to this 2nd path

199
00:07:05,533 --> 00:07:08,766
so pages path is going to be the absolute path

200
00:07:08,766 --> 00:07:10,766
down to this pages directory

201
00:07:11,033 --> 00:07:12,666
now that gives us the directory

202
00:07:12,666 --> 00:07:15,666
but we also need to join on the actual file

203
00:07:15,666 --> 00:07:16,533
so to do that

204
00:07:17,333 --> 00:07:20,066
we'll have a variable file and it's going to be path

205
00:07:20,066 --> 00:07:23,433
there's a join function and it takes in our pages path

206
00:07:23,666 --> 00:07:25,466
and then we want to join on about

207
00:07:25,600 --> 00:07:27,733
html and that'll make sure to

208
00:07:27,766 --> 00:07:29,533
use a proper file separator

209
00:07:30,166 --> 00:07:31,666
so now that we know how these functions work

210
00:07:31,666 --> 00:07:32,833
and the arguments they take

211
00:07:32,966 --> 00:07:34,933
let's remove the temporary variables and

212
00:07:34,933 --> 00:07:36,400
use a pipeline instead

213
00:07:36,733 --> 00:07:38,866
so ultimately we want a file

214
00:07:39,166 --> 00:07:41,833
we can take the expanded path

215
00:07:42,200 --> 00:07:43,866
and then pipe it into

216
00:07:44,166 --> 00:07:47,000
path joint which means this path is going to be

217
00:07:47,000 --> 00:07:48,433
the first argument that's piped in

218
00:07:48,433 --> 00:07:49,500
so we can get rid of that

219
00:07:49,800 --> 00:07:51,433
and then down in file dot read

220
00:07:51,566 --> 00:07:53,200
while we just pass it that file

221
00:07:53,700 --> 00:07:56,200
so let's run it in sublime and it works

222
00:07:56,300 --> 00:07:58,066
and if we run it from the command line

223
00:07:58,166 --> 00:07:59,100
it works as well

224
00:08:00,033 --> 00:08:02,100
now we have a design decision to make here

225
00:08:02,133 --> 00:08:05,033
a key's expression is just a way to conditionally run

226
00:08:05,033 --> 00:08:06,966
code based on pattern matches

227
00:08:06,966 --> 00:08:09,833
and we know a different way to run code conditionally

228
00:08:09,933 --> 00:08:11,433
multi clause functions

229
00:08:11,833 --> 00:08:13,400
so I'm going to copy the version of our

230
00:08:13,400 --> 00:08:15,133
route function that uses case

231
00:08:15,333 --> 00:08:16,466
and I'm going to comment it out

232
00:08:16,466 --> 00:08:18,333
just so we can compare it when we're done here

233
00:08:18,600 --> 00:08:20,233
and then paste it in up above

234
00:08:20,633 --> 00:08:23,400
and then I'm going to comment out this case expression

235
00:08:23,900 --> 00:08:26,233
so let's continue on with our pipeline and express

236
00:08:26,233 --> 00:08:27,200
what we want here

237
00:08:27,433 --> 00:08:30,966
at this point we have a joined absolute path

238
00:08:31,200 --> 00:08:33,500
we want to pipe that into file read

239
00:08:33,833 --> 00:08:35,966
and we know that's going to return a tuple

240
00:08:36,200 --> 00:08:38,566
so then we can turn around and pipe that tuple

241
00:08:38,633 --> 00:08:40,233
into a new function we haven't written yet

242
00:08:40,233 --> 00:08:41,933
I'm going to call it handle file

243
00:08:42,133 --> 00:08:44,566
it's going to take the tuple as the first argument

244
00:08:44,633 --> 00:08:47,300
and we also need to pass in the conversation map

245
00:08:47,300 --> 00:08:49,166
so that's going to be the second argument

246
00:08:49,400 --> 00:08:52,233
and that's going to return an updated conversation map

247
00:08:52,233 --> 00:08:54,400
so we can get rid of this file equal

248
00:08:54,600 --> 00:08:55,633
and that's going to be the

249
00:08:55,633 --> 00:08:57,333
entire function body right there

250
00:08:58,066 --> 00:08:59,333
and then we just need to define this

251
00:08:59,333 --> 00:09:00,433
handle file function

252
00:09:00,433 --> 00:09:01,733
and just to make it a little bit more space

253
00:09:01,733 --> 00:09:02,833
let's just go ahead and get rid of this

254
00:09:02,833 --> 00:09:04,533
because we've got it in the function down below

255
00:09:05,566 --> 00:09:07,633
so it looks like this handle file

256
00:09:07,966 --> 00:09:09,133
we know it takes a topple

257
00:09:09,133 --> 00:09:10,533
and we can pattern match on that

258
00:09:10,533 --> 00:09:12,800
so if it's okay and content

259
00:09:13,833 --> 00:09:15,266
remember there's a second argument

260
00:09:15,300 --> 00:09:17,833
it's the conversation that got passed in right here

261
00:09:18,400 --> 00:09:18,633
so

262
00:09:18,633 --> 00:09:21,100
the first argument gets piped and the second argument

263
00:09:21,133 --> 00:09:23,200
we just pass in co no like that

264
00:09:24,666 --> 00:09:26,533
so if that pattern matches

265
00:09:26,533 --> 00:09:28,566
then what we want to do is return

266
00:09:29,333 --> 00:09:30,533
this updated map

267
00:09:31,833 --> 00:09:33,366
so I think you see where this is going

268
00:09:33,466 --> 00:09:36,933
we can define another handle file function clause

269
00:09:37,200 --> 00:09:40,366
and the pattern we want to match here is this one

270
00:09:41,833 --> 00:09:43,333
and then it takes co and v

271
00:09:45,133 --> 00:09:47,166
and then in that case we were going to return

272
00:09:47,166 --> 00:09:48,300
this updated map

273
00:09:49,700 --> 00:09:52,133
and one more time we've got handle file

274
00:09:52,666 --> 00:09:55,066
that takes this pattern down here

275
00:09:56,533 --> 00:09:57,333
the map

276
00:09:58,500 --> 00:09:59,700
and it should return

277
00:10:00,133 --> 00:10:01,366
this updated map

278
00:10:03,033 --> 00:10:04,100
so we have three

279
00:10:04,200 --> 00:10:06,033
function clauses that use pattern matching

280
00:10:06,033 --> 00:10:08,733
and remember if a function has multiple clauses

281
00:10:08,733 --> 00:10:09,900
while elixir will try

282
00:10:09,933 --> 00:10:12,333
each clause until it finds one that matches

283
00:10:12,333 --> 00:10:14,600
and the first function clause that matches is run

284
00:10:14,966 --> 00:10:15,966
so if we save that away

285
00:10:16,266 --> 00:10:17,100
and give it a go

286
00:10:17,333 --> 00:10:19,966
while we still get our quote as the content of that

287
00:10:19,966 --> 00:10:21,300
file that's being served

288
00:10:21,700 --> 00:10:23,366
so we get the exact same output

289
00:10:23,500 --> 00:10:25,466
as we did when we use the case expression

290
00:10:25,933 --> 00:10:26,900
so which way is better

291
00:10:26,933 --> 00:10:29,333
using case or multi clause functions

292
00:10:29,500 --> 00:10:30,800
well as I mentioned earlier

293
00:10:30,800 --> 00:10:32,433
it's really a design decision and

294
00:10:32,466 --> 00:10:34,100
there's no right or wrong answer

295
00:10:34,300 --> 00:10:35,233
the choice you make

296
00:10:35,266 --> 00:10:37,200
will vary depending on the situation and your

297
00:10:37,200 --> 00:10:38,133
personal preference

298
00:10:38,400 --> 00:10:41,833
in this situation the case is simple enough to read

299
00:10:41,966 --> 00:10:44,166
it has three branches and

300
00:10:44,300 --> 00:10:46,933
one line associated with each branch

301
00:10:47,666 --> 00:10:49,533
now if it had more branches or

302
00:10:49,666 --> 00:10:52,166
multiline expressions for each of those branches

303
00:10:52,466 --> 00:10:54,300
then the readability starts to suffer

304
00:10:54,300 --> 00:10:56,533
and I'd use multi clause functions instead

305
00:10:56,766 --> 00:10:57,800
the only downside

306
00:10:57,800 --> 00:11:00,766
to multi clause functions is that you have to define

307
00:11:01,033 --> 00:11:03,700
separate functions for each branch

308
00:11:03,766 --> 00:11:06,400
but I really like the declarative feel of separate

309
00:11:06,400 --> 00:11:07,466
small functions

310
00:11:07,466 --> 00:11:09,233
with arguments that are pattern matched

311
00:11:09,233 --> 00:11:10,266
it just feels more

312
00:11:10,266 --> 00:11:12,400
congruent with the elixir way of doing things

313
00:11:12,766 --> 00:11:15,333
that being said we're not totally consistent

314
00:11:15,433 --> 00:11:18,533
so try both approaches to develop your own preferences

315
00:11:18,533 --> 00:11:19,666
given the situation

316
00:11:19,900 --> 00:11:21,500
and don't be afraid to change your mind

317
00:11:21,700 --> 00:11:22,766
and change your code

