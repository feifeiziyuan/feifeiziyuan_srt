1
00:00:00,333 --> 00:00:01,833
so now that we have our requests

2
00:00:01,833 --> 00:00:04,466
parsed and we know it's asking for wild things

3
00:00:04,700 --> 00:00:06,866
we need to fill the response body with

4
00:00:06,900 --> 00:00:07,866
those wild things

5
00:00:07,966 --> 00:00:09,333
bears lions and tigers

6
00:00:09,366 --> 00:00:10,466
oh my now

7
00:00:10,466 --> 00:00:12,633
obviously we're going to have to handle requests for

8
00:00:12,633 --> 00:00:14,566
other things which we'll do in the next section

9
00:00:14,566 --> 00:00:16,566
but for now it's all wild things

10
00:00:17,366 --> 00:00:18,433
now as things stand

11
00:00:18,433 --> 00:00:20,900
the parse function returns a map

12
00:00:20,900 --> 00:00:22,933
with an empty response body

13
00:00:23,100 --> 00:00:25,266
and in our pipeline the result of that

14
00:00:25,266 --> 00:00:26,933
is passed into rout

15
00:00:26,966 --> 00:00:28,566
so down in our route function

16
00:00:28,800 --> 00:00:30,266
this co and v map

17
00:00:30,566 --> 00:00:32,766
already has the method and the path filled in

18
00:00:32,766 --> 00:00:35,566
but the response body is empty as nicole said

19
00:00:35,933 --> 00:00:38,766
so in our route function we just need to update the map

20
00:00:38,866 --> 00:00:41,000
to include the response body like

21
00:00:41,000 --> 00:00:43,066
bears lines and tigers as we have here

22
00:00:43,333 --> 00:00:44,400
and we won't need to set

23
00:00:44,400 --> 00:00:46,166
method and path as we're doing here

24
00:00:46,266 --> 00:00:46,566
because

25
00:00:46,566 --> 00:00:49,066
that's already going to be set on this co and v map

26
00:00:49,100 --> 00:00:50,266
when it comes into route

27
00:00:50,533 --> 00:00:52,800
now we've seen this map syntax before

28
00:00:52,866 --> 00:00:55,366
it's a collection of key value pairs

29
00:00:55,466 --> 00:00:57,033
so I said let's hop back

30
00:00:57,033 --> 00:01:00,400
into sex and get more familiar with elixir maps

31
00:01:00,666 --> 00:01:00,766
sure

32
00:01:00,766 --> 00:01:03,166
I'm just going to copy this map and take it with us

33
00:01:03,500 --> 00:01:05,033
I already have an ix session running

34
00:01:05,033 --> 00:01:06,300
so I'm just going to paste that in

35
00:01:06,633 --> 00:01:07,800
and then I'm going to change

36
00:01:07,833 --> 00:01:09,366
the response body to be

37
00:01:09,366 --> 00:01:11,033
an empty string because that's how

38
00:01:11,166 --> 00:01:11,900
this map's going to

39
00:01:11,900 --> 00:01:13,100
start out now

40
00:01:13,100 --> 00:01:15,066
the keys on our map are atoms

41
00:01:15,066 --> 00:01:18,333
so we can get the value for those keys using ceo and v

42
00:01:18,733 --> 00:01:20,533
that's the name of the atom there method

43
00:01:20,533 --> 00:01:21,566
and we get back get

44
00:01:21,666 --> 00:01:24,100
if we want to get the path we can do it that way

45
00:01:24,600 --> 00:01:25,700
and just something to notice

46
00:01:25,700 --> 00:01:27,666
atoms always start with a colon

47
00:01:27,900 --> 00:01:31,333
and the method here uses the syntax method colon

48
00:01:31,333 --> 00:01:32,833
if you're using

49
00:01:33,100 --> 00:01:34,866
atoms as keys in a map

50
00:01:34,933 --> 00:01:35,833
this will be familiar

51
00:01:35,833 --> 00:01:37,266
again if you've programmed in ruby

52
00:01:37,666 --> 00:01:38,166
but what happens

53
00:01:38,166 --> 00:01:40,566
if we try to get the value of a key that doesn't exist

54
00:01:40,700 --> 00:01:44,933
like mike we get back nil if there's no matching key

55
00:01:45,266 --> 00:01:47,333
so instead I prefer to use the dot notation

56
00:01:47,333 --> 00:01:48,500
which is a bit more strict

57
00:01:48,500 --> 00:01:50,033
we can just say con

58
00:01:50,666 --> 00:01:51,466
path

59
00:01:51,566 --> 00:01:54,266
that'll give us back that and if I try it on my name

60
00:01:54,700 --> 00:01:55,933
while I get an actual error

61
00:01:55,933 --> 00:01:58,100
there's no key mic found in that map

62
00:01:58,600 --> 00:02:00,300
now just be aware that this dot notation

63
00:02:00,433 --> 00:02:02,800
only works if the keys are atoms

64
00:02:03,266 --> 00:02:07,033
so what we want to do is update the response body value

65
00:02:07,166 --> 00:02:09,800
now if you're coming from an object oriented background

66
00:02:09,800 --> 00:02:13,200
you would expect that we can use the assignment syntax

67
00:02:13,200 --> 00:02:16,166
because in oo program state is mutable

68
00:02:16,566 --> 00:02:18,633
so you think you could just do a familiar assignment

69
00:02:18,633 --> 00:02:19,433
something like this

70
00:02:19,433 --> 00:02:20,600
where you assign it to

71
00:02:20,933 --> 00:02:22,066
bears for example

72
00:02:22,500 --> 00:02:25,533
but we get this funny compiler partially because

73
00:02:25,933 --> 00:02:28,533
remember that the equal is a match operator

74
00:02:28,866 --> 00:02:30,033
but more important is that

75
00:02:30,166 --> 00:02:33,233
in elixir all data structures are immutable

76
00:02:33,366 --> 00:02:34,400
so we can't change

77
00:02:34,400 --> 00:02:36,833
the co and v map using assignment like this

78
00:02:37,200 --> 00:02:39,633
rather than modifying or mutating the map

79
00:02:39,633 --> 00:02:42,366
we need to transform it into a new map

80
00:02:42,433 --> 00:02:44,166
and we do that by calling a function

81
00:02:44,700 --> 00:02:46,000
so I'm just going to start at the top again

82
00:02:46,000 --> 00:02:48,300
we'll use that h function to get some help

83
00:02:48,333 --> 00:02:50,533
and there's a module in elixir called map

84
00:02:50,733 --> 00:02:53,066
by just key and dot and then hit a tab

85
00:02:53,266 --> 00:02:54,833
it'll do some auto completion

86
00:02:55,066 --> 00:02:57,800
and we want to put a new key and value into the map

87
00:02:57,800 --> 00:02:59,300
so there's a function put

88
00:02:59,300 --> 00:03:01,266
and you notice it has an verity of three

89
00:03:01,266 --> 00:03:02,933
which means it takes three arguments

90
00:03:03,266 --> 00:03:04,500
so if we just have a look at the help

91
00:03:04,733 --> 00:03:07,933
well the first argument is the map that we want to

92
00:03:08,133 --> 00:03:10,500
change is going to create a new copy of this map

93
00:03:10,666 --> 00:03:11,866
we want to add a key

94
00:03:11,866 --> 00:03:14,266
which in this case is b and a value of two

95
00:03:14,500 --> 00:03:16,700
and that's going to return a new map

96
00:03:17,066 --> 00:03:18,866
so we just use map put

97
00:03:19,200 --> 00:03:22,533
first argument is the map and that's in our co and v

98
00:03:22,600 --> 00:03:25,833
variable the key is response body

99
00:03:26,666 --> 00:03:28,366
and the value is bears

100
00:03:29,266 --> 00:03:30,766
and you notice we get back a map

101
00:03:30,933 --> 00:03:32,433
which has the response body

102
00:03:32,800 --> 00:03:36,133
with the new value of bears but if we look at clv

103
00:03:36,866 --> 00:03:39,333
well it's unchanged it has a response body

104
00:03:39,466 --> 00:03:40,366
equal to an empty

105
00:03:40,366 --> 00:03:41,166
string

106
00:03:41,400 --> 00:03:44,466
so it's important to recognize that this didn't modify

107
00:03:44,700 --> 00:03:46,433
this co and v map

108
00:03:46,733 --> 00:03:49,633
remember all data structures and elixir are immutable

109
00:03:49,800 --> 00:03:52,333
instead it creates a new copy of the map

110
00:03:52,333 --> 00:03:54,666
which has the updated response body

111
00:03:54,866 --> 00:03:55,766
so we can add

112
00:03:55,833 --> 00:03:57,000
new key value pairs

113
00:03:57,000 --> 00:03:59,600
but the original map is never modified

114
00:03:59,833 --> 00:04:02,800
all functions that transform data such as map put

115
00:04:03,000 --> 00:04:04,866
return a new copy of the data

116
00:04:05,433 --> 00:04:08,233
therefore in order to capture the new map

117
00:04:08,233 --> 00:04:10,000
returned by the pud function

118
00:04:10,066 --> 00:04:12,466
we need to bind it to a variable

119
00:04:12,700 --> 00:04:15,566
yeah we'll just rebind it to this co n variable

120
00:04:17,100 --> 00:04:20,466
just like that so we used our initial co and v map map

121
00:04:20,566 --> 00:04:22,533
put returned a new copy of that

122
00:04:22,633 --> 00:04:25,233
that we then just rebounded to co and v again

123
00:04:25,733 --> 00:04:27,200
and this is a pretty common way to do it

124
00:04:27,200 --> 00:04:29,000
we just transformed one map

125
00:04:29,466 --> 00:04:30,266
into another map

126
00:04:30,700 --> 00:04:32,866
and if we look at co and v now well

127
00:04:32,866 --> 00:04:35,266
we see that the response body is set to bears

128
00:04:35,266 --> 00:04:36,366
just as we would expect

129
00:04:37,033 --> 00:04:38,100
now updating a map is

130
00:04:38,100 --> 00:04:40,600
so common that there's a handy shortcut to do this

131
00:04:41,733 --> 00:04:45,100
instead of using map put we can use this syntax

132
00:04:45,333 --> 00:04:47,733
we give it cnv then we use a vertical bar

133
00:04:47,966 --> 00:04:49,100
and we give it the key in

134
00:04:49,100 --> 00:04:51,733
the value we want to change would be response body

135
00:04:51,800 --> 00:04:55,300
and let's say this time we want it to be bears lions

136
00:04:55,500 --> 00:04:56,300
tigers

137
00:04:57,300 --> 00:04:58,933
and then if we look at co and v now

138
00:04:59,533 --> 00:05:02,266
we see that this also returns a new copy of the map

139
00:05:02,266 --> 00:05:05,533
the response body is now bears lions and tigers

140
00:05:06,000 --> 00:05:07,966
one thing to keep in mind is using this shortcut

141
00:05:07,966 --> 00:05:08,600
you can

142
00:05:08,600 --> 00:05:11,500
only modify values that already exist in the map and

143
00:05:11,566 --> 00:05:13,766
we already have a response body field

144
00:05:13,766 --> 00:05:14,666
so this works

145
00:05:15,100 --> 00:05:16,466
so this is a nice little shortcut

146
00:05:16,466 --> 00:05:17,833
let's just go ahead and copy this

147
00:05:17,833 --> 00:05:19,600
and we'll paste it back in our

148
00:05:19,700 --> 00:05:20,533
route function

149
00:05:20,766 --> 00:05:22,066
so we'll just paste it in here

150
00:05:22,500 --> 00:05:23,933
we can get rid of this line

151
00:05:24,433 --> 00:05:25,466
and our to do is done

152
00:05:25,466 --> 00:05:26,933
because this creates a new map that

153
00:05:26,966 --> 00:05:28,300
also has the response body

154
00:05:29,000 --> 00:05:30,433
so we have one final to do

155
00:05:30,433 --> 00:05:34,333
now we need to update the http response string

156
00:05:34,366 --> 00:05:35,933
based on what's in the map

157
00:05:36,200 --> 00:05:36,366
like

158
00:05:36,366 --> 00:05:39,366
we don't want content links to be hard coded anymore

159
00:05:39,366 --> 00:05:42,333
and we want this to be dynamically generated

160
00:05:42,733 --> 00:05:44,666
we already know how to access values in the map

161
00:05:44,666 --> 00:05:46,066
so this is pretty straightforward

162
00:05:46,333 --> 00:05:47,533
we're inside of a hear dock

163
00:05:47,533 --> 00:05:49,233
and we can use string interpolation

164
00:05:49,233 --> 00:05:51,200
so instead of this hard coated 20

165
00:05:51,300 --> 00:05:52,500
we can just interpolate

166
00:05:52,633 --> 00:05:54,433
the length of the response body

167
00:05:54,433 --> 00:05:55,766
so we'll use the string module

168
00:05:55,766 --> 00:05:58,500
it has a length function and then we'll pass it the

169
00:05:58,533 --> 00:06:01,766
response body part of the conversation map

170
00:06:02,166 --> 00:06:04,500
and then down here we'll just interpolate

171
00:06:05,233 --> 00:06:07,200
con response body

172
00:06:07,466 --> 00:06:09,566
and that should take care of this to do

173
00:06:09,900 --> 00:06:11,800
and if we save this away and run it

174
00:06:12,033 --> 00:06:13,633
well we get our response

175
00:06:13,900 --> 00:06:15,700
we've been seeing the same output all along

176
00:06:15,700 --> 00:06:17,733
but now it's being dynamically generated

177
00:06:17,833 --> 00:06:19,500
because the route's getting called with

178
00:06:19,500 --> 00:06:20,600
the co and v map

179
00:06:20,666 --> 00:06:22,100
we're putting a response body

180
00:06:22,133 --> 00:06:24,466
and then that's getting passed into format response

181
00:06:24,466 --> 00:06:26,866
and we're dynamically generating that content

182
00:06:27,233 --> 00:06:29,133
so essentially our initial request

183
00:06:29,133 --> 00:06:32,100
is being transformed into a valid response

184
00:06:32,100 --> 00:06:33,833
through a series of functions

185
00:06:33,966 --> 00:06:35,766
next up we'll look at our 2nd request

