1
00:00:00,466 --> 00:00:02,333
let's look at a different kind of request

2
00:00:02,333 --> 00:00:04,533
a post request for creating new things

3
00:00:04,600 --> 00:00:07,233
maybe new bears or any other new resource

4
00:00:07,300 --> 00:00:08,533
now to handle a post request

5
00:00:08,533 --> 00:00:10,566
we have to take into account the request headers

6
00:00:10,800 --> 00:00:12,566
as well as the posted parameters

7
00:00:12,566 --> 00:00:15,433
and this turns out to be a neat example of traversing

8
00:00:15,533 --> 00:00:16,900
and processing lists

9
00:00:17,100 --> 00:00:18,833
we'll see a new type of pattern match and

10
00:00:18,966 --> 00:00:20,066
even a bit of recursion

11
00:00:20,233 --> 00:00:21,033
and in the end

12
00:00:21,100 --> 00:00:23,266
you'll be able to make heads and tails of it

13
00:00:24,100 --> 00:00:26,066
we already have the post request heat up down

14
00:00:26,100 --> 00:00:27,266
here in handler

15
00:00:27,433 --> 00:00:28,966
so the method is post

16
00:00:28,966 --> 00:00:31,033
and then we're just posting the slash bears

17
00:00:31,166 --> 00:00:32,466
and when the form is posted

18
00:00:32,500 --> 00:00:36,200
the form content is encoded in the post request body

19
00:00:36,200 --> 00:00:37,033
which is this last

20
00:00:37,033 --> 00:00:37,833
line right here

21
00:00:38,133 --> 00:00:40,533
and you see that it's just a set of name value pairs

22
00:00:40,533 --> 00:00:42,533
separated by an ampersand

23
00:00:42,700 --> 00:00:45,133
and then the names are separated from the values by

24
00:00:45,133 --> 00:00:46,100
an equal sign

25
00:00:46,533 --> 00:00:48,566
and we have a starting point for the route function

26
00:00:48,600 --> 00:00:49,466
already defined

27
00:00:49,500 --> 00:00:51,133
since there's nothing new to learn here

28
00:00:52,100 --> 00:00:53,533
and I've pasted the last

29
00:00:53,633 --> 00:00:56,266
line of the request up here as a comment

30
00:00:56,266 --> 00:00:57,800
just so we remember what it looks like

31
00:00:58,100 --> 00:01:01,800
our goal here is to parse the last line of the request

32
00:01:02,066 --> 00:01:04,366
into a param's map that looks like this

33
00:01:05,000 --> 00:01:05,866
yeah we'll just have

34
00:01:06,100 --> 00:01:08,233
the keys match up with the keys here

35
00:01:08,233 --> 00:01:10,066
and the values match up with the values

36
00:01:10,166 --> 00:01:11,300
so this is just a map

37
00:01:11,300 --> 00:01:14,266
that represents this post prim string

38
00:01:14,800 --> 00:01:17,333
we can then access the values in the map

39
00:01:17,333 --> 00:01:19,000
and use them in the response body

40
00:01:19,000 --> 00:01:20,433
to pronounce something like

41
00:01:20,766 --> 00:01:23,266
created a whatever the bear type is

42
00:01:23,633 --> 00:01:25,200
named the bear's name

43
00:01:26,666 --> 00:01:27,533
obviously this

44
00:01:27,533 --> 00:01:30,000
works because the para are hard coated for now

45
00:01:30,000 --> 00:01:32,000
so we're going to need to make it dynamic

46
00:01:32,266 --> 00:01:34,266
now we know this doesn't actually create

47
00:01:34,266 --> 00:01:35,633
a bear in the database

48
00:01:35,633 --> 00:01:37,366
we get it you could

49
00:01:37,366 --> 00:01:38,533
actually do whatever you want

50
00:01:38,533 --> 00:01:39,766
with a bear at this point

51
00:01:39,800 --> 00:01:42,266
but that's sort of outside of our scope right now

52
00:01:42,300 --> 00:01:44,100
we're going to stay focused instead

53
00:01:44,133 --> 00:01:47,300
on how our web server handles post request in general

54
00:01:47,666 --> 00:01:48,466
so let's look back

55
00:01:48,466 --> 00:01:49,933
over at how we're parsing the request

56
00:01:50,066 --> 00:01:51,266
over in parser

57
00:01:51,266 --> 00:01:52,966
we have the parse function here

58
00:01:53,366 --> 00:01:54,566
and we're taking the request

59
00:01:54,566 --> 00:01:56,600
and we're splitting the request lines

60
00:01:56,600 --> 00:01:58,200
and then we're just parsing the first

61
00:01:58,200 --> 00:01:59,900
line which is the request line

62
00:02:00,200 --> 00:02:02,066
well let's look at our post request again

63
00:02:02,100 --> 00:02:03,000
over in handler

64
00:02:03,166 --> 00:02:04,900
well here's the request line right here

65
00:02:04,900 --> 00:02:06,866
which we're parsing at our parts function

66
00:02:06,900 --> 00:02:09,866
but we also need to parse the last line of the request

67
00:02:09,933 --> 00:02:11,900
this is the request body

68
00:02:12,100 --> 00:02:14,033
so that we can create that param's map

69
00:02:14,433 --> 00:02:16,100
so one way to do this would be to

70
00:02:16,100 --> 00:02:18,133
split the request in the lines

71
00:02:18,166 --> 00:02:20,066
and then use list at last

72
00:02:20,300 --> 00:02:22,566
to get that last line the body

73
00:02:22,866 --> 00:02:24,033
but thinking ahead

74
00:02:24,033 --> 00:02:26,733
we ultimately want to restructure the request

75
00:02:26,766 --> 00:02:28,300
into three parts that we can work

76
00:02:28,300 --> 00:02:31,266
with the request line which is a string

77
00:02:31,766 --> 00:02:34,600
the body which is a string of para

78
00:02:34,700 --> 00:02:36,300
and then the header lines

79
00:02:36,300 --> 00:02:38,133
because this content type here

80
00:02:38,300 --> 00:02:39,100
will impact

81
00:02:39,100 --> 00:02:42,533
how we ultimately parts the para in the next module

82
00:02:42,800 --> 00:02:45,266
so we'll start by splitting the top two

83
00:02:45,266 --> 00:02:47,366
parts from the param string

84
00:02:47,533 --> 00:02:50,700
and that's easy to do because there's two consecutive

85
00:02:51,200 --> 00:02:54,000
end characters right here and here

86
00:02:54,566 --> 00:02:56,733
so back over and parer let's go ahead and do that

87
00:02:56,733 --> 00:02:58,500
we'll use string split

88
00:02:58,733 --> 00:03:00,133
we're going to take the whole request

89
00:03:00,133 --> 00:03:01,333
and we're going to split it

90
00:03:01,500 --> 00:03:02,733
on a double new line

91
00:03:02,966 --> 00:03:04,166
and that's going to return a

92
00:03:04,166 --> 00:03:07,100
list with two elements so we can pattern match on it

93
00:03:07,200 --> 00:03:09,700
the first element is the request line in the headers

94
00:03:09,700 --> 00:03:12,466
which I'm just going to put in a variable called top

95
00:03:12,666 --> 00:03:13,533
and then the

96
00:03:13,700 --> 00:03:15,566
second element is going to be our prem string

97
00:03:15,566 --> 00:03:17,300
that's the last line of the request

98
00:03:18,500 --> 00:03:20,266
so now we have the prom string

99
00:03:20,333 --> 00:03:22,000
which is what we were aiming for

100
00:03:22,233 --> 00:03:25,600
but we lost our request line while we can get it back

101
00:03:25,933 --> 00:03:28,966
by splitting top rather than request

102
00:03:29,500 --> 00:03:31,300
yeah right here we'll just use top

103
00:03:31,700 --> 00:03:33,666
and then we're going to split it into its lines

104
00:03:33,666 --> 00:03:34,533
that's going to be the request

105
00:03:34,533 --> 00:03:35,500
lines and the header lines

106
00:03:35,500 --> 00:03:37,133
but we only care about the first one

107
00:03:37,366 --> 00:03:39,766
and we split it to get the individual parts

108
00:03:39,766 --> 00:03:41,466
the method the path and

109
00:03:41,700 --> 00:03:43,166
the protocol which we don't care about

110
00:03:43,666 --> 00:03:44,700
if we save that away

111
00:03:46,300 --> 00:03:47,100
and we run it

112
00:03:47,300 --> 00:03:49,366
and it still works so we haven't broken anything

113
00:03:49,700 --> 00:03:50,633
but here's the problem

114
00:03:50,800 --> 00:03:52,366
looking back at the post request

115
00:03:52,566 --> 00:03:54,266
we know we're parsing this line

116
00:03:54,566 --> 00:03:56,700
but we need these remaining lines

117
00:03:56,700 --> 00:03:59,633
the header lines to be in a list of their own

118
00:04:00,000 --> 00:04:02,733
so that we have three distinct parts to work with

119
00:04:03,166 --> 00:04:04,066
and it turns out

120
00:04:04,066 --> 00:04:06,900
we can write a pattern to match a request line

121
00:04:07,033 --> 00:04:09,533
followed by any number of header lines

122
00:04:09,866 --> 00:04:11,200
to demonstrate how we're going to do that

123
00:04:11,233 --> 00:04:13,766
let's play around with a simple list of numbers in six

124
00:04:13,933 --> 00:04:16,366
now we know that we can match and destruct the list

125
00:04:16,366 --> 00:04:18,800
by putting a pattern on the left hand side

126
00:04:19,166 --> 00:04:20,766
so if numbs is on the right hand side

127
00:04:21,366 --> 00:04:22,866
our pattern is going to look like this

128
00:04:22,866 --> 00:04:26,500
let's say we want to capture these in variables ABCD

129
00:04:26,666 --> 00:04:27,466
and e

130
00:04:27,933 --> 00:04:30,900
well the value of a is one value b is going to be two

131
00:04:31,066 --> 00:04:33,400
all the way through to e which has a value of five

132
00:04:33,900 --> 00:04:35,433
but suppose we want the first

133
00:04:35,500 --> 00:04:37,366
element of the list to be a value

134
00:04:37,533 --> 00:04:40,366
and then the remaining elements to be a list

135
00:04:40,733 --> 00:04:42,600
well a list has a head and a tail

136
00:04:42,600 --> 00:04:44,733
which we can extract through pattern matching

137
00:04:44,800 --> 00:04:46,766
using something called the cons operator

138
00:04:46,933 --> 00:04:50,033
it looks like this here's the pattern head vertical bar

139
00:04:50,200 --> 00:04:50,833
tail

140
00:04:50,833 --> 00:04:53,333
and then the right hand side we have our numbers list

141
00:04:53,866 --> 00:04:56,266
now if we look at the value of head it's one the

142
00:04:56,266 --> 00:04:58,533
value of tail is a list

143
00:04:58,700 --> 00:05:00,266
with the values two through five

144
00:05:01,100 --> 00:05:04,466
so what follows then that if the tail is a list itself

145
00:05:04,666 --> 00:05:06,700
then it has a head and a tail as well

146
00:05:06,966 --> 00:05:08,966
which means we can use the same pattern match

147
00:05:08,966 --> 00:05:10,166
so if I just go back up here

148
00:05:10,500 --> 00:05:12,366
and put tail on the right hand side

149
00:05:12,966 --> 00:05:14,900
well now the value of head is two

150
00:05:15,266 --> 00:05:18,166
the value of tail is a list three four and five

151
00:05:18,566 --> 00:05:20,566
there's no magic to the naming hair

152
00:05:20,566 --> 00:05:24,033
in fact head and tail are often abbreviated as h and t

153
00:05:24,033 --> 00:05:27,400
respectively the cons operator the vertical bar

154
00:05:27,400 --> 00:05:29,433
here it's the special sauce

155
00:05:29,900 --> 00:05:32,233
so let's go ahead and continue traversing the list this

156
00:05:32,233 --> 00:05:33,033
way

157
00:05:33,866 --> 00:05:35,400
now the value of head is three

158
00:05:36,466 --> 00:05:37,600
tail is four and five

159
00:05:39,200 --> 00:05:40,166
now heads four

160
00:05:41,233 --> 00:05:43,966
and tail is a single element list five

161
00:05:44,366 --> 00:05:45,966
now here's where things get interesting

162
00:05:47,800 --> 00:05:49,566
now the head is the value five

163
00:05:50,200 --> 00:05:52,666
and the tail is an empty list

164
00:05:52,833 --> 00:05:56,133
so the tail of the final element of any list is

165
00:05:56,266 --> 00:05:57,433
always an empty list

166
00:05:57,866 --> 00:05:59,333
so now what happens if we do this

167
00:06:00,166 --> 00:06:02,566
well that's not going to match because tail

168
00:06:02,766 --> 00:06:03,966
is an empty list

169
00:06:04,033 --> 00:06:06,633
and that doesn't match a head and a tail

170
00:06:07,066 --> 00:06:09,033
so a list is either empty

171
00:06:09,233 --> 00:06:11,400
or it consists of a head and a tail

172
00:06:11,633 --> 00:06:15,766
and the tail is itself a list which could be empty

173
00:06:16,066 --> 00:06:19,266
and we've seen how we can traverse a list recursively

174
00:06:19,366 --> 00:06:20,933
now we'll come back to this recursive

175
00:06:20,933 --> 00:06:22,233
part a little bit later

176
00:06:22,766 --> 00:06:24,433
coming back to our post request

177
00:06:24,600 --> 00:06:25,066
for now

178
00:06:25,066 --> 00:06:27,700
we want to write a pattern that gives us this request

179
00:06:27,700 --> 00:06:31,100
line and then gives us these header lines as a list

180
00:06:31,333 --> 00:06:32,733
so this is going to be the head

181
00:06:32,933 --> 00:06:34,566
and this is going to be the tail

182
00:06:34,900 --> 00:06:36,500
so let's go back over to our parser

183
00:06:36,933 --> 00:06:39,466
so remember that the request line in the headers are in

184
00:06:39,466 --> 00:06:40,266
top

185
00:06:40,666 --> 00:06:42,033
so once we have the top

186
00:06:42,400 --> 00:06:43,566
we're going to split it

187
00:06:45,166 --> 00:06:46,366
just on new lines

188
00:06:46,466 --> 00:06:47,800
now that's going to return a list

189
00:06:47,800 --> 00:06:49,533
so we want a pattern match over here

190
00:06:49,866 --> 00:06:51,466
that gives us the head and the tail

191
00:06:51,633 --> 00:06:53,866
well the head is the request line

192
00:06:53,966 --> 00:06:55,800
so we'll put in a variable request line

193
00:06:56,033 --> 00:06:57,166
use our vertical bar

194
00:06:57,400 --> 00:07:00,133
and then the tail we want header lines

195
00:07:00,400 --> 00:07:03,033
then we can change how we parse the request line

196
00:07:03,066 --> 00:07:04,466
into its three parts

197
00:07:04,700 --> 00:07:06,266
instead of doing it this way

198
00:07:06,266 --> 00:07:08,200
we can simplify this quite a bit

199
00:07:08,433 --> 00:07:11,966
we just say string split on the request line

200
00:07:12,733 --> 00:07:14,366
and we split that by a space

201
00:07:14,366 --> 00:07:16,466
to get the three parts of that request line

202
00:07:16,833 --> 00:07:17,633
save that away

203
00:07:18,133 --> 00:07:20,866
now back over an ix if we recompile that

204
00:07:21,533 --> 00:07:23,300
well it looks like we haven't broken anything

205
00:07:23,700 --> 00:07:26,833
but we have the bonus of having the request destruct

206
00:07:26,900 --> 00:07:27,966
into three parts

207
00:07:28,400 --> 00:07:31,066
so now we need to parse the param string

208
00:07:31,333 --> 00:07:35,066
so we get the name and the type of the bear dynamically

209
00:07:35,366 --> 00:07:36,800
well there's no need to reinvent the wheel

210
00:07:36,800 --> 00:07:37,333
here

211
00:07:37,333 --> 00:07:40,300
elixir has a function for decoding this query string

212
00:07:40,433 --> 00:07:42,200
in the uri module

213
00:07:42,333 --> 00:07:44,800
there's a function called decode query

214
00:07:45,500 --> 00:07:47,166
and then I've got the query string right here

215
00:07:47,666 --> 00:07:49,200
that's the last line of our request

216
00:07:49,766 --> 00:07:51,400
and what's great about this function is

217
00:07:51,400 --> 00:07:52,533
it returns a map

218
00:07:52,633 --> 00:07:54,033
where the keys and the values

219
00:07:54,033 --> 00:07:55,833
are the same thing that are in the query string

220
00:07:56,133 --> 00:07:58,100
now you might be tempted to convert the

221
00:07:58,100 --> 00:07:59,866
keys from strings

222
00:07:59,900 --> 00:08:01,366
to atoms and

223
00:08:01,366 --> 00:08:04,033
using atoms as keys is generally a pretty good idea

224
00:08:04,366 --> 00:08:06,633
however in this case it's dangerous

225
00:08:06,633 --> 00:08:07,166
because these

226
00:08:07,166 --> 00:08:09,733
strings are coming from outside of our application

227
00:08:09,800 --> 00:08:12,433
and since atoms aren't garbage collected in elixir

228
00:08:12,533 --> 00:08:14,200
if we convert them to atoms

229
00:08:14,200 --> 00:08:15,600
well we can run out of memory

230
00:08:16,300 --> 00:08:17,833
now back over in our parser

231
00:08:17,933 --> 00:08:19,433
we can define a function

232
00:08:19,533 --> 00:08:22,166
that will decode this param string

233
00:08:22,466 --> 00:08:23,800
just going to put it right down here

234
00:08:25,933 --> 00:08:28,166
and I'll call it parse para

235
00:08:28,500 --> 00:08:30,233
that's going to take in our param string

236
00:08:31,700 --> 00:08:33,466
and I'm just going to use a pipeline here

237
00:08:33,833 --> 00:08:36,000
there's a new line at the end of that param string

238
00:08:36,000 --> 00:08:37,000
so I want to trim that off

239
00:08:37,000 --> 00:08:38,766
I'll use string trim to do that

240
00:08:39,200 --> 00:08:42,566
and then we can use that function we used in ix uri

241
00:08:42,833 --> 00:08:44,466
decode query

242
00:08:44,733 --> 00:08:48,133
and remember this is going to return a map of the para

243
00:08:48,133 --> 00:08:49,533
and then up here in pars

244
00:08:49,533 --> 00:08:50,533
we'll call that function

245
00:08:50,533 --> 00:08:52,200
and we're going to assign the result to

246
00:08:52,200 --> 00:08:54,133
a variable called paras

247
00:08:54,766 --> 00:08:56,333
just going to be parsed para

248
00:08:57,666 --> 00:08:59,433
and passing in that pram string

249
00:08:59,733 --> 00:09:02,400
then once we have the prams we want the prams map

250
00:09:02,400 --> 00:09:04,166
to be part of the conversation

251
00:09:04,566 --> 00:09:07,100
so we'll just add a feel down here prams

252
00:09:07,300 --> 00:09:08,833
and set it to that variable

253
00:09:09,333 --> 00:09:10,833
so let's save that away and give it a try

254
00:09:11,200 --> 00:09:12,900
we'll recompile our application

255
00:09:13,800 --> 00:09:15,433
ooh and we get an air message

256
00:09:15,833 --> 00:09:19,633
it's saying the key paras was not found in survey

257
00:09:19,700 --> 00:09:21,700
com which remembers a s

258
00:09:21,933 --> 00:09:24,166
don't you just love it when a plan comes together

259
00:09:24,700 --> 00:09:26,366
yeah we set up this structure to get

260
00:09:26,366 --> 00:09:28,566
type safety and that's exactly what it gave us

261
00:09:28,933 --> 00:09:31,300
we need to add a field to the struck

262
00:09:31,633 --> 00:09:33,500
so I'm going to put these on separate lines

263
00:09:35,533 --> 00:09:37,500
and then we'll add the field paras

264
00:09:37,933 --> 00:09:40,100
and we're going to default it just to an empty map

265
00:09:40,500 --> 00:09:41,900
now let's see what happens if we save that

266
00:09:41,900 --> 00:09:42,933
away in recompile

267
00:09:43,500 --> 00:09:45,233
so it turns out we get another error

268
00:09:45,233 --> 00:09:46,733
but it doesn't have to do with our code

269
00:09:46,733 --> 00:09:48,800
it looks like recompile just didn't pick up the change

270
00:09:49,333 --> 00:09:52,100
so I restarted ix and everything's now running

271
00:09:52,866 --> 00:09:55,866
and we see that we have the prams in our logger output

272
00:09:56,300 --> 00:09:57,600
so now we just need to use these

273
00:09:57,600 --> 00:09:59,466
prams in our route function

274
00:09:59,866 --> 00:10:01,833
that's back over in our handler module

275
00:10:01,933 --> 00:10:03,966
and we have this hard coated prams right here

276
00:10:04,166 --> 00:10:05,500
well we don't need that anymore

277
00:10:05,766 --> 00:10:07,333
instead we can just use

278
00:10:07,600 --> 00:10:08,333
come

279
00:10:08,333 --> 00:10:10,666
dot params because that's the new field that we added

280
00:10:10,900 --> 00:10:12,100
and the same thing right here

281
00:10:13,933 --> 00:10:14,800
save that away

282
00:10:15,433 --> 00:10:16,966
and now if we recompile this

283
00:10:17,400 --> 00:10:20,300
well sure enough we get created a brown bear named ball

284
00:10:20,600 --> 00:10:22,966
so our para are no longer hard coated

285
00:10:23,166 --> 00:10:26,100
but the way we did this it's a bit presumptuous

286
00:10:26,266 --> 00:10:28,066
and we'll see why in the next section

