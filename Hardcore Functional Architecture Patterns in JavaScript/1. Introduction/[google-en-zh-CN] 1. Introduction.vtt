WEBVTT

1
00:00:00.240 --> 00:00:02.640
好的，欢迎来到功能架构。
Okay, welcome to functional architecture.

2
00:00:02.640 --> 00:00:05.110
我是布赖恩·朗斯多夫，我会是你的老师。
I'm Brian Lonsdorf, I'll be your teacher.

3
00:00:05.110 --> 00:00:08.970
我们今天将学习架构和函数式编程。
And we're gonna learn about architecture and functional programming today.

4
00:00:08.970 --> 00:00:12.350
所以，教学架构存在这个问题。
So, there's this issue with teaching architecture.

5
00:00:12.350 --> 00:00:15.731
它总是发生在你尝试教授建筑和
Its always happens where you try to teach architecture and

6
00:00:15.731 --> 00:00:17.941
它会有所有这些好处。
it's gonna have all these benefits.

7
00:00:17.941 --> 00:00:22.239
但是当你教它的时候，你实际上不能在课堂上展示它们，因为你
But you can't actually show them in the class when you're teaching it because you

8
00:00:22.239 --> 00:00:26.440
希望示例足够简单，可以在一天内完成理解。
want the examples to be simple enough to consume and understand in a day.

9
00:00:26.440 --> 00:00:29.900
而建筑真的只有在你达到这种突破点时才会得到回报。
And architecture really only pays off once you hit this kind of breaking point.

10
00:00:29.900 --> 00:00:32.380
有足够的复杂性，你的应用程序变得足够大。
There's enough complexity and your app gets big enough.

11
00:00:32.380 --> 00:00:37.630
所以我们将尝试平衡这条线 看看我们如何
So we're gonna try to balance that line and look at how we can

12
00:00:37.630 --> 00:00:42.270
一旦应用程序变得足够大，应用这种架构就可以获得好处。
apply this architecture to get benefits once the app gets kind of big enough.

13
00:00:42.270 --> 00:00:44.650
那么，我们的目标是什么？
So, what is our goal?

14
00:00:44.650 --> 00:00:45.920
为什么，我们为什么要这样做？
Why, why are we doing this?

15
00:00:45.920 --> 00:00:48.300
我们希望我们的应用程序更加模块化还是
Do we want our apps to be more modular or

16
00:00:48.300 --> 00:00:53.350
我们是否需要它们更具可扩展性、性能或可维护性？
the, do we need them to be more extensible or performance or maintainable?

17
00:00:53.350 --> 00:00:57.645
每个应用程序都有一组不同类型的您想要追求的值。
Each app has a different kind of set of values that you wanna go after.

18
00:00:57.645 --> 00:01:02.835
所以对于我们今天的指南针，我认为总的来说，我们可以建立
And so for our compass today and in general I think, we can establish

19
00:01:02.835 --> 00:01:07.275
您开始的功能架构的一个很好的目标。
a good goal for functional architecture that you start with.

20
00:01:07.275 --> 00:01:12.285
由于您有不同的要求，您可以专注于不同的目标。
And as you have different requirements, you can focus on different goals.

21
00:01:12.285 --> 00:01:13.135
那么这个目标是什么？
So what is that goal?

22
00:01:13.135 --> 00:01:13.845
我们可以在这里做什么？
What can we do here?

23
00:01:14.980 --> 00:01:17.540
让我们退后一步，看看这段代码。
Let's just take a step back and look at this code.

24
00:01:17.540 --> 00:01:19.680
这是一个漫长的过程，你不必阅读它。
It's a long procedure, you don't have to read it.

25
00:01:19.680 --> 00:01:23.000
但是当我们做建筑时，我们真正在做的是我们只是一种群体
But what we're really doing when we do architecture is we just kind of group

26
00:01:23.000 --> 00:01:24.220
事物。
things.

27
00:01:24.220 --> 00:01:25.220
然后我们给他们一个名字。
And then we give them a name.

28
00:01:25.220 --> 00:01:29.170
因此，我们将这些命名过程分组。
So we have these named procedures that we've grouped.

29
00:01:29.170 --> 00:01:32.790
然后我们把那些有名字的程序分成更多的组，
And then we group those procedures with names into more groups,

30
00:01:32.790 --> 00:01:35.719
我们称之为模块、模块或类。
and we call this modulars, modules or classes.

31
00:01:36.730 --> 00:01:39.330
然后那些得到名字。
And then those get names.

32
00:01:39.330 --> 00:01:40.900
然后我们有数据类型。
And then we have datatypes.

33
00:01:40.900 --> 00:01:42.930
我们将数据分组到这些小包中。
And we group data into these little bundles.

34
00:01:42.930 --> 00:01:43.810
然后我们给出这些名字。
And then we give those names.

35
00:01:43.810 --> 00:01:48.600
我们在名字之上有名字，这个巨大的名字云。
We have names on tops of names on tops of names, this giant cloud of names.

36
00:01:48.600 --> 00:01:50.300
感谢 Joe Nelson 提供幻灯片。
Thank you to Joe Nelson for the slide.

37
00:01:50.300 --> 00:01:52.590
就是想叫出来
Just wanna call that out.

38
00:01:52.590 --> 00:01:55.160
所以，领域驱动设计是一本好书。
So, Domain Driven Design is a great book.

39
00:01:55.160 --> 00:01:59.670
它真的，真的告诉你如何通过隐喻和使用这些名称和
It really, really tells you how coding by metaphor and using these names and

40
00:01:59.670 --> 00:02:03.750
真正进入使用无处不在的领域，
really getting into the zone of of using ubiquitous,

41
00:02:03.750 --> 00:02:07.260
无处不在的语言来模拟现实世界。
ubiquitous language to model the real world.

42
00:02:07.260 --> 00:02:12.370
真的，真的很努力，直到你把它提炼成完美的比喻。
And really, really hammering on that until you distill it into the perfect metaphors.

43
00:02:12.370 --> 00:02:15.680
我们这里的隐喻有点问题。
And we kind of have a problem with metaphors here.

44
00:02:15.680 --> 00:02:18.670
您必须了解域和上下文。
One you have to know about the domain and context.

45
00:02:18.670 --> 00:02:19.885
你不能只是跳进一个应用程序。
You can't just jump into an app.

46
00:02:19.885 --> 00:02:23.922
您必须了解代码本身中没有的所有内容才能理解
You have to know everything about what's not in the code itself to understand

47
00:02:23.922 --> 00:02:24.970
代码。
the code.

48
00:02:24.970 --> 00:02:28.680
然后我们最终得到像处理器和转换器这样的东西。
And then we end up with like these things like processor and converter.

49
00:02:28.680 --> 00:02:29.750
那不是真实的世界，
That's not real world,

50
00:02:29.750 --> 00:02:33.725
如果您曾经编写过处理器类，请举手。
like raise your hand if you've ever written a processor class.

51
00:02:33.725 --> 00:02:37.560
所以你，你最终得到了这些计算机东西的混合隐喻，
So you're, you end up with these mixed metaphors of computer stuff and

52
00:02:37.560 --> 00:02:40.940
现实世界的东西和事物随着时间的推移而发展并变得模糊
real world stuff and things evolve over time and blur and

53
00:02:40.940 --> 00:02:43.150
你最终会得到这个功能的大杂烩。
you end up with this hodgepodge of functionality.

54
00:02:43.150 --> 00:02:45.510
有各种按名称分组，但是
There's all kind of grouped by name, but

55
00:02:45.510 --> 00:02:48.510
功能可以以不同的方式分组。
the functionality may be grouped in different ways.

56
00:02:48.510 --> 00:02:55.070
所以，马上，如果我们要捕获程序
So, right off the bat, if we're gonna be capturing procedures for

57
00:02:55.070 --> 00:03:00.395
重用，我们只依赖于一个名字，我们不知道我们能用它做什么，
reuse and we're just depending on a name, we don't know what we can do with that,

58
00:03:00.395 --> 00:03:03.215
真的，没有实际的构图规则。
really, there's no actual rules of composition.

59
00:03:03.215 --> 00:03:07.945
如果我们打算在对它进行分组和命名后重新组合它，
If we're planning on recomposing this after grouping it and naming it,

60
00:03:07.945 --> 00:03:10.205
我们不知道我们是否可以多次运行它。
we don't know if we can run it more than once.

61
00:03:10.205 --> 00:03:12.145
我们可以以不同的顺序运行它吗？
Can we run it in different orders?

62
00:03:12.145 --> 00:03:14.365
它是否改变了我们程序的其他部分？
is it changing other parts of our program?

63
00:03:14.365 --> 00:03:16.225
它是如何交互的？
How does it interact?

64
00:03:16.225 --> 00:03:21.680
所以我们实际定义的这些东西并不是真的
So these things that we are actually defining don't really

65
00:03:21.680 --> 00:03:24.260
成为我们程序中的知识。
become knowledge in our program.

66
00:03:24.260 --> 00:03:28.600
所以我们想在这里关注这些属性，对吗？
So we want to focus on these properties here, right?

67
00:03:28.600 --> 00:03:32.070
每当我们开发一个存储过程时，
Whenever we develop a stored procedure,

68
00:03:32.070 --> 00:03:34.540
我们想要围绕组合的属性。
we want to have properties around composition.

69
00:03:34.540 --> 00:03:36.400
毕竟，我们正在重用这些东西。
After all, we're reusing these things.

70
00:03:36.400 --> 00:03:38.930
我们将在不同的情况下编写它们。
We're gonna be composing them in different situations.

71
00:03:38.930 --> 00:03:44.697
这些法律保护我们免于仅仅混淆名称。
And these laws are what protect us from just the confusion of the name alone.

72
00:03:44.697 --> 00:03:48.338
所以我们的第一个目标是找到定义好的函数
So our first goal is to find functions with defined

73
00:03:48.338 --> 00:03:52.334
合约，主要是那些数学属性。
contracts,mainly those mathematical properties.

74
00:03:52.334 --> 00:03:56.106
所以我们要看看这个类，那是用户和
So we are gonna look at this class ,that's user and

75
00:03:56.106 --> 00:04:00.330
我们这里有一个全名。你是完美的，对吧？
we have a full name here.,and yhis is perfect, right?

76
00:04:00.330 --> 00:04:03.190
我们有一个全名功能，工作得很好。
We have a full name function, works just fine.

77
00:04:03.190 --> 00:04:05.590
我们有 Bobby Fischer，他出来了。
We have Bobby Fischer, comes right out.

78
00:04:05.590 --> 00:04:10.330
所以，我们在这里要做的另一件事是尝试分解并概括它。
So, another thing we're gonna do here is try to break this down and generalize it.

79
00:04:10.330 --> 00:04:11.820
让我们看看这个过程是如何工作的。
Let's see how that process works.

80
00:04:12.970 --> 00:04:17.540
所以我们有一个用户类型和一个全名函数。
So we have a user type and a full name function.

81
00:04:17.540 --> 00:04:20.760
在这里，我们有效地加入了与班级相同的事情。
And here we're joining the same thing as the class effectively.

82
00:04:21.820 --> 00:04:23.830
它以相同的结果结束。
And it ends up with the same result.

83
00:04:23.830 --> 00:04:27.440
但是如果我们进一步概括它，我的意思是，我们只是传递名字和
But what if we generalize it further, I mean, we're just passing first name and

84
00:04:27.440 --> 00:04:27.981
姓。
last name.

85
00:04:27.981 --> 00:04:31.760
为什么我们不创建一个带有空格函数的连接？
Why don't we create a join with spaces function?

86
00:04:31.760 --> 00:04:34.180
我们不必称呼它的名字或姓氏，并且
We don't have to call it first or last name, and

87
00:04:34.180 --> 00:04:39.100
最终是完全相同的功能，但它更加通用和可重用。
ends up being the same exact function, but it's much more generic and reusable.

88
00:04:39.100 --> 00:04:41.950
看，我们有属性，它是关联的。
And look, we have properties, it's associative.

89
00:04:41.950 --> 00:04:45.720
事实证明，我们可以以任何嵌套顺序调用 jonWithSpace。
Turns out, we can call jonWithSpace in any nested order.

90
00:04:45.720 --> 00:04:47.281
只要这一切都叫
As long as it's all called,

91
00:04:47.281 --> 00:04:52.107
我们如何关联括号并不重要，这就是关联的含义。
it doesn't matter how we associate the parentheses, that's what associated means.

92
00:04:52.107 --> 00:04:56.310
这是这个通用函数的可组合契约。
And that's a composable contract for this generic function.

93
00:04:56.310 --> 00:05:01.720
我要再研究一下泛型函数。
I'm gonna hammer on generic functions for a little while longer.

94
00:05:01.720 --> 00:05:06.020
在这里使用 joinWithSpaces，我们可以更进一步，称之为可连接。
Here with joinWithSpaces, we could take it a step further and call it joinable.

95
00:05:06.020 --> 00:05:11.050
我们将采用任何可连接并在其上调用 join ，然后我们将传入数组。
We'll take any joinable and called join on it and then we'll pass in the array.

96
00:05:11.050 --> 00:05:14.720
从字面上看，joinWithSpaces 无能为力
And literally, there's nothing joinWithSpaces can do

97
00:05:14.720 --> 00:05:18.670
除了 call join 之外，因为它对它的数据类型一无所知。
other than call join, because it knows nothing about its data type.

98
00:05:18.670 --> 00:05:24.280
所以通过概括，我们正在减少可能性，更简单的实现，
So by generalizing, we're making less possibility, simpler implementations,

99
00:05:24.280 --> 00:05:29.250
更多的重用，它变成了一个更通用的泛化函数。
more reuse, and it becomes a more generic generalized function.

100
00:05:29.250 --> 00:05:34.360
我们实际上收集了我们恢复封装的内容。
And we actually gather what we recover encapsulation.

101
00:05:34.360 --> 00:05:37.620
对象通过信息隐藏给我们封装，但是
Objects give us encapsulation through information hiding, but

102
00:05:37.620 --> 00:05:40.470
这实际上是信息隐藏。
this effectively is information hiding.

103
00:05:40.470 --> 00:05:43.040
如果我们只知道我们可以在我们的对象上调用 join，
If we only know we can call join on our objects,

104
00:05:43.040 --> 00:05:45.990
我们对此一无所知，我们正在隐藏信息。
we know nothing else about it, we're hiding information.

105
00:05:45.990 --> 00:05:49.260
我们可以把它带到逻辑上，只定义这个身份函数。
And we can take that to its logical end and just define this identity function.

106
00:05:49.260 --> 00:05:52.920
而这个恒等函数，它对这个a一无所知，
And this identity function, it knows nothing of this a,

107
00:05:52.920 --> 00:05:56.580
它只是需要一个 a 并返回一个 a。
it's just gonna take an a and return an a.

108
00:05:56.580 --> 00:06:00.220
如果它调用任何东西或对它做任何事情，我的意思是，
And if it called anything on it or did anything to it, I mean,

109
00:06:00.220 --> 00:06:04.050
它会破坏那种拿走任何东西并将其归还的合同。
it would break that contract of taking anything at all and returning it back.

110
00:06:04.050 --> 00:06:09.030
因此，通过对此一无所知并将其概括为逻辑结果，
So by not knowing anything about this and generalizing it to its logical end,

111
00:06:09.030 --> 00:06:12.960
尽我们所能，我们实际上是在做信息隐藏和
as much as we can make it general, we're actually doing information hiding and

112
00:06:12.960 --> 00:06:16.340
保护我们自己免受整个应用程序的涟漪变化。
protecting ourselves from rippling changes across our application.
