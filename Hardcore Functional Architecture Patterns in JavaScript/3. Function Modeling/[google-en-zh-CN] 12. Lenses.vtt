WEBVTT

1
00:00:00.150 --> 00:00:05.710
我已经设置好了，这是因为镜头太简单了。
I've set us up already, and this is because lenses are so simple.

2
00:00:06.750 --> 00:00:11.203
它们太复杂了，就像一个非常深刻的主题，
They're so complex, it's like a really deep subject,

3
00:00:11.203 --> 00:00:15.017
你可以用镜头做任何事情。
you can do anything and everything with lenses.

4
00:00:15.017 --> 00:00:20.701
您可以使用内置镜头的函子做任何事情
You can do everything you can with functors with lenses which are built

5
00:00:20.701 --> 00:00:26.479
在函子上，我们将使用镜头的方式非常简单，
on functors, and the way we're gonna just use lenses is pretty light,

6
00:00:26.479 --> 00:00:30.427
但要知道你可以做最了不起的事情，
but know that you can do the most amazing things,

7
00:00:30.427 --> 00:00:33.880
您可以仅用镜头重写每个应用程序。
you can rewrite every app in just lenses.

8
00:00:33.880 --> 00:00:39.197
[笑] 虽然，我认为很多人都反对，因为 Haskell 和
[LAUGH] Although, I think that a lot of people have push back because Haskell and

9
00:00:39.197 --> 00:00:44.840
其他镜头库根据所有这些小波浪运算符定义它，并且
other lens libraries defined it in terms of all these little squiggly operators and

10
00:00:44.840 --> 00:00:46.870
就像这是什么？
it's just like what is this?

11
00:00:46.870 --> 00:00:53.150
它读不正确，所以这是这些语言中镜头的一个缺点。
It doesn't read right, so that's one drawback of lenses in those languages.

12
00:00:53.150 --> 00:00:58.175
这里我们只有函数，它们很好，但是你可以定义一个镜头
Here we just have functions and they're fine, but you can define a lens

13
00:00:58.175 --> 00:01:02.889
映射到事物上，你可以定义一个镜头，所以退后一步。
that maps over things, you can define a lens, so take a step back.

14
00:01:02.889 --> 00:01:06.838
所以我在这里所做的是我从 Lambda 中引入了镜头库，
So what I've done here is I brought in the lens library from Lambda,

15
00:01:06.838 --> 00:01:08.300
这是一个相当天真。
it's a fairly naive.

16
00:01:08.300 --> 00:01:13.696
如果你打算使用镜头库并且喜欢真正致力于镜头，
If you're gonna use a lens library and like really commit to lenses,

17
00:01:13.696 --> 00:01:19.744
我强烈建议环顾四周，我认为有一种叫做optica，
I would highly recommend looking around there's one called optica I think,

18
00:01:19.744 --> 00:01:23.298
然后还有一些其他的。
and then there's a few other ones out there.

19
00:01:23.298 --> 00:01:27.851
但绝对想专注于[笑]没有双关语，
But definitely wanna focus on [LAUGH] no pun intended,

20
00:01:27.851 --> 00:01:33.025
这个课程的顶级部分，顶级，简单的东西。
the top parts, the top level, simple stuff for this class.

21
00:01:34.220 --> 00:01:37.336
所以我通常定义一个小的命名空间对象，
So I usually define a little namespaced object,

22
00:01:37.336 --> 00:01:41.599
因为我的镜头往往与应用程序中的东西同名。
because my lenses tend to be the same names as the things in the app.

23
00:01:41.599 --> 00:01:46.386
所以我喜欢用 L 来命名它，[笑] 而我们所做的就是我们已经说过
So I like to namespace it with L, [LAUGH] and what we've done is we've said

24
00:01:46.386 --> 00:01:52.136
LensProp(&#39;name&#39;)，这就是名称lens，我们有lensProp Street。
LensProp('name'), and that'll be the name lens, and we have lensProp Street.

25
00:01:52.136 --> 00:01:55.575
那是街道镜头lensProp地址，那是地址镜头，
And that's the street lens lensProp address, that's the address lens,

26
00:01:55.575 --> 00:01:56.567
我将如何使用它？
how would I use that?

27
00:01:56.567 --> 00:02:00.678
好吧，我们有视图，可以查看这些东西之一，
Well, we have view and over to view one of these things,

28
00:02:00.678 --> 00:02:05.050
我有这个嵌套对象，如果我想查看街道，请说，
I have this nested object and if I wanna view the street say,

29
00:02:05.050 --> 00:02:09.670
我只会调用视图，我会将它传递给我想要的镜头。
I'll just call view, I'll pass it the lens that I want.

30
00:02:09.670 --> 00:02:17.110
Street 和 street 需要一个地址，对吗？
Street, and street takes an address, right?

31
00:02:17.110 --> 00:02:21.688
所以我必须真正撰写[(L.address, L.street,
So I have to actually compose[(L.address, L.street,

32
00:02:21.688 --> 00:02:27.612
)] 镜头组合成函数，它们让我跳进地址和
)] lenses composed like functions, and they let me jump into the address and

33
00:02:27.612 --> 00:02:32.160
到街上，我可以在这个用户上看到它。
into the street and I can just view that on this user.

34
00:02:32.160 --> 00:02:36.857
所以让我们做的是console.res，
So let's do that was console.res,

35
00:02:36.857 --> 00:02:40.191
console.log(res) 和
console.log(res) and

36
00:02:40.191 --> 00:02:46.110
让我们的节点镜头 0 被命名为枫树。
let's node lenses 0 there is is named maple.

37
00:02:46.110 --> 00:02:53.110
让我们取名字 L.name，是枫树。
Let's get the name L.name, Is maple.

38
00:02:53.110 --> 00:02:57.957
所以我能够跳入陡峭的嵌套结构
So I was able to jump in to the steeply nested structure

39
00:02:57.957 --> 00:03:02.819
通过属性的组合，这很酷。
through composition of properties, that's cool.

40
00:03:02.819 --> 00:03:08.768
如果做完了，过度允许我修改toUpper，
What if do over, over allows me to modify that toUpper,

41
00:03:08.768 --> 00:03:14.083
所以我可以说嘿，跳进名字，名字部分和
so I can say hey, jump into the name, name part and

42
00:03:14.083 --> 00:03:22.480
让我们把它拉到我丢失的街道 addrStreetName [笑] 中。
let's just pull this out into a street addrStreetName [LAUGH] that I lost it.

43
00:03:22.480 --> 00:03:23.612
很好，是我复制的吗？
That's fine, did I copy it?

44
00:03:23.612 --> 00:03:27.807
我复制了它，好吧 addrStreetName，然后
I copied it sweet all right addrStreetName, and

45
00:03:27.807 --> 00:03:34.460
我们只想说这个镜头，我们要把它调高。
we're just gonna say over this lens, we're gonna turn it to upper.

46
00:03:34.460 --> 00:03:39.173
对我来说有趣的是，这提供了一个非常，
And what's interesting to me is that this provides a very,

47
00:03:39.173 --> 00:03:43.793
非常干净的方式一直跳到那里，改变它并
very clean way to jump all the way down there, change it and

48
00:03:43.793 --> 00:03:47.490
把整个事情找回来，它是不可变的。
get the whole thing back and it's immutable.

49
00:03:47.490 --> 00:03:54.500
它沿途复制了它，并且可以以非常有效的方式进行。
It made a copy of it along the way, and it can do so in a very efficient way.

50
00:03:54.500 --> 00:03:58.622
如果我们正在考虑函子，我们正在考虑这些属性
And if we're thinking about functors, and we're thinking about these properties as

51
00:03:58.622 --> 00:04:01.276
有点像打开一个盒子然后拿到下一件事
kind of like opening up a box and getting the next thing,

52
00:04:01.276 --> 00:04:05.139
打开那个盒子，拿到下一件事，然后把它们全部装回去。
and opening up that box and getting the next thing, then boxing them all back up.

53
00:04:05.139 --> 00:04:07.070
地图就是这样工作的，对吧？
That's how maps work, right?

54
00:04:07.070 --> 00:04:10.342
你正在对这些事情进行映射并脱离目标
You're mapping over these things and getting out of target and

55
00:04:10.342 --> 00:04:12.141
然后把更多的东西放在一起。
then putting more back together.

56
00:04:12.141 --> 00:04:17.548
这主要是这些在幕后实施的方式，
And that's largely how these are implemented under the hood,

57
00:04:17.548 --> 00:04:23.771
也意味着我们可以开始制作了，我不认为这有L.mapped，
also means that we can start to make, I don't think this has L.mapped,

58
00:04:23.771 --> 00:04:29.130
但如果我有一个Either.of这个名字，我完全可以做到。
but if I had a Either.of this name I could totally do that.

59
00:04:29.130 --> 00:04:32.774
我完全可以说，跳进去检查我的任何一个，然后
I could totally say, jump in and go over my either, and

60
00:04:32.774 --> 00:04:35.720
然后到名字，把它变成大写。
then get to the name, turn it to uppercase.

61
00:04:35.720 --> 00:04:40.260
所以这可能在一个任务中，我们可以跳到函子里面
So this could be inside a task, and we can jump inside of functors

62
00:04:40.260 --> 00:04:45.224
巨大结构不同部分的内部属性，
inside of properties inside of different parts of a giant structure,

63
00:04:45.224 --> 00:04:48.945
击中那一块，然后将其全部放回原处。
hit that one piece and then put it all back together.

64
00:04:48.945 --> 00:04:53.588
那是地图的定义，打开东西，让我们把它拿出来改变它
And that's map by definition, open stuff up, let's get it out and change it and

65
00:04:53.588 --> 00:04:55.650
然后为你把它放回原处。
then puts it back together for you.

66
00:04:55.650 --> 00:04:58.448
所以这东西变得非常非常强大，
So this stuff gets really, really powerful,

67
00:04:58.448 --> 00:05:03.396
我们不会在这里这样做，但我确实有一个可以做到这一点的镜头包，
we're not gonna do that right here, but I do have a lens package that does do that,

68
00:05:03.396 --> 00:05:05.280
如果你想看看我的 GitHub。
if you wanna look at my GitHub.

69
00:05:05.280 --> 00:05:08.484
它只是移植了 Edward 提交的镜头库和
It was just porting Edward commits lens library and

70
00:05:08.484 --> 00:05:12.219
现在大多数人都在使用专业仿函数镜头，是的。
most people these days are using pro functor lenses, yes.

71
00:05:12.219 --> 00:05:17.529
&gt;&gt; 这些是否明确使用了观察者模式之类的东西，
&gt;&gt; Are these explicitly using something like an observer pattern,

72
00:05:17.529 --> 00:05:21.600
或者这更像是阅读器模式文档？
or is this more like a reader mode documentation?

73
00:05:21.600 --> 00:05:26.997
&gt;&gt; 这是一个很好的问题，所以我们不持有
&gt;&gt; That's a great question, so we're not holding

74
00:05:26.997 --> 00:05:32.270
到 ref 并进行任何类型的有线更改。
on to a ref and having any kind of wired changes.

75
00:05:32.270 --> 00:05:36.015
这非常类似于闭包引用的东西，或者
This is very similar to closures ref stuff, or

76
00:05:36.015 --> 00:05:41.103
他们的视图库现在有点过时了，但是
they had that view library that's a little out of date now, but

77
00:05:41.103 --> 00:05:46.690
它类似于这种东西，他们有点像对待镜片一样对待它。
it was similar to this stuff where they kinda treated it like lenses.

78
00:05:48.920 --> 00:05:52.287
这是不同的，它实际上就像将属性视为函子一样
This is different, it's literally like treating properties as a functor and

79
00:05:52.287 --> 00:05:55.398
有一个抽他们起来，改变东西，然后把它们放回去，和
there's a Pumping them up and changing stuff and putting them back, and

80
00:05:55.398 --> 00:05:58.715
profunctor，镜头的实现有点不同，给你相同的
profunctor, lenses are implemented a little bit different give you the same

81
00:05:58.715 --> 00:06:00.060
力量，可能是更大的力量。
power, probably more power.

82
00:06:00.060 --> 00:06:04.421
你可以跳过函子和属性中的各种东西，
And you could jump through functors and all sorts of stuff in properties,

83
00:06:04.421 --> 00:06:08.600
你也可以用一个镜头来做到这一点，嘿，你知道吗？
you could also do this with like a lens that says, hey, you know what?

84
00:06:08.600 --> 00:06:12.191
我要抢第一个或第零个，对吗？
I'm gonna grab the first or the zeroth right?

85
00:06:12.191 --> 00:06:16.033
应该是镜头道具，哎呀，0，
Should be Lens prop, whoops, 0,

86
00:06:16.033 --> 00:06:20.771
那么我们可以说，是的，我们有用户，
then we could say, yeah, we have users,

87
00:06:20.771 --> 00:06:25.405
对，我们将从 L.0 开始。
right, and we'll just start with L.0.

88
00:06:25.405 --> 00:06:28.076
我们可以传入用户，
And we could pass in users,

89
00:06:28.076 --> 00:06:33.068
现在我们正在跳过所有的数组，
now we're jumping through the array, of all the,

90
00:06:33.068 --> 00:06:38.310
我想现在必须把第一个拿出来看看。
I guess have to grab the first one out now to look at it.

91
00:06:38.310 --> 00:06:42.764
但是看，我们跳过了用户数组抢到了第一个，然后
But look, we jumped through the array of users grab the first one, and

92
00:06:42.764 --> 00:06:44.490
然后换枫。
then change maple.

93
00:06:44.490 --> 00:06:48.691
再一次，如果我要在支持该功能的不同镜头库上调用映射
And again if I was to call mapped on a different lens library that supported that

94
00:06:48.691 --> 00:06:52.780
它会贯穿每个人，改变每个名字，并在可变的情况下做这一切。
it would run through everyone and change every name and do it all on mutable.

95
00:06:52.780 --> 00:06:57.306
所以这些真的，真的很强大，他们真的只是吸气剂和
So these are really, really powerful, they're really just getters and

96
00:06:57.306 --> 00:07:01.250
setter 是不可变的，让你可以像函数一样组合。
setters that are unmutable and let you compose like functions.

97
00:07:02.550 --> 00:07:06.440
你有点像我现在有这个街道名称的参考，正如你提到的。
You're kinda like I have this ref to the street name now, as you kinda mentioned.

98
00:07:06.440 --> 00:07:09.877
这几乎就像一个大结构中的一个大点的参考，你可以
It's almost like a reference to a big spot in a big structure and you're able to just

99
00:07:09.877 --> 00:07:13.230
进入并更改它，然后在不丢失数据的情况下返回。
get in there and change it, and come back out without loosing your data.

100
00:07:13.230 --> 00:07:16.706
这真的很好，特别是如果你正在做这个非常好的作品，并且
Which is really nice, especially if you're doing this really nice composition, and

101
00:07:16.706 --> 00:07:18.848
你就像在你的作品中间，
you're just like in the middle of your composition,

102
00:07:18.848 --> 00:07:20.292
你想改变一点点价值。
you wanna change one little value.

103
00:07:20.292 --> 00:07:24.309
但通常使用 setter，你会扔掉整个结构，改变
But typically with a setter, you would throw away the entire structure, change

104
00:07:24.309 --> 00:07:28.990
价值，然后随着你的作品的进行，你已经失去了整个结构。
the value and then as your composition goes, you've lost the entire structure.

105
00:07:28.990 --> 00:07:33.240
镜头保留了结构，所以当你运行你的功能管道时，
Lenses preserve the structure, so as you run through your pipeline of functions,

106
00:07:33.240 --> 00:07:36.290
结构保持不变，您只是更改了一件。
the structure is maintained, you just changed one piece.

107
00:07:36.290 --> 00:07:40.208
&gt;&gt;此人说值得一提的镜头构图倒退，但
&gt;&gt; This person said worth mentioning lenses composed backwards, but

108
00:07:40.208 --> 00:07:43.842
你之前已经介绍过了 &gt;&gt; 值得一提的是，肯定的，
you already covered that earlier &gt;&gt; That is worth mentioning yes for sure,

109
00:07:43.842 --> 00:07:46.740
通常组合会运行名称，街道，地址，bomp。
normally composition would run name, street, address, bomp.

110
00:07:46.740 --> 00:07:48.280
它会从右到左，
It would go right to left,

111
00:07:48.280 --> 00:07:52.760
这实际上从左到右是的，这是很好的提及，很好的呼吁。
this actually goes left to right yeah that's good mention, good call out.

112
00:07:52.760 --> 00:07:56.517
如果您开始了解它是如何实现的，则镜头向后组合
Lenses composed backwards for if you start to see how it's implemented you

113
00:07:56.517 --> 00:08:00.569
明白为什么，但奇怪的是看到有像从左到右的组合而不是
see why but it's weird to see that there are composed like left to right instead of

114
00:08:00.569 --> 00:08:02.370
从右到左，你总是看到。
right to left where you always see.

115
00:08:02.370 --> 00:08:04.690
但这是一个标准的函数组合，
But this is a standard function composition,

116
00:08:04.690 --> 00:08:06.720
这不是一个特殊的镜头组合。
this is not a special lens composition.
