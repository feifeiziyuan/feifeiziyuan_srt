WEBVTT

1
00:00:00.000 --> 00:00:03.260
这是事情变得有点激烈的地方。
This is where things get a little bit intense.

2
00:00:03.260 --> 00:00:07.860
所以我可以说我有一个函数转换器
So I can say I have a function transformer

3
00:00:08.920 --> 00:00:12.860
比方说，一个任务，好吧。
of, let's say, a task, all right.

4
00:00:12.860 --> 00:00:15.020
我们将其称为函数任务。
And we'll call this a function task.

5
00:00:16.880 --> 00:00:21.756
然后我可以说我有一个变压器，好吧，让我们做，是的，
Then I could say I have an either transformer, well let's do, yeah,

6
00:00:21.756 --> 00:00:24.164
让我们做一个变压器。
let's do an either transformer.

7
00:00:26.763 --> 00:00:31.309
无论是功能任务的变换器，
Either transformer of function task,

8
00:00:31.309 --> 00:00:35.311
[笑] 我们将其称为我的应用程序。
[LAUGH] and we'll call that my app.

9
00:00:35.311 --> 00:00:37.320
好吧，这里发生了什么？
All right, what's happening here?

10
00:00:37.320 --> 00:00:42.222
好吧，我在变压器内部的变压器堆栈中有一个变压器堆栈
Well, I have a transformer stack inside a transformer stack inside a transformer

11
00:00:42.222 --> 00:00:44.361
堆叠在变压器堆叠内。
stack inside a transformer stack.

12
00:00:44.361 --> 00:00:49.374
所以我的应用程序类型确实是，可能应该没有全部表达
So my app type really is, probably should be expressed without all

13
00:00:49.374 --> 00:00:54.568
这些类型的变压器，因为我没有任何功能
these kind of transformers, as I haven't either holding a function

14
00:00:54.568 --> 00:00:59.060
拿着任务，我想继续那个形状。
holding a task, and I'd like to just continue that shape.

15
00:00:59.060 --> 00:01:02.720
假设我的应用程序可能不断出现错误，并且
Let's say my app just continually might have an error, and

16
00:01:02.720 --> 00:01:04.310
如果是这样，我们只想停下来。
if it does we just wanna stop.

17
00:01:04.310 --> 00:01:08.275
但是如果它没有继续前进，那么它内部就有一个函数
But if it doesn't keep going and then it has a function inside that which holds

18
00:01:08.275 --> 00:01:11.448
一项任务，因为所有这些功能都只是做一些副作用，
a task, cuz all these functions just do side effecty things,

19
00:01:11.448 --> 00:01:13.356
所以我们要早点绕道。
so we're gonna side circuit early.

20
00:01:13.356 --> 00:01:16.240
我们有一堆函数，每个函数都在运行一个任务。
We have a bunch of functions and each of them is running a task.

21
00:01:16.240 --> 00:01:19.485
因为那是我的应用程序的一种类型，对。
Cuz that's a type of my app right there, right.

22
00:01:19.485 --> 00:01:24.478
这就是你将看到的基于 Monad 转换器的东西
And this is kind of what you're gonna see with these Monad transformer based

23
00:01:24.478 --> 00:01:25.415
图书馆和
libraries and

24
00:01:25.415 --> 00:01:30.577
函数式编程就是你得到这些类型的转换器堆栈。
functional programming is that you get these kind of stacks of transformers.

25
00:01:30.577 --> 00:01:34.900
而且你必须弄清楚如何将你的东西放在正确的位置并抬起。
And you have to kind of figure out how to get your stuff in the right spot and lift.

26
00:01:36.760 --> 00:01:39.723
那么让我们看看这是如何工作的。
So let's let's see how this works.

27
00:01:39.723 --> 00:01:43.071
其实也没有试过T，[笑]所以让我们继续吧
Actually haven't tried either T, [LAUGH] so let's go ahead and

28
00:01:43.071 --> 00:01:44.910
看看这里发生了什么。
see what's happening here.

29
00:01:44.910 --> 00:01:46.330
我可能得换掉那个了。
I might have to swap that one out.

30
00:01:47.400 --> 00:01:54.800
控制台记录，res，看看我们是否只是在原始水平上。
Console that log, res, see if we're just level on the original.

31
00:01:54.800 --> 00:01:57.323
是的，它不起作用，好吧，让我们看看会发生什么。
Yeah, it's not working, all right, let's see what happens.

32
00:01:57.323 --> 00:02:01.060
这不是正确的道路，好吧。
It's just not the right path, all righty.

33
00:02:03.030 --> 00:02:05.250
好吧，那看起来很高兴。
Okay, so that seems happy.

34
00:02:05.250 --> 00:02:09.510
所以我有两个应用程序，地图 xx 加一个。
so I have app of two, map x x plus one.

35
00:02:09.510 --> 00:02:11.684
好的，所以这应该是三个，我有一个三个的应用程序。
Okay, so this should be three, I have an app of three.

36
00:02:14.064 --> 00:02:17.050
好的，但什么是应用程序？
All right, but what is an app?

37
00:02:17.050 --> 00:02:20.620
请记住，它是一个持有一个任务的函数。
Remember, it's an either holding a function holding a task.

38
00:02:20.620 --> 00:02:24.350
所以让我们尝试获得这个值。
So let's try to get at this value.

39
00:02:24.350 --> 00:02:27.522
所以我们将从 rez.fold 开始。
So we'll start with rez.fold.

40
00:02:27.522 --> 00:02:29.150
如果我们得到一个错误，我会做一个错误。
I'll do just an error if we get one.

41
00:02:29.150 --> 00:02:33.390
否则我们得到一个函数，好吧。
Otherwise we get a function out, all right.

42
00:02:33.390 --> 00:02:37.650
让我们在一些感知环境中运行该函数。
Let's run that function with some perceived environment.

43
00:02:37.650 --> 00:02:39.181
Myenv，真的。
Myenv, true.

44
00:02:39.181 --> 00:02:41.880
好吧，这给了我一个任务。
All right, which gives me a task.

45
00:02:41.880 --> 00:02:44.260
[笑] 让我们在这里给自己一些空间。
[LAUGH] Let's give ourself some room here.

46
00:02:45.680 --> 00:02:49.460
是的，所以我们有了我们的功能，对不起，我们必须运行它，并且
Right, so we've got our function, I'm sorry, we have to run it, and

47
00:02:49.460 --> 00:02:50.980
然后我得到了一个任务。
then I get a task out of that.

48
00:02:50.980 --> 00:02:56.432
所以我可以分叉那个任务，我会console.error，然后我们会console.log。
So I can fork that task, I'll console.error, and then we'll console.log.

49
00:02:59.388 --> 00:03:04.260
好的，所以我们有这个东西，它可以映射我想要的所有东西，并且
Okay, so we have this thing here that it can map over all I want, and

50
00:03:04.260 --> 00:03:07.404
当我尝试运行它并查看会发生什么时。
when I tried to run it and see what happens.

51
00:03:07.404 --> 00:03:08.470
我们得到一个值吗？
Do we get a value?

52
00:03:08.470 --> 00:03:09.650
我们得到了三个，太棒了。
We get three out, terrific.

53
00:03:10.970 --> 00:03:14.760
所以这只是与应用程序一起使用。
So that's just working with app.

54
00:03:14.760 --> 00:03:19.220
挑战来自我们何时开始回归
And the challenges come from when we start to return eithers or

55
00:03:19.220 --> 00:03:24.270
如果我们链接，这些东西中的功能或任务。
functions or tasks within these things if we chain.

56
00:03:24.270 --> 00:03:26.920
所以我把三个案例放在链中。
So I put three cases in here of chain.

57
00:03:26.920 --> 00:03:31.013
地图很棒，对，我只是做一些事情
Map is awesome, right, I just do stuff and

58
00:03:31.013 --> 00:03:38.543
我什么都不用担心，它只是为我装瓶。
I don't have to worry about anything, it just bottles it right back up for me.

59
00:03:38.543 --> 00:03:40.578
一旦我开始使用链条，
As soon as I start using chain,

60
00:03:40.578 --> 00:03:44.111
我必须弄清楚我的函数会返回什么。
I have to figure out what is my function gonna return.

61
00:03:44.111 --> 00:03:47.949
我们通常不会写这个，对，我们通常会说，
We're not usually writing this, right, we're usually saying,

62
00:03:47.949 --> 00:03:50.010
链做数据库的事情，对吧。
chain do DB thing, right.

63
00:03:50.010 --> 00:03:53.270
例如，这可能会返回一个任务。
That might return a task, for instance.

64
00:03:53.270 --> 00:03:58.050
现在我必须弄清楚如何将我的任务放入一个函数中，在一个任务中，
Now I have to figure out how to get my task inside a function, inside a task,

65
00:03:58.050 --> 00:04:01.010
要么在该任务中拥有它，等等。
either have it either inside that task and so on.

66
00:04:01.010 --> 00:04:03.920
您将不得不手动将这些形状组合在一起。
You're gonna have to manually put these shapes together.

67
00:04:03.920 --> 00:04:06.390
所以我向你展示的部分原因是因为
So part of the reason I'm showing you this is because

68
00:04:06.390 --> 00:04:09.190
我不喜欢 Monad 变压器。
I don't love Monad transformers.

69
00:04:09.190 --> 00:04:12.510
有时它们很有用，它们就在身边，很高兴知道，并且
Sometimes they're useful and they're around and it's good to know, and

70
00:04:12.510 --> 00:04:14.880
如果你让它们保持浅薄，它们会有所帮助，
if you keep them shallow they can be helpful,

71
00:04:14.880 --> 00:04:19.210
正如我们在另一个示例中看到的那样，但这不是我最喜欢的技术。
as we saw with the other example, but it's not my favorite technique.

72
00:04:19.210 --> 00:04:21.080
所以让我们来看看第一件事。
So let's just walk through the first thing.

73
00:04:21.080 --> 00:04:27.330
所以这个函数返回两个任务中的一个，我们必须进入我们的应用程序。
So this function returns a task either of two two, and we have to lift into our app.

74
00:04:28.910 --> 00:04:34.360
这个下一个函数返回一个，然后我必须把它放在里面
This next function returns an either, which then I have to put inside

75
00:04:34.360 --> 00:04:39.300
一个任务，我必须把它提升到那个，然后把它提升到应用程序中，对。
a task either, I have to lift it into that, and then lift that into app, right.

76
00:04:39.300 --> 00:04:44.160
所以我的想法是我试图摆脱的形状是一个应用程序
So the idea is that my shape I'm trying to get out is an app

77
00:04:44.160 --> 00:04:46.710
拿着一个任务拿着一个。
holding a task holding an either.

78
00:04:46.710 --> 00:04:51.312
由于这个函数返回一个或者，我会把它提升到任务中并且
And since this function returns an either, I'll lift it into the task either and

79
00:04:51.312 --> 00:04:52.607
将其提升到应用程序中。
lift that into an app.

80
00:04:52.607 --> 00:04:57.008
接下来我们在这里讨论这个问题，然后
Next we go into this thing here, and

81
00:04:57.008 --> 00:05:02.160
我正在返回一个任务，哎呀，一个任务。
I'm returning a task, whoops, a task.

82
00:05:02.160 --> 00:05:06.120
现在我必须映射该任务并将其放入其中之一，所以我得到了一个任务
And now I have to map over that task and put it in an either, so I get a task

83
00:05:06.120 --> 00:05:10.640
拿着四个中的一个，然后我把它放到应用程序中，依此类推。
holding an either of four, and then I lift that into the app, and so on.

84
00:05:10.640 --> 00:05:12.830
有不同的方法，对吧，
There's different approaches, right,

85
00:05:12.830 --> 00:05:17.360
我们可以映射到类型内部以将另一个类型放入其中，依此类推。
we can map to get inside the type to put another type inside it, and so on, etc.

86
00:05:17.360 --> 00:05:21.610
但这就是事情变得非常棘手的地方。
But this is where things get really tricky.

87
00:05:21.610 --> 00:05:27.070
我们只是，在我看来最好保持浅薄，没有大量的类型帮助。
And we just, it's best to stay shallow in my opinion without tons of type help.

88
00:05:27.070 --> 00:05:29.070
还有一种叫做liftIO的东西。
There's also a thing called liftIO.

89
00:05:29.070 --> 00:05:32.520
我什至不打算深入研究，但这可能会机械地推动你们所有人
I'm not gonna even go into it, but that can kind of mechanically push you all

90
00:05:32.520 --> 00:05:35.680
到堆栈底部的方式，但我们不会处理它。
the way to the bottom of the stack, but we're not gonna deal with that.
