WEBVTT

1
00:00:00.510 --> 00:00:02.970
这是事情有点偏离轨道的地方。
This is where things go a little off the rails.

2
00:00:02.970 --> 00:00:05.919
我们将谈论免费。
We're going to talk about Free.

3
00:00:05.919 --> 00:00:13.041
完全公开，Free Monads 通常不是你想要的 [笑] 但是
And full disclosure, Free Monads are usually not what you want [LAUGH] but

4
00:00:13.041 --> 00:00:19.462
他们解决了一个非常具体的问题，很高兴了解和
they solve a very specific problem and it's good to know about and

5
00:00:19.462 --> 00:00:24.900
当我们谈论功能架构时。
when we're talking about functional architecture.

6
00:00:24.900 --> 00:00:28.320
我们讨论了 monad 转换器堆栈，我们讨论了自由 monad。
We talked about monad transformer stacks and we talked about free monads.

7
00:00:28.320 --> 00:00:31.290
我们讨论了这些阅读器类型注入。
And we talked about like these reader type injections.

8
00:00:31.290 --> 00:00:36.610
我们看到了通过 ask 进行的读者注入或通过 ask 进行的依赖注入。
We saw reader injection through ask or dependency injection through ask.

9
00:00:36.610 --> 00:00:40.110
我只想向您展示一个使用 Free 的示例。
And I just wanna show you an example of using Free.

10
00:00:40.110 --> 00:00:41.850
事实证明，
And it actually turns out,

11
00:00:41.850 --> 00:00:45.380
这是我想要构建的第一个应用程序的最佳解决方案。
it was the best solution to the first app that I wanted to build.

12
00:00:45.380 --> 00:00:47.270
所以值得了解。
So it's worthwhile to know.

13
00:00:48.440 --> 00:00:52.090
那么，什么是自由的，自由的 monad？
So, what is free, the free monad?

14
00:00:52.090 --> 00:00:59.930
免费的 monad 是一种获取函数并将它们视为数据类型的方法。
The free monad is a is a way to take your functions and treat them like data types.

15
00:00:59.930 --> 00:01:05.010
所以如果我有一个像 HTTP GET 这样的函数，它需要一些
So if I have a function like HTTP GET and it takes some

16
00:01:05.010 --> 00:01:10.190
像 URL 这样的参数，而不是它去和
arguments like a URL, instead of it going and

17
00:01:10.190 --> 00:01:16.490
做一个任务并尝试喜欢，现在就去做这个功能，
making a task and trying to like, go do this function right now,

18
00:01:16.490 --> 00:01:22.450
我们实际上可以返回一个数据类型，比如保存 URL 的 HttpGet。
we can actually return a data type, like HttpGet holding the URL.

19
00:01:22.450 --> 00:01:27.630
所以你现在有一个数据类型来表示要获取一个 URL。
So you have a data type now that represents going to get a URL.

20
00:01:27.630 --> 00:01:33.000
我们希望它成为 monad 的原因是因为我们想说，
And the reason we want it to be a monad is because we want to say,

21
00:01:33.000 --> 00:01:37.040
好吧，我有这个数据类型，我想链接，对吗？
well, I have this data type, and I want to chain, right?

22
00:01:39.090 --> 00:01:40.880
仿佛它真的做到了。
As if it actually did it.

23
00:01:40.880 --> 00:01:44.115
我想获取该 URL 的内容，并且
And I want to get the contents of that URL, and

24
00:01:44.115 --> 00:01:46.065
我可以使用类似 HTTP POST 的东西。
I could use something like an HTTP POST.

25
00:01:46.065 --> 00:01:51.560
我们会做一些其他的 URL，比如分析，
And we'll do some other URL like analytics,

26
00:01:53.360 --> 00:01:58.170
内容，好吗？
with the contents, all right?

27
00:01:58.170 --> 00:02:03.720
然后，我最终应该得到一个数据结构来表示
And then, what I should end up with is a data structure representing

28
00:02:03.720 --> 00:02:07.790
嵌套的计算树。
the nested tree of computation.

29
00:02:07.790 --> 00:02:09.870
您基本上是在构建 AST。
You're basically building an AST.

30
00:02:09.870 --> 00:02:13.600
您正在将函数提升为数据类型，
You're lifting your functions into datatypes,

31
00:02:13.600 --> 00:02:19.600
将它们视为正在运行，然后您就可以稍后解释它们。
treating them as if they're running and then you're able to interpret them later.

32
00:02:19.600 --> 00:02:21.600
所以现在我们必须创建我们所说的解释器
So now we have to create what we call an interpreter

33
00:02:23.430 --> 00:02:28.670
在这里解释以实际解释状态结构。
interpret over here to actually interpret the status structure.

34
00:02:28.670 --> 00:02:30.970
所以我们实际上要在这里建造它。
So we're actually gonna build this right here.

35
00:02:32.920 --> 00:02:38.495
而我真正想做的是引入一个新的图书馆。
And what I wanna do is actually bringing in a new library.

36
00:02:38.495 --> 00:02:39.755
它被称为达吉。
It's called daggy.

37
00:02:39.755 --> 00:02:45.175
我们要带一些标签，很棒的图书馆，强烈推荐。
We're gonna bring in tag some, great library, highly recommended.

38
00:02:45.175 --> 00:02:51.615
Daggy，它所做的就是我制作的整个课程，例如 HTTP GET，
Daggy, all it does is this whole entire class I was making stuff like HTTP GET,

39
00:02:51.615 --> 00:02:55.840
它取一些值，取一些 x 并作为数据类型返回。
it takes some value, take some x and returns as a data type.

40
00:02:55.840 --> 00:02:58.070
我们有方法。
We have methods on it.

41
00:02:58.070 --> 00:03:03.310
这只是允许我们使用更短的语法来定义这些对象。
This just allows us to, it's in a shorter syntax for defining these objects.

42
00:03:03.310 --> 00:03:09.140
然后它给了我一个功能来分解一组不同的类型和
And then it gives me a function to kind of decompose a set of different types and

43
00:03:09.140 --> 00:03:10.162
我们马上就会看到。
we'll see that in a second.

44
00:03:10.162 --> 00:03:16.940
所以我会说，Daggy 的工作方式是，我们有 http，我们称之为标签总和。
So the way Daggy works is I'll say, we have http and we'll call it tag sum.

45
00:03:16.940 --> 00:03:19.740
所以它就像一个 sum 类型，它就像一个类型定义。
So it's like a sum type, it's like a type definition.

46
00:03:19.740 --> 00:03:23.130
说 HTTP 是超类的名称。
Say HTTP is the name of the superclass kind of thing.

47
00:03:23.130 --> 00:03:30.110
然后我们会说我们有一个 get，而 get 的参数是 x。
Then we're gonna say we have a get, and the arguments get has is x.

48
00:03:30.110 --> 00:03:32.170
网址呢？
How about URL?

49
00:03:32.170 --> 00:03:34.160
然后我们有一个帖子。
And then we have a post.

50
00:03:34.160 --> 00:03:36.160
我们将获得 URL 和正文。
And we'll have the URL and the body.

51
00:03:37.720 --> 00:03:45.000
所以，我们在这里所做的就是说，我定义了两种数据类型 GET 和 POST。
So, what we've done here is say, I've defined two data types GET and POST.

52
00:03:45.000 --> 00:03:48.679
实际上，在我们进一步讨论之前，让我们先看看它。
And actually let's just take a look at that before we go any further.

53
00:03:48.679 --> 00:03:54.729
所以，如果我说 Http，Get，不管怎样，home。
So, if I say Http, Get, whatever, home.

54
00:03:54.729 --> 00:03:58.890
你可以console.log这个东西。
You can console.log this thing.

55
00:03:58.890 --> 00:04:02.776
它就像一个小数据类型
And it's just like a little data type for

56
00:04:02.776 --> 00:04:07.480
我的，自己的用法。
my, Own usage.

57
00:04:07.480 --> 00:04:10.550
看？它有一个小网址主页。
See? It's got a little url home.

58
00:04:10.550 --> 00:04:15.420
所以对于我正在创建的那些大对象文字来说，这是一种更短的语法。
So it's a shorter syntax for those big object literals I was creating.

59
00:04:15.420 --> 00:04:21.570
但它的酷是我可以说，如果我有一个家
But what's cool about it is I'm able to say, if I have a get of home

60
00:04:23.010 --> 00:04:27.676
我可以调用 Cata，它是 Catamorphism 的缩写。
and I can call Cata on that and it's a short for Catamorphism.

61
00:04:27.676 --> 00:04:32.580
我可以做一个模式匹配说，如果它是一个获取，获取 URL 并且
I can do a pattern matching to say, well if it's a get, get the URL out and

62
00:04:32.580 --> 00:04:34.480
做点什么，你好。
do something, hi.

63
00:04:34.480 --> 00:04:37.645
如果是帖子，我有 URL 和
And if it's a post, I have the URL and

64
00:04:37.645 --> 00:04:43.020
我可以使用的身体，我会说，张贴任何东西。
the body at my disposal, I'll say, post whatever.

65
00:04:43.020 --> 00:04:46.550
这两个函数，所以我实际上可以在它上面运行一个 catamorphism 并且
These two functions, so I can actually run a catamorphism on it and

66
00:04:46.550 --> 00:04:48.930
它将模式匹配它是什么类型。
it will pattern match on what type it is.

67
00:04:48.930 --> 00:04:51.660
然后让我解构该类型并对其进行处理。
And then allow me to destructure the type and do something to it.

68
00:04:51.660 --> 00:04:56.820
所以这两个东西一起使用，有点捷径这个小类型
So these two things together will be using, to kinda short cut this little type

69
00:04:56.820 --> 00:05:01.810
创建库，它让我很容易消化和
of creation library and it allows me to easily digest and

70
00:05:01.810 --> 00:05:05.450
匹配而不是像，你有。
match rather than being like, do you have.

71
00:05:05.450 --> 00:05:09.190
否则，我不得不说，我不知道 X 是什么，对吧？
Otherwise, I would have to say like, I don't know what X is, right?

72
00:05:09.190 --> 00:05:11.300
这是get还是post？
Is this a get or a post?

73
00:05:11.300 --> 00:05:12.738
我不确定。
I'm not sure.

74
00:05:12.738 --> 00:05:18.480
如果没有 Cata，我将不得不像，你知道，x 是否有一个身体并且
Without Cata I would have to be like, you know, does x have a body and

75
00:05:18.480 --> 00:05:23.160
它可能又是一次，所以能够在类型上进行模式匹配是件好事。
it's probably again, so it makes it nice to be able to pattern match on the type.

76
00:05:24.710 --> 00:05:25.430
好吧，酷。
All right, cool.

77
00:05:25.430 --> 00:05:29.510
所以我们已经完成了我们的函数获取一个 URL 和
So we've done is taken our functions get with a URL and

78
00:05:29.510 --> 00:05:32.160
使用 URL 和正文发布并使其成为数据类型。
post with the URL and body and made it a data type.

79
00:05:32.160 --> 00:05:37.800
然后我们有一个叫做lift f的小辅助函数，它将它提升到free状态。
Then we have this little helper function called lift f, it lifts it into free.

80
00:05:39.370 --> 00:05:44.500
所以如果我说httpGet，我不能。
So if I say httpGet, I can't.

81
00:05:44.500 --> 00:05:48.320
我能做的就是将这些东西变成单子，只需调用lift F。
What I can do is make these things into monads, just by calling lift F.

82
00:05:50.210 --> 00:05:52.040
这就是为什么它是自由的 monad。
That's why it's the free monad.

83
00:05:52.040 --> 00:05:55.660
它只是提升类型，就像数组是自由幺半群或
It just lifts the type right in, just like an array is the free monoid or

84
00:05:55.660 --> 00:05:57.590
你可以往里面扔任何东西。
you can just throw anything in it.

85
00:05:57.590 --> 00:06:03.490
我们可以用lift F来做到这一点，我们可以拥有这个Get，httpGet。
We can do that with lift F, can we have this Get, httpGet.

86
00:06:04.870 --> 00:06:11.330
然后我们有一个 httpPost，它接受正文中的 URL。
And then we have an httpPost, and it takes the URL in the body.

87
00:06:12.910 --> 00:06:15.270
这当然可以自动化。
And this can certainly be automated.

88
00:06:15.270 --> 00:06:18.860
我们所做的就是运行构造函数，然后立即调用lift F。
All we're doing is running the constructor and then calling lift F right afterwards.

89
00:06:18.860 --> 00:06:19.800
这只是组合。
It's just composition.

90
00:06:21.150 --> 00:06:25.190
但只是试图完整并向您展示这是如何工作的。
But just trying to be complete and show you how this works.

91
00:06:25.190 --> 00:06:30.530
好的，现在让我们在这里实际运行一个小应用程序。
Okay, so now let's actually run a little app here.

92
00:06:30.530 --> 00:06:37.050
所以就像应用程序一样，我们会说首先在家里获取 httpGet。
So like app is, we'll say first get the httpGet on home.

93
00:06:37.050 --> 00:06:39.730
然后我们要把它和内容联系起来。
And then we're gonna chain that with the contents.

94
00:06:40.740 --> 00:06:44.510
是的，我们会用内容来做这篇文章。
And yeah, we'll do this post with the contents.

95
00:06:44.510 --> 00:06:46.850
这不是httpPost，httpPost。
And that's not httpPost, httpPost.

96
00:06:48.300 --> 00:06:53.060
所以只是为了让我们知道，这些小辅助函数实际上是
So just just so we're aware, these little helper functions are literally

97
00:06:53.060 --> 00:06:55.337
只是建设者，我把他们扔进电梯 F。
just the constructors and I'm throwing them into lift F.

98
00:06:58.000 --> 00:07:04.660
所以我们得到的是一个免费的 httpGet，并且
So what we're getting is a free of httpGet, and

99
00:07:04.660 --> 00:07:11.300
这里有一个免费的 httpPost，所以这就是我可以调用链的方式。
a free of httpPost here, so that's how I can call chain.

100
00:07:11.300 --> 00:07:14.580
所以当我调用这个函数时，我可以获得一个免费的 monad，我可以链接这个免费的 monad。
So when I call this function, I can get a free monad, I can chain the free monad.

101
00:07:14.580 --> 00:07:18.163
真正好的一点是免费的 monad 只是数据，
What's really nice about this is free monads aren't anything but data,

102
00:07:18.163 --> 00:07:21.166
它们只是一种数据类型，它只是标准化了一切，
they're just a data type and it just normalizes everything,

103
00:07:21.166 --> 00:07:23.842
我可以串连和作曲，做任何我想做的事。
and I can just chain and compose and do whatever I want.

104
00:07:23.842 --> 00:07:30.300
所以召回结果是上升的。
So recall result is going up.

105
00:07:30.300 --> 00:07:32.456
让我们 console.log 我们这里有什么。
Let's console.log what we have here.

106
00:07:32.456 --> 00:07:36.600
这里发生了什么？
What's going on here?

107
00:07:36.600 --> 00:07:39.070
所以这有点奇怪。
So this is a little weird.

108
00:07:39.070 --> 00:07:44.400
我们有一个自由的 monad，它有一个属性 x 持有我们的 get 对象。
We have a free monad that has a property x is holding our get object.

109
00:07:44.400 --> 00:07:47.050
然后，我们就有了这种延续函数。
And then, we have this kind of continuation function.

110
00:07:48.430 --> 00:07:52.290
所以我们要做的是将它传递给一个解释器。
So we're going to do here is pass this into an interpreter.

111
00:07:53.590 --> 00:07:56.270
我们这样做的方式很有趣。
And the way we do that, it's kind of fun.

112
00:07:56.270 --> 00:08:01.196
如果你有一个免费的，免费的持有一些
If you have a free, free holding some

113
00:08:01.196 --> 00:08:06.070
东西，我们可以免费折叠地图，然后
stuff, we can fold map that out of the free, and

114
00:08:07.090 --> 00:08:12.960
在此之前将其映射到其他类型并映射到其他类型。
map it into some other type before that out of this and into something else.

115
00:08:12.960 --> 00:08:14.700
所以这就是我们要做的。
So that's what we'll do.

116
00:08:14.700 --> 00:08:15.950
我们要做一个小翻译。
We're gonna make a little interpreter.

117
00:08:17.040 --> 00:08:22.420
所以我们有了应用程序，我们将把应用程序映射到解释程序中，然后
So we have the app, and we're gonna fold map the app into interpret, and

118
00:08:22.420 --> 00:08:25.870
让我们做一个小任务吧？
let's make a little task, right?

119
00:08:25.870 --> 00:08:29.350
我们会做一个新的任务，因为这些东西会做一些严肃的事情，对吧？
We'll make a new task because these things are gonna go do serious stuff, right?

120
00:08:29.350 --> 00:08:33.231
实际上，你知道的，我只是想用 ID 把它存根，老实说，
Actually, you know, I'm just gonna use ID to stub it out, honestly,

121
00:08:33.231 --> 00:08:36.596
ID通常是我做的，有点架构，和
ID is typically what I do when I'm, kinda architecting, and

122
00:08:36.596 --> 00:08:40.673
然后当我整理好所有类型时，我将用任务交换 ID，
then when I've got all my types in order, I'll just swap out ID with task,

123
00:08:40.673 --> 00:08:44.913
通过这种方式，我可以实际查看正在发生的事情，而不是将其放在任务中。
this way I can actually look at what's going on instead of having it in a task.

124
00:08:44.913 --> 00:08:47.999
所以我们有了我们的解释，让我们写下来。
So we have our interpret, let's write that.

125
00:08:52.124 --> 00:08:55.320
现在采用我们的类型 x。
Now takes our type x.

126
00:08:55.320 --> 00:09:00.840
再一次，我们将调用我们的 Catamorphism，如果它是一个 get，我们会得到一个 URL。
And again, we gonna call our Catamorphism on that, and if it's a get, we get a URL.

127
00:09:00.840 --> 00:09:06.140
我们为什么不喜欢，您知道，获取您的 URL 并将其放入其中。
Why don't we do like, you know, got your URL and put this in that.

128
00:09:06.140 --> 00:09:13.220
这将是内容
This will be the contents for

129
00:09:13.220 --> 00:09:18.430
这个网址，我们有一个帖子，它需要一个网址和一个正文
this url, and we have a post, and it takes a url and a body

130
00:09:19.810 --> 00:09:27.084
我们会说，将正文发布到此网址。
and we'll say, posted body to this url.

131
00:09:28.500 --> 00:09:30.160
所以，这很有趣。
So, this is interesting.

132
00:09:30.160 --> 00:09:34.614
我们刚刚完成的是我们用数据编写了一个应用程序，并且
What we've just done is we've written an app entirely with data, and

133
00:09:34.614 --> 00:09:39.650
然后我们在调用时决定了我们想要使用的解释器。
then we've decided at the calling time which interpreter we wanna use.

134
00:09:39.650 --> 00:09:43.660
该解释器会将其解释为字符串。
This interpreter will interpret it into strings.

135
00:09:43.660 --> 00:09:48.502
它必须是一个 ID，我们必须在这里有一个目标 monad
It has to be an ID, we have to have a target monad here

136
00:09:48.502 --> 00:09:53.620
因为我们正在调用完整地图，我们希望能够将其放入另一个地图中。
cuz we're calling full map and we want to be able to put it into another.

137
00:09:53.620 --> 00:09:55.291
所以它的Id.of。
So its Id.of.

138
00:09:55.291 --> 00:09:56.580
应该提到，
Should have mentioned that,

139
00:09:56.580 --> 00:09:59.900
我们通常应该有一个目标单子，它几乎总是任务。
we should usually have a target monad, it's almost always task.

140
00:09:59.900 --> 00:10:03.820
但是如果你正在做一些类似的事情，记录一些解释器，
But if you're doing something like these little like, log kind of interpreters,

141
00:10:03.820 --> 00:10:06.740
测试解释器，然后我们就可以做到了。
test interpreters, then we can do that.

142
00:10:06.740 --> 00:10:07.478
现在让我们运行它。
And now let's run it.

143
00:10:07.478 --> 00:10:09.350
我们得到了什么？
And what do we get?

144
00:10:09.350 --> 00:10:11.530
我们得到了我们的想法，所以我们可以调用extract。
We get our idea out so we could just call extract.

145
00:10:14.080 --> 00:10:14.790
看那个。
Look at that.

146
00:10:14.790 --> 00:10:17.750
它发布了供分析之家使用的内容。
It posted the contents for home to analytics.

147
00:10:17.750 --> 00:10:21.790
所以我们已经创建了一个数据结构，我们可以写更多，
So we've we've created a data structure, we could write more on that,

148
00:10:21.790 --> 00:10:25.060
我想我们可以像连锁店一样做更多的电话和
I think we could do like chain we are gonna make more get calls and

149
00:10:25.060 --> 00:10:26.840
无论如何，这只是数据结构和
whatever and it's just the data structure and

150
00:10:26.840 --> 00:10:30.110
然后我们使用 foldMap 解释该数据结构，它只是
then we interpret that data structure using foldMap, which just

151
00:10:30.110 --> 00:10:35.230
级联并运行每条指令并解释它，这很棒。
cascades down and runs each instruction and interprets it, that's great.

152
00:10:35.230 --> 00:10:36.179
任何问题，是的。
Any questions, yes.

153
00:10:37.200 --> 00:10:43.290
&gt;&gt; 所以我们使用 Catamorphism 作为 switch 语句。
&gt;&gt; So we're using the Catamorphism as a switch statement.

154
00:10:43.290 --> 00:10:44.830
&gt;&gt; 是的。 &gt;&gt; 下面还有很多事情要做
&gt;&gt; Yeah. &gt;&gt; There's a lot more going on under

155
00:10:44.830 --> 00:10:49.630
引擎盖，我知道 monad 是什么，但我很好奇你是否对此发表评论。
the hood, I know what the monad is but I'm curious if you comment on that.

156
00:10:49.630 --> 00:10:53.520
我们本质上是用它来做一堆ifs。
We're essentially using it as a way of doing a bunch of ifs.

157
00:10:53.520 --> 00:10:55.420
&gt;&gt; 完全正确。
&gt;&gt; That's totally right.

158
00:10:55.420 --> 00:11:01.500
我们说这个 x 可能是一个 get，也可能是一个 post。
We're saying like this x could be a get, or it could be a post.

159
00:11:01.500 --> 00:11:06.690
JavaScript 并没有给我提供开箱即用的工具，比如，
And JavaScript doesn't give me the tools out of the box to say like,

160
00:11:06.690 --> 00:11:08.690
我有什么样的构造函数？
what kind of constructor do I have?

161
00:11:08.690 --> 00:11:10.070
我会做这个，那个，这个，那个。
I'll do this and that and this and that.

162
00:11:10.070 --> 00:11:12.960
所以这正是它所说的，如果你能做到这一点，
So it's exactly what it's just saying like, if you're get do this,

163
00:11:12.960 --> 00:11:14.950
如果你是后做的。
if you're post do that.

164
00:11:14.950 --> 00:11:19.150
读起来真的很好，这真的很短，所以我不想填满一半
Reads really nice and this is really short so I didn't want to fill up half

165
00:11:19.150 --> 00:11:22.840
屏幕上有喜欢的类或类型，然后尝试编写一个解释器。
the screen with like classes or types and then try to like write an interpreter.

166
00:11:22.840 --> 00:11:27.030
所以这就是我们带狗狗进来的原因，我强烈推荐它。
So that's why we brought doggy in and I highly recommend it.

167
00:11:27.030 --> 00:11:30.970
如果我真的在它到达之前错过它，那就太好了，
It's great if I actually miss this before it even gets there,

168
00:11:30.970 --> 00:11:33.195
我想 daggy 会告诉我的。
I think daggy will tell me.

169
00:11:33.195 --> 00:11:38.734
嘿，你给了我一些东西，你没有在那里发帖。
Hey, you gave me some stuff and you didn't have post in there.

170
00:11:38.734 --> 00:11:39.720
这是非常好的。
That's really nice.

171
00:11:39.720 --> 00:11:43.424
[笑] 就像我试图解释你所说的提前获取和发布和
[LAUGH] Like I tried to interpret your type that said ahead get and post and

172
00:11:43.424 --> 00:11:44.760
你错过了一个案例。
you missed a case.

173
00:11:44.760 --> 00:11:46.964
所以这很酷。
So that's pretty cool.

174
00:11:46.964 --> 00:11:51.040
好的，两秒钟后就是免费的 monad。
All right, so that's free monads in two seconds.

175
00:11:51.040 --> 00:11:52.840
我们实际上会在第一个应用程序中使用它。
We're actually gonna use that for the first app.

176
00:11:52.840 --> 00:11:58.420
我真的很想开车回家，这很有用，
I really wanna drive home that this is useful,

177
00:11:58.420 --> 00:12:02.290
我发现当我们做一个应用程序时它非常有用
I find it very useful when we did an app where we were

178
00:12:02.290 --> 00:12:07.860
当我们拥有 Bower 时将 NPM 推回原位，你们都记得 Bower，这是一个多么美好的世界。
pushing the NPM back when we had Bower, y'all remember Bower, what a world.

179
00:12:07.860 --> 00:12:12.970
无论如何，[笑] 我们喜欢发布 GitHub 包和所有这些东西，
Anyway, [LAUGH] We're like posting like GitHub packages and all this stuff and

180
00:12:12.970 --> 00:12:19.220
我们正在做这一切，就像非常讨厌的过程，有所有这些副作用，
we're doing all this like really nasty processes with all these side effects and

181
00:12:19.220 --> 00:12:22.880
几乎不可能将逻辑与副作用分开。
it was almost impossible to separate the logic from the side effects.

182
00:12:22.880 --> 00:12:25.430
因为这实际上是所有副作用。
Cuz it was literally all side effects.

183
00:12:25.430 --> 00:12:27.170
所以就像，我们如何测试这个东西？
So it was like, how do we test this thing?

184
00:12:27.170 --> 00:12:28.470
我们如何处理这件事？
How do we work with this thing?

185
00:12:28.470 --> 00:12:32.490
我们如何做到这样，我不会每次运行时都向 NPM 发帖
How do we make it so like, I'm not posting to NPM every time I run

186
00:12:32.490 --> 00:12:35.480
就像那样糟透了，就像我真的很想构建这个应用程序一样，但是
it like that sucks, like I really want to build this app out, but

187
00:12:35.480 --> 00:12:38.210
我不想喜欢不小心发布的东西。
I don't want to like accidentally publish things.

188
00:12:38.210 --> 00:12:40.800
这是一个很好的解决方案。
And this was a great solution for that.

189
00:12:40.800 --> 00:12:45.201
然后它就派上用场了，从那以后我就不必再使用它了。
And it came in handy then and then I haven't had to use it since.

190
00:12:45.201 --> 00:12:49.350
[笑] 所以，如果你需要它，它就在你身边，它真的很有用。
[LAUGH] So like, it's there for you if you need it and it's really useful.
