WEBVTT

1
00:00:00.000 --> 00:00:06.369
在我们深入研究这整个事情之前，这一切都很好。
Before we go too much further into this whole thing, this is all well and good.

2
00:00:06.369 --> 00:00:08.521
但是你如何测试这个？
But how do you test this?

3
00:00:08.521 --> 00:00:13.860
[笑] 我的意思是，这只是一堆任务，对吧？
[LAUGH] I mean, like it's just a bunch of tasks, right?

4
00:00:13.860 --> 00:00:20.890
他们实际上是在阅读标准，这不是很好。
And they're literally reading the standard out, and that's not great.

5
00:00:22.670 --> 00:00:28.540
因此，为此，我觉得我们刚刚学习了自由 monad。
And so, for this, I feel like we just learned free monads.

6
00:00:28.540 --> 00:00:33.667
我觉得这是这个特定应用程序的一个很好的解决方案。
And I felt like that was a great solution to this particular app.

7
00:00:33.667 --> 00:00:37.151
这样我们就可以将这些交互视为数据结构和
So that we can treat these interactions as data structures and

8
00:00:37.151 --> 00:00:40.371
然后用我们想要的任何解释器来解释它们。
then interpret them with whatever interpreter we want.

9
00:00:40.371 --> 00:00:46.461
通过测试解释器或实时控制台解释器。
Via either a test interpreter or a live console interpreter.

10
00:00:46.461 --> 00:00:51.554
因此，这将使我们在环境中具有可测试性和可移植性。
So that'll gain us testability and portability in environments.

11
00:00:51.554 --> 00:00:55.770
好的，要做到这一点，我们必须做出一些改变。
Okay, so to do this, we have to make some changes.

12
00:00:57.660 --> 00:01:00.043
这些变化是，我们要考虑的影响。
These changes are, we have to think about the effects.

13
00:01:00.043 --> 00:01:03.387
现在我们不只是把所有事情都放在任务中，对吧？
Now we're not just throwing everything in task, right?

14
00:01:03.387 --> 00:01:06.820
这里的一切都只是任务任务任务任务任务。
Everything here is just task task task task task.

15
00:01:06.820 --> 00:01:11.568
如果我们有这些具体的行动，那就更好了
And what would be better is if we had these specific actions that

16
00:01:11.568 --> 00:01:15.428
我们正在捕获，就像我们对 HTTP GET 所做的一样。
we're capturing, just like we did with HTTP GET.

17
00:01:15.428 --> 00:01:17.005
那些可能只是任务，但是
Those could just be task, but

18
00:01:17.005 --> 00:01:21.182
我们要做的是将它们转化为代表动作的数据类型。
what we're gonna do is turn those into data types that represent the actions.

19
00:01:21.182 --> 00:01:24.887
那么我们将在这里用打印做什么。
So what we'll do here with print.

20
00:01:24.887 --> 00:01:28.326
我想改变字打印，但
I wanna change the word print, but

21
00:01:28.326 --> 00:01:32.722
让我们首先引入liftF，我们需要它。
let's first bring in liftF, we need that.

22
00:01:32.722 --> 00:01:35.978
所以我们将免费提供，
So we'll do that from free,

23
00:01:35.978 --> 00:01:40.460
LiftF 来自免费，你在吗？
liftF comes from free, are you there?

24
00:01:42.490 --> 00:01:43.160
你有空吗？
Are you there free?

25
00:01:43.160 --> 00:01:46.896
是我，布莱恩。
It's me, Brian.

26
00:01:46.896 --> 00:01:48.662
在这里的某个地方，我们会弄清楚的。
Somewhere in here, we'll figure it out.

27
00:01:48.662 --> 00:01:52.232
我可能必须跳出一个文件夹才能找到它。
I probably have to jump out of a folder to get to it.

28
00:01:52.232 --> 00:01:54.130
你在吗？
Are you there?

29
00:01:54.130 --> 00:01:57.130
我可能毁了我的建议，我们会知道的。
I probably ruined my suggestions, we'll find out.

30
00:01:57.130 --> 00:02:01.489
好的，可能在 lib 中，我假设它在 lib 中。
Okay, might be in lib, I'm assuming it's in lib.

31
00:02:01.489 --> 00:02:03.848
但是我们有liftF。
But so we have liftF.

32
00:02:03.848 --> 00:02:05.847
注意，把东西变成自由的 monad。
Note, turn things into free monads.

33
00:02:05.847 --> 00:02:08.045
让我们引入我们的 daggy 或 taggedSum。
Let's bring in our daggy or taggedSum.

34
00:02:11.420 --> 00:02:16.937
太好了，所以我们将制作用于读取和写入控制台的类型。
Great, so we'll make type for reading and writing to the console.

35
00:02:16.937 --> 00:02:19.280
我们将其称为控制台，对吗？
We'll call it Console, right?

36
00:02:19.280 --> 00:02:21.700
这将有不同的解释。
And this will be interpreted in different ways.

37
00:02:21.700 --> 00:02:23.985
我们将为数据库做另一个。
And we'll do another one for the database.

38
00:02:23.985 --> 00:02:27.880
这是该计划中的两个主要影响。
Those are two primary effects in this program.

39
00:02:27.880 --> 00:02:34.780
而不必在我们的代码中担心这一点
And instead of having to worry about that in our code and

40
00:02:34.780 --> 00:02:38.640
只需抛出所有任务，我们会将其视为数据结构。
just throw everything tasks, we're gonna treat it like a data structure.

41
00:02:38.640 --> 00:02:43.020
所以 taggedSum ，我们将调用这个控制台。
So taggedSum and we'll call this Console.

42
00:02:43.020 --> 00:02:47.735
taggedSum 在这里使用它的名字而不是试图推断它，所以
taggedSum takes it's name here instead of trying to infer it, so

43
00:02:47.735 --> 00:02:49.470
作为第一个论点。
as the first argument.

44
00:02:49.470 --> 00:02:53.649
然后我们会说我们有一个问题，也许。
And then we'll say we have a question, perhaps.

45
00:02:53.649 --> 00:02:57.035
这需要字符串或 q 怎么样。
That takes the string or how about a q.

46
00:02:57.035 --> 00:03:00.611
原来这些并不重要，这些名字。
Turns out these don't really matter, these names.

47
00:03:00.611 --> 00:03:03.374
我的意思是，它有利于检查，但是当你进行变形时，
I mean, it's good for inspection, but when you do your catamorphism,

48
00:03:03.374 --> 00:03:06.135
他们只是解构类型，你可以随意命名它。
they just destructure the type and you can name this whatever you want.

49
00:03:06.135 --> 00:03:09.950
所以不要为此睡太多觉。
So don't lose too much sleep over that.

50
00:03:09.950 --> 00:03:14.340
然后我们会做 print 和 print 会带一个字符串，太棒了。
And then we'll do print and print will take a string, terrific.

51
00:03:14.340 --> 00:03:20.810
q 和 s，真正的函数式程序员编写不可能的变量，正如你所知。
q and s, true functional programmers write impossible variables, just so you know.

52
00:03:20.810 --> 00:03:25.699
[笑] 如果我在工作中这样做，我会把它全部写出来。
[LAUGH] If I was doing this at work, I would write it all out.

53
00:03:25.699 --> 00:03:29.707
[笑] 所以 Db，我们会做 Db 和
[LAUGH] So Db, we'll do Db and

54
00:03:29.707 --> 00:03:33.720
我们在哪里得到一个保存，对吧？
where we get a Save, right?

55
00:03:33.720 --> 00:03:41.510
这需要一张桌子和一条记录。
And that takes a table and a record.

56
00:03:41.510 --> 00:03:45.365
所有人，离开这里，
And All, get out of here,

57
00:03:45.365 --> 00:03:50.104
All 需要表和查询。
All takes the table and a query.

58
00:03:50.104 --> 00:03:54.648
我选择传入 where 子句，所以我们之前没有看到，
I made it optional to pass the where clause in so we didn't see that earlier,

59
00:03:54.648 --> 00:03:55.429
但确实如此。
but it does.

60
00:03:56.600 --> 00:03:58.460
好的，很酷，所以我们有这两个。
Okay, cool, so we have these two.

61
00:03:58.460 --> 00:04:01.320
关于自由 monad，我没有提到的一件事是
One thing I didn't mention about a free monad is that

62
00:04:01.320 --> 00:04:04.311
它实际上希望将函子 [LAUGH] 传递给它。
it actually expects functors [LAUGH] to be passed to it.

63
00:04:04.311 --> 00:04:06.360
我们应该制作这些函子。
We should be making these functors.

64
00:04:06.360 --> 00:04:10.303
但是你实际上可以把任何东西都变成一个完整的东西，
But you can actually make anything into a functor with whole thing,

65
00:04:10.303 --> 00:04:11.546
别担心。
don't worry about it.

66
00:04:11.546 --> 00:04:12.493
我只想喊出来。
I just want to call it out.

67
00:04:12.493 --> 00:04:19.990
[笑] 好的，所以，Console，Db，两种数据类型将代表我们的函数。
[LAUGH] All right, so, Console, Db, two data types gonna represent our functions.

68
00:04:19.990 --> 00:04:24.593
所以现在我们必须进入我们有打印的功能。
So now we have to go into our functions where we have print.

69
00:04:24.593 --> 00:04:30.648
而不是实际打印，让我们在这里做 realPrint，对吗？
And instead of actually printing, let's do realPrint here, right?

70
00:04:30.648 --> 00:04:36.025
我们将制作一个打印功能，它只是简单地做那个liftF 废话，对吧？
And we'll make a print function that simply does that liftF nonsense, right?

71
00:04:36.025 --> 00:04:41.270
LiftF，我们将构建我们的 Console.Print 和
liftF and we'll construct our Console.Print and

72
00:04:41.270 --> 00:04:44.070
我们将把字符串传递给它。
we'll pass the string to it.

73
00:04:44.070 --> 00:04:47.067
我们的问题功能也是如此。
Likewise with our question function.

74
00:04:47.067 --> 00:04:49.589
我想我们在这里称它为 getInput。
I think we called it getInput here.

75
00:04:49.589 --> 00:04:55.681
所以我们只是要在这里调用 print 和 question 来制作数据类型。
So we're just gonna call print and question here to make the data types.

76
00:04:55.681 --> 00:04:58.553
然后当我们解释它时，我们将调用真正的函数。
And then when we interpret it, we'll call the real functions.

77
00:04:58.553 --> 00:05:04.210
所以我们可以将它们与 realPrint 和 getInput 放在一起。
So we could put those together with realPrint and getInput.

78
00:05:04.210 --> 00:05:11.758
也许我们称之为写输出，我不知道，writeOutput [LAUGH] 看起来很棒。
Maybe we call it write output, I don't know, writeOutput [LAUGH] looks great.

79
00:05:11.758 --> 00:05:14.231
现在有人有任何问题吗？
Does anybody have any questions at this point?

80
00:05:14.231 --> 00:05:17.357
我们只是通过免费提供东西的动作。
We're just going through the motions of putting stuff in free.

81
00:05:17.357 --> 00:05:19.741
但是现在我们有了这两个。
But now we have these two.

82
00:05:19.741 --> 00:05:24.708
我们必须为所有人做同样的事情，
We've got to do the exact same thing for All,

83
00:05:24.708 --> 00:05:28.377
我们将其称为 dbAll 和 dbSave。
we'll call it dbAll and dbSave.

84
00:05:28.377 --> 00:05:33.734
这将是 Db.All，这很无聊。
This will be Db.All, this is rather boring.

85
00:05:33.734 --> 00:05:36.884
大多数这些东西只是从定义和
Most of this stuff just follows from the definitions and

86
00:05:36.884 --> 00:05:39.441
你只是在填空，对吗？
you're just filling in the blanks, right?

87
00:05:39.441 --> 00:05:43.949
表，查询，表，查询。
Table, query, table, query.

88
00:05:43.949 --> 00:05:50.440
然后你有 Db.Save(table, record)。
Then you have Db.Save(table, record).

89
00:05:50.440 --> 00:05:52.067
我们拿走我们的桌子和我们的记录。
And we take our table and our record.

90
00:05:52.067 --> 00:05:55.620
再一次，我可以自动化所有这些。
And again, I could have automated all of this.

91
00:05:55.620 --> 00:06:01.020
它只是类型的组合，这实际上只是
It's just composition of the type, this is literally just

92
00:06:01.020 --> 00:06:06.810
由dbAll和liftF组成，对吗？
composed dbAll and liftF, right?

93
00:06:06.810 --> 00:06:10.550
即便如此，我也不必每次都写出来。
And even then I don't have to write that out every time.

94
00:06:10.550 --> 00:06:11.462
但我这样做是为了
But I'm doing this for

95
00:06:11.462 --> 00:06:14.500
完整性的缘故，所以你可以看到因为很多这有点令人困惑。
completeness' sake and so you can see cuz a lot of this is kinda confusing.

96
00:06:15.970 --> 00:06:17.677
好吧，太好了，现在会发生什么？
All right, great, now what happens?

97
00:06:17.677 --> 00:06:25.033
[笑] 好吧，我们必须在这些地方将其切换到 dbAll 和 dbSave。
[LAUGH] Well we gotta switch this to dbAll and dbSave in these places.

98
00:06:25.033 --> 00:06:29.967
我可能应该刚刚重命名原件，但你活着，你学习。
I probably should have just renamed the originals, but you live, you learn.

99
00:06:29.967 --> 00:06:37.140
现在这将是一个问题，一个问题，一个问题。
And this is now going to be question, question, question.

100
00:06:37.140 --> 00:06:44.045
如果我错过任何一个，我会很快，[笑]所以让我们看看。
If I miss any, I'm going real fast, [LAUGH] so let's see.

101
00:06:44.045 --> 00:06:48.848
因为这并不有趣，我只是在更新功能
Cuz this is not interesting, I'm just updating the functions

102
00:06:48.848 --> 00:06:52.665
我一开始就不应该重命名。
that I should not have renamed in the first place.

103
00:06:52.665 --> 00:06:56.780
dbAll，很酷，认为我们做到了。
dbAll, cool, think we did it.

104
00:06:56.780 --> 00:07:01.290
我们做到了吗，dbSave，dbAll，太棒了。
Did we do it, dbSave, dbAll, great.

105
00:07:03.110 --> 00:07:05.972
那么，既然我们正在这样做，会发生什么？
So, now that we're doing this, what's gonna happen?

106
00:07:05.972 --> 00:07:13.553
那么 f 返回返回一个免费的 monad，而不是一个任务。
Well f returns returns a free monad, not a task.

107
00:07:13.553 --> 00:07:19.473
所以我们有解释，我们必须自由地折叠Map（解释），
So we have interpret, we have to foldMap(interpret) on the free,

108
00:07:19.473 --> 00:07:22.955
我们要把它解释为一项任务。
and we're gonna interpret it to a task.

109
00:07:22.955 --> 00:07:28.490
解释，解释，解释，我们如何解释？
Interpet, interpet, interpret, how do we interpret it?

110
00:07:28.490 --> 00:07:31.370
好吧，就像我们之前所做的那样，我们将编写一个小解释器。
Well just like we did before, we'll write a little interpreter.

111
00:07:32.910 --> 00:07:37.298
如果你曾经做过免费的 monad 事情，比如在网上查这个，这就是这里
And this is where if you ever do free monad stuff like looking this up online,

112
00:07:37.298 --> 00:07:40.042
你正试图真正进入自由 monads，
you're trying to get really into free monads,

113
00:07:40.042 --> 00:07:42.940
你开始处理可组合的解释器。
you start to deal with composable interpreters.

114
00:07:42.940 --> 00:07:45.586
就像我有这个口译员和那个口译员一样
Like I have this interpreter and that interpreter and

115
00:07:45.586 --> 00:07:47.599
我想把它们组合在一起。
I want to kind of compose them together.

116
00:07:47.599 --> 00:07:50.460
当我将所有效果合成为免费时，
And as I'm composing all my effects into free, which

117
00:07:50.460 --> 00:07:55.720
我刚刚将我的所有效果标准化为这个 monad，所以它们都是连锁的。
I've just normalized all my effects into this one monad so they just all chain.

118
00:07:55.720 --> 00:07:59.910
现在我的问题变成了，我如何分解并传入不同的解释器？
Now my problem becomes, how do I break down and pass in different interpreters?

119
00:08:01.710 --> 00:08:05.320
就目前而言，我有两个影响。
For the time being right now, I have two effects.

120
00:08:05.320 --> 00:08:07.900
我不会带来副产品和
And I'm not gonna bring in co-products and

121
00:08:07.900 --> 00:08:10.695
所有这些东西都是为了尝试编写解释器。
all this stuff to try to compose interpreters.

122
00:08:10.695 --> 00:08:13.836
所以我们要做的是我要说，我接受这个，接受这个东西。
So what we're gonna do is I'm gonna say, I take this, take this thing.

123
00:08:13.836 --> 00:08:18.710
我现在不知道这东西是控制台还是数据库，我不确定。
I don't know if this thing's a console or a DB right now, I'm not sure.

124
00:08:18.710 --> 00:08:22.148
而不是试图正式化并使这更好一点，
And instead of trying to formalize and make this a little nicer,

125
00:08:22.148 --> 00:08:25.344
我要继续说，嘿，你有桌子吗？
I'm just gonna go ahead and say, hey, do you have a table?

126
00:08:25.344 --> 00:08:28.697
因为我知道这两个都有桌子。
Because I know that both of these have table.

127
00:08:28.697 --> 00:08:30.607
所以这是，我只是在作弊，
So this is, I'm just cheating,

128
00:08:30.607 --> 00:08:33.760
因为我现在不想经历这一切。
because I don't want to go through all that right now.

129
00:08:33.760 --> 00:08:37.789
老实说，我认为当你有类型时，这些东西会更好。
And honestly, I think that stuff is much nicer when you have types.

130
00:08:37.789 --> 00:08:41.954
并且在无类型语言中可能有更好的解决方案来组合
And there's probably better solutions in an untyped language to compose

131
00:08:41.954 --> 00:08:43.560
口译员。
interpreters.

132
00:08:43.560 --> 00:08:48.663
好的，所以如果你有一张桌子，那么我们会解释，
All right, so if you've got a table then we'll interpret,

133
00:08:48.663 --> 00:08:54.840
这里调用dbToTask，否则调用consoleToTask。
here call dbToTask, otherwise, we'll call consoleToTask.

134
00:08:54.840 --> 00:08:55.841
所以这是两个。
So these are the two.

135
00:08:55.841 --> 00:08:57.676
我们将传入我们的 x。
And we'll pass in our x.

136
00:08:57.676 --> 00:08:59.060
大家看到了吗？
Does everybody see?

137
00:08:59.060 --> 00:09:01.285
哇，每个人都看到所有那些 x 吗？
Wow, does everybody see all those x's?

138
00:09:01.285 --> 00:09:05.192
[笑] 很明显，我为什么要这样做以及那是为了什么，
[LAUGH] So obviously, why I'm doing this and what that's for,

139
00:09:05.192 --> 00:09:08.670
就像我有一个 x，我不知道它是哪个。
it's like I've got an x, I don't know which one it is.

140
00:09:08.670 --> 00:09:15.280
我必须将这种只是原始数据的数据类型转换为实际运行的任务。
I have to turn this data type that's just raw data into an actual running task.

141
00:09:15.280 --> 00:09:18.941
而不是做任何更有趣的事情，我只会这样做。
And instead of doing anything fancier, I'll just do that.

142
00:09:18.941 --> 00:09:24.391
所以 dbToTask 接受我们的 x，我们会做得很好
So dbToTask takes our x, and we'll do that nice little

143
00:09:24.391 --> 00:09:29.854
catamorphism，如果我们有一个保存，我们就拿一张桌子。
catamorphism where if we have a save, we take a table.

144
00:09:29.854 --> 00:09:35.360
从字面上看，这只是 dbSave [笑] 对，或者只是 Save。
And literally it's just dbSave [LAUGH] right, or it's just Save.

145
00:09:35.360 --> 00:09:38.728
在我们拥有全部的地方，它只是全部。
Where we have an All, it's just All.

146
00:09:38.728 --> 00:09:45.480
我们经历并重命名了我们的类型，但 Save 持有相同的参数。
We went through and renamed our types but Save is holding the same arguments.

147
00:09:45.480 --> 00:09:47.568
所以它只是将它的参数传递给 save 函数。
So it's just gonna pass its arguments into the save function.

148
00:09:47.568 --> 00:09:52.928
所以通常你会说，它需要一张桌子和一条记录。
So normally you'd say like, it takes a table and a record.

149
00:09:52.928 --> 00:09:56.780
然后我们将继续使用表调用 save 并记录和
And then we'll go ahead and call save with the table and record and

150
00:09:56.780 --> 00:09:58.191
作为任务返回。
that returns as a task.

151
00:09:58.191 --> 00:10:01.444
所以我可以通过它保存。
So I could just pass it save.

152
00:10:01.444 --> 00:10:02.812
看看它是如何工作的？
See how that works?

153
00:10:02.812 --> 00:10:06.692
与 All 一样，我得到表和一个查询，然后它只调用 all(table,
Same thing with All, I get the table and a query and then it just calls all(table,

154
00:10:06.692 --> 00:10:07.210
询问）。
query).

155
00:10:07.210 --> 00:10:12.830
让我们对 consoleToTask 做同样的事情。
Let's do the same thing with the consoleToTask.

156
00:10:12.830 --> 00:10:19.044
如果我有问题，我会调用 getInput。
And what's gonna happen here is if I have a question, I'm just gonna call getInput.

157
00:10:19.044 --> 00:10:24.260
如果我们有打印，我们将调用 writeOutput，非常好。
And if we have a print, we'll call writeOutput, excellent.

158
00:10:24.260 --> 00:10:27.890
所以我们只是映射保存我们参数的数据类型
So we're just mapping our datatypes holding our arguments

159
00:10:27.890 --> 00:10:32.450
进入将与此一起运行的实际功能。
into actual functions that will run with this.

160
00:10:32.450 --> 00:10:33.739
这很酷，让我们看看会发生什么。
So that's cool, let's see what happens.

161
00:10:33.739 --> 00:10:36.610
我非常怀疑这会奏效。
I'm highly doubtful this is gonna work.

162
00:10:37.628 --> 00:10:39.623
好吧，我是布莱恩。
All right, I'm Brian.

163
00:10:39.623 --> 00:10:45.460
[笑]好吧，这里发生了什么？
[LAUGH] All right, what happens here?

164
00:10:45.460 --> 00:10:46.865
我拿到了第一个。
I got the first one.

165
00:10:46.865 --> 00:10:50.739
等等等等，.foldMap 不是一个函数，好吧。
Blah blah blah, .foldMap is not a function, okay.

166
00:10:50.739 --> 00:10:53.250
那么这里发生了什么？
So what's happening here?

167
00:10:53.250 --> 00:10:56.114
所以我们把它变成了一个任务并运行它。
So we turned it into a task and we ran it.

168
00:10:56.114 --> 00:10:57.640
我们在开始时看到了这种情况。
We saw that happen with start.

169
00:10:57.640 --> 00:11:01.930
我们跑了 f，它什么也没做，只是返回了一个自由的 monad。
We ran f, it did nothing but return us a free monad.

170
00:11:01.930 --> 00:11:07.579
然后我们解释了实际运行问题的自由单子，
Then we interpreted that free monad which actually ran the question,

171
00:11:07.579 --> 00:11:09.117
这太棒了。
which is awesome.

172
00:11:09.117 --> 00:11:12.593
然后我们分叉了它，所以它实际上运行了任务并且
And then we forked that so it actually ran the task and

173
00:11:12.593 --> 00:11:15.780
它返回的内容应该传递给 runApp。
what it returned should be passed in to runApp.

174
00:11:15.780 --> 00:11:21.140
那么问题来了，getInput 返回了什么？
So the question is, what did getInput return?

175
00:11:21.140 --> 00:11:25.685
或者抱歉，不是 getInput 返回的是什么，而是 start 返回的是什么？
Or sorry, not what did getInput return, it's what did start return?

176
00:11:25.685 --> 00:11:28.545
我们将返回 menu 或 getAuthor。
We'll return menu or getAuthor.

177
00:11:32.342 --> 00:11:39.028
我怀疑菜单，这些是功能，
And I have a suspicion that menu, these are functions,

178
00:11:39.028 --> 00:11:45.750
所以他们必须被调用，然后他们是自由的单子。
so they have to be called and then they're free monads.

179
00:11:45.750 --> 00:11:48.165
但是我们在这里调用它，让我们看看 f 是什么。
But here we're calling it, let's just see what f is.

180
00:11:52.521 --> 00:11:58.330
不过，我们真的很接近，而且我们几乎没有时间做这个了。
We're real close though, and we're almost out of time for this one.

181
00:11:58.330 --> 00:12:02.710
我们花了一点时间调试这个，以便我们可以弄清楚发生了什么。
We spent a little bit longer debugging this so we can figure out what's going on.

182
00:12:04.290 --> 00:12:08.330
也许我们可以花一点时间来编写我们的另一个解释器。
Maybe we can take a second to write our other interpreter.

183
00:12:09.760 --> 00:12:13.160
所以它说第一个 f 是这个东西，好吗？
So it says the first f is this thing, okay?

184
00:12:13.160 --> 00:12:17.032
这是一个函数，好吧，我们称这个函数为
It's a function, okay, and we call that function and

185
00:12:17.032 --> 00:12:19.732
我们免费得到这个，因为它调用 dbAll。
we get this free, cuz it calls dbAll.

186
00:12:19.732 --> 00:12:24.623
第二个是函数
The second one is a function,

187
00:12:24.623 --> 00:12:29.515
已经很有趣了
it's interesting it already

188
00:12:29.515 --> 00:12:34.455
调用了两次，对吗？
called this twice, right?

189
00:12:34.455 --> 00:12:37.910
发生了什么，它被称为开始，它没有任何作者。
What happened, is it called start, it didn't have any authors.

190
00:12:37.910 --> 00:12:42.643
然后它过去调用createAuthor，然后
So then it went over and called createAuthor, and

191
00:12:42.643 --> 00:12:49.505
然后它结束调用，执行 dbSave 然后转到菜单。
then it's ending up calling, does dbSave and then goes to menu.

192
00:12:49.505 --> 00:12:52.472
dbSave 是我们想要它做的事情吗？
Is dbSave the thing that we wanted it to do?

193
00:12:52.472 --> 00:12:54.502
这就是我们所说的，dbSave？
Is that what we called it, dbSave?

194
00:12:54.502 --> 00:12:57.509
是的，liftF，Save，Db。
Yeah, liftF, Save, Db.

195
00:12:57.509 --> 00:13:02.160
好吧，让我们再试一次，现在我们得到了什么，这里的 f 是什么？
All right, let's just try this again, now what do we get, what is f in here?

196
00:13:04.120 --> 00:13:06.710
f 是 getInput，我们搞砸了。
f is getInput, we screwed up.

197
00:13:06.710 --> 00:13:08.640
我们把 getInput 留在了这里。
We left the getInput in here.

198
00:13:08.640 --> 00:13:09.640
那个是从哪里来的？
Where did that come from?

199
00:13:11.410 --> 00:13:13.790
我忘了，它就在那里，你去吧。
I forgot, it was way up there, there you go.

200
00:13:13.790 --> 00:13:15.360
这就是正在发生的事情。
So that's what's going on.

201
00:13:15.360 --> 00:13:19.730
所以这里发生的事情是我们没有返回正确的类型。
So what happened here is that we didn't return the right type.

202
00:13:19.730 --> 00:13:23.000
我们没有类型检查器，我没有更新，我们去了。
We don't have a type checker, I didn't update that, there we go.

203
00:13:23.000 --> 00:13:25.194
好吧，让我们看看会发生什么。
All right, so let's see what happens.

204
00:13:25.194 --> 00:13:30.524
我现在可以清除所有这些日志。
I can clear all these logs now.

205
00:13:30.524 --> 00:13:33.410
好吧，那就跑吧，我是布赖恩。
All right, so run that, I am Brian.

206
00:13:33.410 --> 00:13:34.450
你今天想去哪里？
Where do you want to go today?

207
00:13:34.450 --> 00:13:35.640
我想写。
I want to write.

208
00:13:35.640 --> 00:13:37.725
哇，转到标题：嗨。
Whew, go to Title: Hi.

209
00:13:37.725 --> 00:13:40.990
就是这样，踢屁股。
So that's it, kick ass.

210
00:13:40.990 --> 00:13:42.580
好的，所以我们正在做免费的 monad。
All right, so we're doing free monads.
